/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["druid"] = factory();
	else
		root["druid"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./clustering/Hierarchical_Clustering.js":
/*!***********************************************!*\
  !*** ./clustering/Hierarchical_Clustering.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Hierarchical_Clustering\": () => (/* binding */ Hierarchical_Clustering)\n/* harmony export */ });\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n\n/**\r\n * @class\r\n * @alias Hierarchical_Clustering\r\n */\n\nclass Hierarchical_Clustering {\n  /**\r\n   * @constructor\r\n   * @memberof module:clustering\r\n   * @alias Hierarchical_Clustering\r\n   * @todo needs restructuring. \r\n   * @param {Matrix} matrix \r\n   * @param {(\"single\"|\"complete\"|\"average\")} [linkage = \"single\"] \r\n   * @param {Function} [metric = euclidean] \r\n   * @returns {Hierarchical_Clustering}\r\n   */\n  constructor(matrix, linkage = \"single\", metric = _metrics_index__WEBPACK_IMPORTED_MODULE_0__.euclidean) {\n    this._id = 0;\n    this._matrix = matrix;\n    this._metric = metric;\n    this._linkage = linkage;\n    this.init();\n    this.root = this.do();\n    return this;\n  }\n  /**\r\n   * \r\n   * @param {Number} value - value where to cut the tree.\r\n   * @param {(\"distance\"|\"depth\")} [type = \"distance\"] - type of value.\r\n   * @returns {Array<Array>} Array of clusters with the indices of the rows in given {@link matrix}.\r\n   */\n\n\n  get_clusters(value, type = \"distance\") {\n    let clusters = [];\n    let accessor;\n\n    switch (type) {\n      case \"distance\":\n        accessor = d => d.dist;\n\n        break;\n\n      case \"depth\":\n        accessor = d => d.depth;\n\n        break;\n\n      default:\n        throw \"invalid type\";\n    }\n\n    this._traverse(this.root, accessor, value, clusters);\n\n    return clusters;\n  }\n  /**\r\n   * @private\r\n   * @param {} node \r\n   * @param {*} f \r\n   * @param {*} value \r\n   * @param {*} result \r\n   */\n\n\n  _traverse(node, f, value, result) {\n    if (f(node) <= value) {\n      result.push(node.leaves());\n    } else {\n      this._traverse(node.left, f, value, result);\n\n      this._traverse(node.right, f, value, result);\n    }\n  }\n  /**\r\n   * computes the tree.\r\n   */\n\n\n  init() {\n    const metric = this._metric;\n    const A = this._matrix;\n    const n = this._n = A.shape[0];\n    const d_min = this._d_min = new Float64Array(n);\n    const distance_matrix = this._distance_matrix = new Array(n);\n\n    for (let i = 0; i < n; ++i) {\n      d_min[i] = 0;\n      distance_matrix[i] = new Float64Array(n);\n\n      for (let j = 0; j < n; ++j) {\n        distance_matrix[i][j] = i === j ? Infinity : metric(A.row(i), A.row(j));\n\n        if (distance_matrix[i][d_min[i]] > distance_matrix[i][j]) {\n          d_min[i] = j;\n        }\n      }\n    }\n\n    const clusters = this._clusters = new Array(n);\n    const c_size = this._c_size = new Uint16Array(n);\n\n    for (let i = 0; i < n; ++i) {\n      clusters[i] = [];\n      clusters[i][0] = new Cluster(this._id++, null, null, 0, A.row(i), i, 1, 0);\n      c_size[i] = 1;\n    }\n\n    return this;\n  }\n  /**\r\n   * computes the tree.\r\n   */\n\n\n  do() {\n    const n = this._n;\n    const d_min = this._d_min;\n    const D = this._distance_matrix;\n    const clusters = this._clusters;\n    const c_size = this._c_size;\n    const linkage = this._linkage;\n    let root = null;\n\n    for (let p = 0, p_max = n - 1; p < p_max; ++p) {\n      let c1 = 0;\n\n      for (let i = 0; i < n; ++i) {\n        if (D[i][d_min[i]] < D[c1][d_min[c1]]) {\n          c1 = i;\n        }\n      }\n\n      let c2 = d_min[c1];\n      let c1_cluster = clusters[c1][0];\n      let c2_cluster = clusters[c2][0];\n      let new_cluster = new Cluster(this._id++, c1_cluster, c2_cluster, D[c1][c2]);\n      clusters[c1].unshift(new_cluster);\n      c_size[c1] += c_size[c2];\n\n      for (let j = 0; j < n; ++j) {\n        switch (linkage) {\n          case \"single\":\n            if (D[c1][j] > D[c2][j]) {\n              D[j][c1] = D[c1][j] = D[c2][j];\n            }\n\n            break;\n\n          case \"complete\":\n            if (D[c1][j] < D[c2][j]) {\n              D[j][c1] = D[c1][j] = D[c2][j];\n            }\n\n            break;\n\n          case \"average\":\n            D[j][c1] = D[c1][j] = (c_size[c1] * D[c1][j] + c_size[c2] * D[c2][j]) / (c_size[c1] + c_size[j]);\n            break;\n        }\n      }\n\n      D[c1][c1] = Infinity;\n\n      for (let i = 0; i < n; ++i) {\n        D[i][c2] = D[c2][i] = Infinity;\n      }\n\n      for (let j = 0; j < n; ++j) {\n        if (d_min[j] === c2) {\n          d_min[j] = c1;\n        }\n\n        if (D[c1][j] < D[c1][d_min[c1]]) {\n          d_min[c1] = j;\n        }\n      }\n\n      root = new_cluster;\n    }\n\n    return root;\n  }\n\n}\n\nclass Cluster {\n  constructor(id, left, right, dist, centroid, index, size, depth) {\n    this.id = id;\n    this.left = left;\n    this.right = right;\n    this.dist = dist;\n    this.index = index;\n    this.size = size != null ? size : left.size + right.size;\n    this.depth = depth != null ? depth : 1 + Math.max(left.depth, right.depth);\n    this.centroid = centroid != null ? centroid : this._calculate_centroid(left, right);\n    return this;\n  }\n\n  _calculate_centroid(left, right) {\n    const l_size = left.size;\n    const r_size = right.size;\n    const l_centroid = left.centroid;\n    const r_centroid = right.centroid;\n    const size = this.size;\n    const n = left.centroid.length;\n    const new_centroid = new Float64Array(n);\n\n    for (let i = 0; i < n; ++i) {\n      new_centroid[i] = (l_size * l_centroid[i] + r_size * r_centroid[i]) / size;\n    }\n\n    return new_centroid;\n  }\n\n  get isLeaf() {\n    return this.depth === 0;\n  }\n\n  leaves() {\n    if (this.isLeaf) return [this.index];\n    const left = this.left;\n    const right = this.right;\n    return (left.isLeaf ? [left.index] : left.leaves()).concat(right.isLeaf ? [right.index] : right.leaves());\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./clustering/Hierarchical_Clustering.js\n");

/***/ }),

/***/ "./clustering/KMeans.js":
/*!******************************!*\
  !*** ./clustering/KMeans.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"KMeans\": () => (/* binding */ KMeans)\n/* harmony export */ });\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _util_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/index */ \"./util/index.js\");\n/* harmony import */ var _datastructure_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../datastructure/index */ \"./datastructure/index.js\");\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n\n\n\n\n/**\r\n * @class\r\n * @alias KMeans\r\n */\n\nclass KMeans {\n  /**\r\n   * @constructor\r\n   * @memberof module:clustering\r\n   * @alias KMeans\r\n   * @todo needs restructuring. \r\n   * @param {Matrix} matrix \r\n   * @param {Numbers} K \r\n   * @param {Function} [metric = euclidean] \r\n   * @param {Number} [seed = 1987]\r\n   * @param {Boolean} [init = true]\r\n   * @returns {KMeans}\r\n   */\n  constructor(matrix, K, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_0__.euclidean, seed = 1987, init = true) {\n    this._metric = metric;\n    this._matrix = matrix;\n    this._K = K;\n    const [N, D] = matrix.shape;\n    this._N = N;\n    this._D = D;\n    if (K > N) K = N;\n    this._randomizer = new _util_index__WEBPACK_IMPORTED_MODULE_1__.Randomizer(seed);\n    this._clusters = new Array(N).fill(undefined);\n    this._cluster_centroids = this._get_random_centroids(K);\n    if (init) this.init(K, this._cluster_centroids);\n    return this;\n  }\n  /**\r\n   * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \r\n   */\n\n\n  get_clusters() {\n    const K = this._K;\n    const clusters = this._clusters;\n    const result = new Array(K).fill().map(() => new Array());\n    clusters.forEach((c, i) => result[c].push(i));\n    return result;\n  }\n  /**\r\n   * @private\r\n   * @param {Array} points \r\n   * @param {Array} candidates \r\n   */\n\n\n  _furthest_point(points, candidates) {\n    const A = this._matrix;\n    const metric = this._metric;\n    let i = points.length;\n    let H = _datastructure_index__WEBPACK_IMPORTED_MODULE_2__.Heap.heapify(candidates, d => {\n      const Ad = A.row(d);\n      let sum = 0;\n\n      for (let j = 0; j < i; ++j) {\n        sum += metric(Ad, points[j]);\n      }\n\n      return sum;\n    }, \"max\");\n    return H.pop().element;\n  }\n\n  _get_random_centroids(K) {\n    const N = this._N;\n    const randomizer = this._randomizer;\n    const A = this._matrix;\n    const cluster_centroids = new Array(K).fill();\n    const indices = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_3__.linspace)(0, N - 1);\n    const random_point = randomizer.random_int % (N - 1);\n    cluster_centroids[0] = A.row(random_point);\n    const init_points = [random_point];\n    const sample_size = Math.floor((N - K) / K); // / K\n\n    for (let i = 1; i < K; ++i) {\n      // sampling + kmeans++ improvement?\n      const sample = randomizer.choice(indices.filter(d => init_points.indexOf(d) == -1), sample_size);\n\n      const furthest_point = this._furthest_point(cluster_centroids.slice(0, i), sample);\n\n      init_points.push(furthest_point);\n      cluster_centroids[i] = A.row(furthest_point);\n    }\n\n    return cluster_centroids;\n  }\n\n  _iteration(cluster_centroids) {\n    const K = cluster_centroids.length;\n    const N = this._N;\n    const D = this._D;\n    const A = this._matrix;\n    const metric = this._metric;\n    const clusters = this._clusters;\n    let clusters_changed = false; // find nearest cluster centroid.\n\n    for (let i = 0; i < N; ++i) {\n      const Ai = A.row(i);\n      let min_dist = Infinity;\n      let min_cluster = null;\n\n      for (let j = 0; j < K; ++j) {\n        let d = metric(cluster_centroids[j], Ai);\n\n        if (d < min_dist) {\n          min_dist = d;\n          min_cluster = j;\n        }\n      }\n\n      if (clusters[i] !== min_cluster) {\n        clusters_changed = true;\n      }\n\n      clusters[i] = min_cluster;\n    } // update cluster centroid\n    // reset cluster centroids to 0\n\n\n    for (let i = 0; i < K; ++i) {\n      const centroid = cluster_centroids[i];\n\n      for (let j = 0; j < D; ++j) {\n        centroid[j] = 0;\n      }\n    } // compute centroid\n\n\n    this._compute_centroid(cluster_centroids);\n\n    return {\n      \"clusters_changed\": clusters_changed,\n      \"cluster_centroids\": cluster_centroids\n    };\n  }\n\n  _compute_centroid(cluster_centroids) {\n    const K = cluster_centroids.length;\n    const N = this._N;\n    const D = this._D;\n    const A = this._matrix;\n    const clusters = this._clusters;\n    const cluster_counter = new Array(K).fill(0);\n\n    for (let i = 0; i < N; ++i) {\n      const Ai = A.row(i);\n      const ci = clusters[i];\n      cluster_counter[ci]++;\n      const centroid = cluster_centroids[ci];\n\n      for (let j = 0; j < D; ++j) {\n        centroid[j] += Ai[j];\n      }\n    }\n\n    for (let i = 0; i < K; ++i) {\n      const n = cluster_counter[i];\n      cluster_centroids[i] = cluster_centroids[i].map(c => c / n);\n    }\n  }\n  /**\r\n   * Computes {@link K} clusters out of the {@link matrix}.\r\n   * @param {Number} K - number of clusters.\r\n   */\n\n\n  init(K, cluster_centroids) {\n    if (!K) K = this._K;\n    if (!cluster_centroids) cluster_centroids = this._get_random_centroids(K);\n    let clusters_changed = false;\n\n    do {\n      const iteration_result = this._iteration(cluster_centroids);\n\n      cluster_centroids = iteration_result.cluster_centroids;\n      clusters_changed = iteration_result.clusters_changed;\n    } while (clusters_changed);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./clustering/KMeans.js\n");

/***/ }),

/***/ "./clustering/KMedoids.js":
/*!********************************!*\
  !*** ./clustering/KMedoids.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"KMedoids\": () => (/* binding */ KMedoids)\n/* harmony export */ });\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _util_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/index */ \"./util/index.js\");\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n\n\n\n/**\r\n * @class\r\n * @alias KMedoids\r\n */\n\nclass KMedoids {\n  /**\r\n   * @constructor\r\n   * @memberof module:clustering\r\n   * @alias KMedoids\r\n   * @todo needs restructuring. \r\n   * @param {Matrix} matrix - data matrix\r\n   * @param {Numbers} K - number of clusters\r\n   * @param {number} [max_iter=null] - maximum number of iterations. Default is 10 * Math.log10(N)\r\n   * @param {Function} [metric = euclidean] - metric defining the dissimilarity \r\n   * @param {Number} [seed = 1212] - seed value for random number generator\r\n   * @returns {KMedoids}\r\n   * @see {@link https://link.springer.com/chapter/10.1007/978-3-030-32047-8_16} Faster k-Medoids Clustering: Improving the PAM, CLARA, and CLARANS Algorithms\r\n   */\n  constructor(matrix, K, max_iter = null, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_0__.euclidean, seed = 1212) {\n    this._metric = metric;\n    this._matrix = matrix;\n    this._A = this._matrix.to2dArray;\n    this._K = K;\n    const [N, D] = matrix.shape;\n    this._N = N;\n    this._D = D;\n    this._max_iter = max_iter || 10 * Math.log10(N);\n    this._distance_matrix = new _matrix_index__WEBPACK_IMPORTED_MODULE_2__.Matrix(N, N, \"zeros\");\n    /* for (let i = 1; i < N; ++i) {\r\n        for (let j = i + 1; j < N; ++j) {\r\n            let dist = metric(this._A[i], this._A[j]);\r\n            this._distance_matrix.set_entry(i, j, dist);\r\n            this._distance_matrix.set_entry(j, i, dist)\r\n        }\r\n    } */\n\n    if (K > N) K = N;\n    this._randomizer = new _util_index__WEBPACK_IMPORTED_MODULE_1__.Randomizer(seed);\n    this._clusters = new Array(N).fill(undefined);\n    this._cluster_medoids = this._get_random_medoids(K); //if (init) this.init(K, this._cluster_medoids);\n\n    this._is_initialized = false;\n    return this;\n  }\n  /**\r\n   * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \r\n   */\n\n\n  get_clusters() {\n    const K = this._K;\n    const A = this._A;\n\n    if (!this._is_initialized) {\n      this.init(K, this._cluster_medoids);\n    }\n\n    const result = new Array(K).fill().map(() => new Array());\n    A.forEach((x_j, j) => {\n      result[this._nearest_medoid(x_j, j).index_nearest].push(j);\n    });\n    result.medoids = this._cluster_medoids;\n    return result;\n  }\n\n  async *generator() {\n    const max_iter = this._max_iter;\n    yield this.get_clusters();\n    let finish = false;\n    let i = 0;\n\n    do {\n      finish = this._iteration();\n      yield this.get_clusters();\n    } while (!finish && ++i < max_iter);\n  }\n  /**\r\n   * Algorithm 1. FastPAM1: Improved SWAP algorithm\r\n   */\n\n  /* _iteration_1() {\r\n      const A = this._A;\r\n      const N = this._N;\r\n      const K = this._K;\r\n      const medoids = this._cluster_medoids;\r\n      let DeltaTD = 0;\r\n      let m0 = null;\r\n      let x0 = null;\r\n      A.forEach((x_j, j) => {\r\n          if (medoids.findIndex(m => m === j) < 0) {\r\n              const nearest_medoid = this._nearest_medoid(x_j, j);\r\n              const d_j = nearest_medoid.distance_nearest; // distance to current medoid\r\n              const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\r\n              A.forEach((x_o, o) => {\r\n                  // disance to new medoid\r\n                  const d_oj = this._get_distance(o, j, x_o, x_j);\r\n                  const {\r\n                      \"index_nearest\": n,\r\n                      \"distance_nearest\": d_n,\r\n                      \"distance_second\": d_s,\r\n                  } = this._nearest_medoid(x_o, o); \r\n                  this._clusters[o] = n; // cached values\r\n                  deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change\r\n                  if (d_oj < d_n) { // reassignment check\r\n                      deltaTD.forEach((d_i, i) => {\r\n                          if (n !== i) {\r\n                              deltaTD[i] = d_i + d_oj - d_n; // update loss change\r\n                          }\r\n                      });\r\n                  }\r\n              });\r\n              // choose best medoid i;\r\n              const i = deltaTD\r\n                  .map((d, i) => [d, i])\r\n                  .sort((d1, d2) => d1[0] - d2[0])[0][1];\r\n              const deltaTD_i = deltaTD[i];\r\n              // store\r\n              if (deltaTD_i < DeltaTD) {\r\n                  DeltaTD = deltaTD_i;\r\n                  m0 = i;\r\n                  x0 = j;\r\n              }\r\n          }\r\n      });\r\n        if (DeltaTD >= 0) {\r\n          return true // break loop if DeltaTD >= 0\r\n      }\r\n      // swap roles of medoid m and non-medoid x;\r\n      medoids[m0] = x0;\r\n      this._cluster_medoids = medoids;\r\n      return false\r\n  } */\n\n  /** Algorithm 2. FastPAM2: SWAP with multiple candidates\r\n   * \r\n   */\n\n\n  _iteration() {\n    const A = this._A;\n    const K = this._K;\n    const medoids = this._cluster_medoids;\n    const cache = A.map((x_o, o) => this._nearest_medoid(x_o, o)); // empty best candidates array\n\n    const DeltaTD = new Array(K).fill(0);\n    const xs = new Array(K).fill(null);\n    A.forEach((x_j, j) => {\n      if (medoids.findIndex(m => m === j) < 0) {\n        const d_j = cache[j].distance_nearest; // distance to current medoid\n\n        const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n\n        A.forEach((x_o, o) => {\n          if (j === o) return;\n\n          const d_oj = this._get_distance(o, j, x_o, x_j); // distance to new medoid\n\n\n          const {\n            \"index_nearest\": n,\n            \"distance_nearest\": d_n,\n            \"distance_second\": d_s\n          } = cache[o]; // cached\n\n          deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change for x_o\n          // Reassignment check\n\n          if (d_oj < d_n) {\n            // update loss change\n            for (let i = 0; i < K; ++i) {\n              if (i !== n) deltaTD[i] += d_oj - d_n;\n            }\n          }\n        }); // remember best swap for i;\n\n        deltaTD.map((d, i) => [d, i]).filter(([d, i]) => d < DeltaTD[i]).forEach(([d, i]) => {\n          if (d < DeltaTD[i]) {\n            DeltaTD[i] = d;\n            xs[i] = j;\n          }\n        });\n      }\n    }); // stop if no improvements were found\n\n    if (Math.min(...DeltaTD) >= 0) return true; // execute all improvements\n\n    while (Math.min(...DeltaTD) < 0) {\n      // swap roles of medoid m_i and non_medoid xs_i\n      const i = DeltaTD.map((d, i) => [d, i]).sort(([a], [b]) => a - b)[0][1];\n\n      if (medoids.filter(m => m == xs[i]).length == 0) {\n        medoids[i] = xs[i];\n      } // disable the swap just performed\n\n\n      DeltaTD[i] = 0; // recompute TD for remaining swap candidates\n\n      DeltaTD.map((d_j, j) => [d_j, j]).filter(([d_j]) => d_j < 0).forEach(([_, j]) => {\n        const x_j = A[j];\n        let sum = 0;\n        A.forEach((x_o, o) => {\n          if (medoids.findIndex(m => m != j && m == o) >= 0) return;\n          if (i == j) return;\n          if (cache[o].index_nearest === medoids[j]) sum += Math.min(this._get_distance(o, j, x_o, x_j), cache[o].distance_second) - cache[o].distance_nearest;else {\n            sum += Math.min(this._get_distance(o, j, x_o, x_j) - cache[o].distance_nearest, 0);\n          }\n        });\n        DeltaTD[j] = sum;\n      });\n    }\n\n    this._cluster_medoids = medoids;\n    return false;\n  }\n\n  _get_distance(i, j, x_i = null, x_j = null) {\n    if (i === j) return 0;\n    const D = this._distance_matrix;\n    const A = this._A;\n    const metric = this._metric;\n    let d_ij = D.entry(i, j);\n\n    if (d_ij === 0) {\n      d_ij = metric(x_i || A[i], x_j || A[j]);\n      D.set_entry(i, j, d_ij);\n      D.set_entry(j, i, d_ij);\n    }\n\n    return d_ij;\n  }\n\n  _nearest_medoid(x_j, j) {\n    const medoids = this._cluster_medoids;\n    const A = this._A;\n    const [nearest, second] = medoids.map((m, i) => {\n      const x_m = A[m];\n      return [this._get_distance(j, m, x_j, x_m), i];\n    }).sort((m1, m2) => m1[0] - m2[0]);\n    return {\n      \"distance_nearest\": nearest[0],\n      \"index_nearest\": nearest[1],\n      \"distance_second\": second[0],\n      \"index_second\": second[1]\n    };\n  }\n  /**\r\n   * Computes {@link K} clusters out of the {@link matrix}.\r\n   * @param {Number} K - number of clusters.\r\n   */\n\n\n  init(K, cluster_medoids) {\n    if (!K) K = this._K;\n    if (!cluster_medoids) cluster_medoids = this._get_random_medoids(K);\n    const max_iter = this._max_iter;\n    let finish = false;\n    let i = 0;\n\n    do {\n      finish = this._iteration();\n    } while (!finish && ++i < max_iter);\n\n    return this;\n  }\n  /**\r\n   * Algorithm 3. FastPAM LAB: Linear Approximate BUILD initialization.\r\n   * @param {number} K - number of clusters\r\n   * \r\n   */\n\n\n  _get_random_medoids(K) {\n    const N = this._N;\n    const A = this._A;\n    const indices = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_2__.linspace)(0, N - 1);\n    const randomizer = this._randomizer;\n    const n = Math.min(N, 10 + Math.ceil(Math.sqrt(N)));\n    const TD = new Array(n).fill(Infinity);\n    const medoids = []; // first medoid\n\n    let TD0 = Infinity;\n    let S = randomizer.choice(indices, n);\n\n    for (let j = 0; j < n; ++j) {\n      const S_j = S[j];\n      const x_j = A[S_j];\n\n      for (let o = 0; o < n; ++o) {\n        if (o === j) continue;\n        const x_o = A[S[o]];\n        TD[j] += this._get_distance(j, o, x_j, x_o);\n      }\n\n      if (TD[j] < TD0) {\n        TD0 = TD[j]; // smallest distance sum\n\n        medoids.push(S_j);\n      }\n    } // other medoids\n\n\n    for (let i = 1; i < K; ++i) {\n      let DeltaTD = Infinity;\n      S = randomizer.choice(indices.filter(index => medoids.findIndex(d => d === index) < 0), n);\n\n      for (let j = 0; j < n; ++j) {\n        let deltaTD = 0;\n        const S_j = S[j];\n        const x_j = A[S_j];\n\n        for (let o = 0; o < n; ++o) {\n          if (o === j) continue;\n          const S_o = S[o];\n          const x_o = A[S_o];\n          let delta = this._get_distance(S_j, S_o, x_j, x_o) - Math.min(...medoids.map(m => this._get_distance(S_o, m, x_o)));\n\n          if (delta < 0) {\n            deltaTD = deltaTD + delta;\n          }\n        } // best reduction\n\n\n        if (deltaTD < DeltaTD) {\n          DeltaTD = deltaTD;\n          medoids.push(S_j);\n        }\n      }\n\n      TD0 += DeltaTD;\n    }\n\n    return medoids.slice(0, K);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./clustering/KMedoids.js\n");

/***/ }),

/***/ "./clustering/OPTICS.js":
/*!******************************!*\
  !*** ./clustering/OPTICS.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OPTICS\": () => (/* binding */ OPTICS)\n/* harmony export */ });\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _datastructure_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../datastructure/index */ \"./datastructure/index.js\");\n\n\n/**\r\n * @class\r\n * @alias OPTICS\r\n */\n\nclass OPTICS {\n  /**\r\n   * **O**rdering **P**oints **T**o **I**dentify the **C**lustering **S**tructure.\r\n   * @constructor\r\n   * @memberof module:clustering\r\n   * @alias OPTICS\r\n   * @todo needs restructuring. \r\n   * @param {Matrix} matrix - the data.\r\n   * @param {Number} epsilon - the minimum distance which defines whether a point is a neighbor or not.\r\n   * @param {Number} min_points - the minimum number of points which a point needs to create a cluster. (Should be higher than 1, else each point creates a cluster.)\r\n   * @param {Function} [metric = euclidean] - the distance metric which defines the distance between two points of the {@link matrix}.\r\n   * @returns {OPTICS}\r\n   * @see {@link https://www.dbs.ifi.lmu.de/Publikationen/Papers/OPTICS.pdf}\r\n   * @see {@link https://en.wikipedia.org/wiki/OPTICS_algorithm}\r\n   */\n  constructor(matrix, epsilon, min_points, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_0__.euclidean) {\n    this._matrix = matrix;\n    this._epsilon = epsilon;\n    this._min_points = min_points;\n    this._metric = metric;\n    this._ordered_list = [];\n    this._clusters = [];\n    this._DB = new Array(matrix.shape[0]).fill();\n    this.init();\n    return this;\n  }\n  /**\r\n   * Computes the clustering.\r\n   */\n\n\n  init() {\n    const ordered_list = this._ordered_list;\n    const matrix = this._matrix;\n    const N = matrix.shape[0];\n    const DB = this._DB;\n    const clusters = this._clusters;\n    let cluster_index = this._cluster_index = 0;\n\n    for (let i = 0; i < N; ++i) {\n      DB[i] = {\n        \"element\": matrix.row(i),\n        \"index\": i,\n        \"reachability_distance\": undefined,\n        \"processed\": false\n      };\n    }\n\n    for (const p of DB) {\n      if (p.processed) continue;\n      p.neighbors = this._get_neighbors(p);\n      p.processed = true;\n      clusters.push([p.index]);\n      cluster_index = clusters.length - 1;\n      ordered_list.push(p);\n\n      if (this._core_distance(p) != undefined) {\n        const seeds = new _datastructure_index__WEBPACK_IMPORTED_MODULE_1__.Heap(null, d => d.reachability_distance, \"min\");\n\n        this._update(p, seeds);\n\n        this._expand_cluster(seeds, clusters[cluster_index]);\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * \r\n   * @private\r\n   * @param {Object} p - a point of {@link matrix}.\r\n   * @returns {Array} An array consisting of the {@link epsilon}-neighborhood of {@link p}.\r\n   */\n\n\n  _get_neighbors(p) {\n    if (\"neighbors\" in p) return p.neighbors;\n    const DB = this._DB;\n    const metric = this._metric;\n    const epsilon = this._epsilon;\n    const neighbors = [];\n\n    for (const q of DB) {\n      if (q.index == p.index) continue;\n\n      if (metric(p.element, q.element) < epsilon) {\n        neighbors.push(q);\n      }\n    }\n\n    return neighbors;\n  }\n  /**\r\n   * \r\n   * @private\r\n   * @param {Object} p - a point of {@link matrix}.\r\n   * @returns {Number} The distance to the {@link min_points}-th nearest point of {@link p}, or undefined if the {@link epsilon}-neighborhood has fewer elements than {@link min_points}.\r\n   */\n\n\n  _core_distance(p) {\n    const min_points = this._min_points;\n    const metric = this._metric;\n\n    if (p.neighbors && p.neighbors.length <= min_points) {\n      return undefined;\n    }\n\n    return metric(p.element, p.neighbors[min_points].element);\n  }\n  /**\r\n   * Updates the reachability distance of the points.\r\n   * @private\r\n   * @param {Object} p \r\n   * @param {Heap} seeds \r\n   */\n\n\n  _update(p, seeds) {\n    const metric = this._metric;\n\n    const core_distance = this._core_distance(p);\n\n    const neighbors = this._get_neighbors(p); //p.neighbors;\n\n\n    for (const q of neighbors) {\n      if (q.processed) continue;\n      const new_reachability_distance = Math.max(core_distance, metric(p.element, q.element)); //if (q.reachability_distance == undefined) { // q is not in seeds\n\n      if (seeds.raw_data().findIndex(d => d.element == q) < 0) {\n        q.reachability_distance = new_reachability_distance;\n        seeds.push(q);\n      } else {\n        // q is in seeds\n        if (new_reachability_distance < q.reachability_distance) {\n          q.reachability_distance = new_reachability_distance;\n          seeds = _datastructure_index__WEBPACK_IMPORTED_MODULE_1__.Heap.heapify(seeds.data(), d => d.reachability_distance, \"min\"); // seeds change key =/\n        }\n      }\n    }\n  }\n  /**\r\n   * Expands the {@link cluster} with points in {@link seeds}.\r\n   * @private\r\n   * @param {Heap} seeds \r\n   * @param {Array} cluster \r\n   */\n\n\n  _expand_cluster(seeds, cluster) {\n    const ordered_list = this._ordered_list;\n\n    while (!seeds.empty) {\n      const q = seeds.pop().element;\n      q.neighbors = this._get_neighbors(q);\n      q.processed = true;\n      cluster.push(q.index);\n      ordered_list.push(q);\n\n      if (this._core_distance(q) != undefined) {\n        this._update(q, seeds);\n\n        this._expand_cluster(seeds, cluster);\n      }\n    }\n  }\n  /**\r\n   * Returns an array of clusters.\r\n   * @returns {Array<Array>} Array of clusters with the indices of the rows in given {@link matrix}.\r\n   */\n\n\n  get_clusters() {\n    const clusters = [];\n    const outliers = [];\n    const min_points = this._min_points;\n\n    for (const cluster of this._clusters) {\n      if (cluster.length < min_points) {\n        outliers.push(...cluster);\n      } else {\n        clusters.push(cluster);\n      }\n    }\n\n    clusters.push(outliers);\n    return clusters;\n  }\n  /**\r\n   * @returns {Array} Returns an array, where the ith entry defines the cluster affirmation of the ith point of {@link matrix}. (-1 stands for outlier)\r\n   */\n\n\n  get_cluster_affirmation() {\n    const N = this._matrix.shape[0];\n    const result = new Array(N).fill();\n    const clusters = this.get_clusters();\n\n    for (let i = 0, n = clusters.length; i < n; ++i) {\n      const cluster = clusters[i];\n\n      for (const index of cluster) {\n        result[index] = i < n - 1 ? i : -1;\n      }\n    }\n\n    return result;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./clustering/OPTICS.js\n");

/***/ }),

/***/ "./clustering/index.js":
/*!*****************************!*\
  !*** ./clustering/index.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Hierarchical_Clustering\": () => (/* reexport safe */ _Hierarchical_Clustering__WEBPACK_IMPORTED_MODULE_0__.Hierarchical_Clustering),\n/* harmony export */   \"KMeans\": () => (/* reexport safe */ _KMeans__WEBPACK_IMPORTED_MODULE_1__.KMeans),\n/* harmony export */   \"KMedoids\": () => (/* reexport safe */ _KMedoids__WEBPACK_IMPORTED_MODULE_2__.KMedoids),\n/* harmony export */   \"OPTICS\": () => (/* reexport safe */ _OPTICS__WEBPACK_IMPORTED_MODULE_3__.OPTICS)\n/* harmony export */ });\n/* harmony import */ var _Hierarchical_Clustering__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hierarchical_Clustering */ \"./clustering/Hierarchical_Clustering.js\");\n/* harmony import */ var _KMeans__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./KMeans */ \"./clustering/KMeans.js\");\n/* harmony import */ var _KMedoids__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./KMedoids */ \"./clustering/KMedoids.js\");\n/* harmony import */ var _OPTICS__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./OPTICS */ \"./clustering/OPTICS.js\");\n/**\r\n * @module clustering\r\n */\n\n\n //export { XMeans } from \"./XMeans\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL2NsdXN0ZXJpbmcvaW5kZXguanM/ODNmZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FFQSIsImZpbGUiOiIuL2NsdXN0ZXJpbmcvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG1vZHVsZSBjbHVzdGVyaW5nXHJcbiAqL1xyXG5leHBvcnQgeyBIaWVyYXJjaGljYWxfQ2x1c3RlcmluZyB9IGZyb20gXCIuL0hpZXJhcmNoaWNhbF9DbHVzdGVyaW5nXCI7XHJcbmV4cG9ydCB7IEtNZWFucyB9IGZyb20gXCIuL0tNZWFuc1wiO1xyXG5leHBvcnQgeyBLTWVkb2lkcyB9IGZyb20gXCIuL0tNZWRvaWRzXCI7XHJcbi8vZXhwb3J0IHsgWE1lYW5zIH0gZnJvbSBcIi4vWE1lYW5zXCI7XHJcbmV4cG9ydCB7IE9QVElDUyB9IGZyb20gXCIuL09QVElDU1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./clustering/index.js\n");

/***/ }),

/***/ "./datastructure/Heap.js":
/*!*******************************!*\
  !*** ./datastructure/Heap.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Heap\": () => (/* binding */ Heap)\n/* harmony export */ });\n/**\r\n * @class\r\n * @alias Heap\r\n */\nclass Heap {\n  /**\r\n   * A heap is a datastructure holding its elements in a specific way, so that the top element would be the first entry of an ordered list.\r\n   * @constructor\r\n   * @memberof module:datastructure\r\n   * @alias Heap\r\n   * @param {Array=} elements - Contains the elements for the Heap. {@link elements} can be null.\r\n   * @param {Function} [accessor = (d) => d] - Function returns the value of the element.\r\n   * @param {(\"min\"|\"max\"|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\r\n   * @returns {Heap}\r\n   * @see {@link https://en.wikipedia.org/wiki/Binary_heap}\r\n   */\n  constructor(elements = null, accessor = d => d, comparator = \"min\") {\n    if (elements) {\n      return Heap.heapify(elements, accessor, comparator);\n    } else {\n      this._accessor = accessor;\n      this._container = [];\n\n      if (comparator == \"min\") {\n        this._comparator = (a, b) => a < b;\n      } else if (comparator == \"max\") {\n        this._comparator = (a, b) => a > b;\n      } else {\n        this._comparator = comparator;\n      }\n\n      return this;\n    }\n  }\n  /**\r\n   * Creates a Heap from an Array\r\n   * @param {Array|Set} elements - Contains the elements for the Heap.\r\n   * @param {Function=} [accessor = (d) => d] - Function returns the value of the element.\r\n   * @param {(String=|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\r\n   * @returns {Heap}\r\n   */\n\n\n  static heapify(elements, accessor = d => d, comparator = \"min\") {\n    const heap = new Heap(null, accessor, comparator);\n    const container = heap._container;\n\n    for (const e of elements) {\n      container.push({\n        \"element\": e,\n        \"value\": accessor(e)\n      });\n    }\n\n    for (let i = Math.floor(elements.length / 2 - 1); i >= 0; --i) {\n      heap._heapify_down(i);\n    }\n\n    return heap;\n  }\n  /**\r\n   * Swaps elements of container array.\r\n   * @private\r\n   * @param {Number} index_a \r\n   * @param {Number} index_b \r\n   */\n\n\n  _swap(index_a, index_b) {\n    const container = this._container;\n    [container[index_b], container[index_a]] = [container[index_a], container[index_b]];\n    return;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _heapify_up() {\n    const container = this._container;\n    let index = container.length - 1;\n\n    while (index > 0) {\n      let parentIndex = Math.floor((index - 1) / 2);\n\n      if (!this._comparator(container[index].value, container[parentIndex].value)) {\n        break;\n      } else {\n        this._swap(parentIndex, index);\n\n        index = parentIndex;\n      }\n    }\n  }\n  /**\r\n   * Pushes the element to the heap.\r\n   * @param {} element\r\n   * @returns {Heap}\r\n   */\n\n\n  push(element) {\n    const value = this._accessor(element); //const node = new Node(element, value);\n\n\n    const node = {\n      \"element\": element,\n      \"value\": value\n    };\n\n    this._container.push(node);\n\n    this._heapify_up();\n\n    return this;\n  }\n  /**\r\n   * @private\r\n   * @param {Number} [start_index = 0] \r\n   */\n\n\n  _heapify_down(start_index = 0) {\n    const container = this._container;\n    const comparator = this._comparator;\n    const length = container.length;\n    let left = 2 * start_index + 1;\n    let right = 2 * start_index + 2;\n    let index = start_index;\n    if (index > length) throw \"index higher than length\";\n\n    if (left < length && comparator(container[left].value, container[index].value)) {\n      index = left;\n    }\n\n    if (right < length && comparator(container[right].value, container[index].value)) {\n      index = right;\n    }\n\n    if (index !== start_index) {\n      this._swap(start_index, index);\n\n      this._heapify_down(index);\n    }\n  }\n  /**\r\n   * Removes and returns the top entry of the heap.\r\n   * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\r\n   */\n\n\n  pop() {\n    const container = this._container;\n\n    if (container.length === 0) {\n      return null;\n    } else if (container.length === 1) {\n      return container.pop();\n    }\n\n    this._swap(0, container.length - 1);\n\n    const item = container.pop();\n\n    this._heapify_down();\n\n    return item;\n  }\n  /**\r\n   * Returns the top entry of the heap without removing it.\r\n   * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\r\n   */\n\n\n  get first() {\n    return this._container.length > 0 ? this._container[0] : null;\n  }\n  /**\r\n   * Yields the raw data\r\n   * @yields {Object} Object consists of the element and its value (computed by {@link accessor}).\r\n   */\n\n\n  *iterate() {\n    for (let i = 0, n = this._container.length; i < n; ++i) {\n      yield this._container[i].element;\n    }\n  }\n  /**\r\n   * Returns the heap as ordered array.\r\n   * @returns {Array} Array consisting the elements ordered by {@link comparator}.\r\n   */\n\n\n  toArray() {\n    return this.data().sort((a, b) => this._comparator(a, b) ? -1 : 0);\n  }\n  /**\r\n   * Returns elements of container array.\r\n   * @returns {Array} Array consisting the elements.\r\n   */\n\n\n  data() {\n    return this._container.map(d => d.element);\n  }\n  /**\r\n   * Returns the container array.\r\n   * @returns {Array} The container array.\r\n   */\n\n\n  raw_data() {\n    return this._container;\n  }\n  /**\r\n   * The size of the heap.\r\n   * @returns {Number}\r\n   */\n\n\n  get length() {\n    return this._container.length;\n  }\n  /**\r\n   * Returns false if the the heap has entries, true if the heap has no entries.\r\n   * @returns {Boolean}\r\n   */\n\n\n  get empty() {\n    return this.length === 0;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./datastructure/Heap.js\n");

/***/ }),

/***/ "./datastructure/index.js":
/*!********************************!*\
  !*** ./datastructure/index.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Heap\": () => (/* reexport safe */ _Heap__WEBPACK_IMPORTED_MODULE_0__.Heap)\n/* harmony export */ });\n/* harmony import */ var _Heap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Heap */ \"./datastructure/Heap.js\");\n/**\r\n * @module datastructure\r\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL2RhdGFzdHJ1Y3R1cmUvaW5kZXguanM/NmM4OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL2RhdGFzdHJ1Y3R1cmUvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG1vZHVsZSBkYXRhc3RydWN0dXJlXHJcbiAqL1xyXG5leHBvcnQgeyBIZWFwIH0gZnJvbSAnLi9IZWFwJyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./datastructure/index.js\n");

/***/ }),

/***/ "./dimred/DR.js":
/*!**********************!*\
  !*** ./dimred/DR.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DR\": () => (/* binding */ DR)\n/* harmony export */ });\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _util_randomizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/randomizer */ \"./util/randomizer.js\");\n\n\n\n/**\r\n * @class\r\n * @alias DR\r\n */\n\nclass DR {\n  //static parameter_list = [];\n  get parameter_list() {\n    return this._parameter_list;\n  }\n\n  set parameter_list(list) {\n    this._parameter_list = list;\n    return this;\n  }\n  /**\r\n   * \r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias DR\r\n   * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data. \r\n   * @param {number} [d = 2] - the dimensionality of the projection.\r\n   * @param {function} [metric = euclidean] - the metric which defines the distance between two points.  \r\n   * @param {seed} [seed=1987] - the seed value for the random number generator.\r\n   * @returns {DR}\r\n   */\n\n\n  constructor(X, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_0__.euclidean, seed = 1212) {\n    if (Array.isArray(X)) {\n      this._type = \"array\";\n      this.X = _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix.from(X);\n    } else if (X instanceof _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix) {\n      this._type = \"matrix\";\n      this.X = X;\n    } else {\n      throw \"no valid type for X\";\n    }\n\n    [this._N, this._D] = this.X.shape;\n    this._d = d;\n    this._metric = metric;\n    this._seed = seed;\n    this._randomizer = new _util_randomizer__WEBPACK_IMPORTED_MODULE_2__.Randomizer(seed);\n    this._is_initialized = false;\n    return this;\n  }\n  /**\r\n   * Set and get parameters\r\n   * @param {String} name - name of the parameter.\r\n   * @param {Number} [value = null] - value of the parameter to set, if null then return actual parameter value.\r\n   */\n\n\n  parameter(name, value = null) {\n    if (this.parameter_list.findIndex(parameter => parameter === name) === -1) {\n      throw `${name} is not a valid parameter!`;\n    }\n\n    if (value) {\n      this[`_${name}`] = value;\n      return this;\n    } else {\n      return this[`_${name}`];\n    }\n  }\n  /**\r\n   * Alias for 'parameter'.\r\n   * @param {String} name \r\n   * @param {Number} value \r\n   */\n\n\n  para(name, value = null) {\n    return this.parameter(name, value);\n  }\n  /**\r\n   * Alias for 'parameter'.\r\n   * @param {String} name \r\n   * @param {Number} value \r\n   */\n\n\n  p(name, value = null) {\n    return this.parameter(name, value);\n  }\n  /**\r\n   * Computes the projection.\r\n   * @returns {Matrix} Returns the projection.\r\n   */\n\n\n  transform() {\n    this.check_init();\n    return this.Y;\n  }\n\n  generator() {\n    return this.transform();\n  }\n\n  check_init() {\n    if (!this._is_initialized && typeof this.init === \"function\") {\n      this.init();\n      this._is_initialized = true;\n    }\n  }\n  /**\r\n   * @returns {Matrix} Returns the projection.\r\n   */\n\n\n  get projection() {\n    return this._type === \"matrix\" ? this.Y : this.Y.to2dArray;\n  }\n\n  async transform_async() {\n    return this.transform();\n  }\n\n  static transform(...args) {\n    let dr = new this(...args);\n    return dr.transform();\n  }\n\n  static async transform_async(...args) {\n    return this.transform(...args);\n  }\n\n  static *generator(...args) {\n    const dr = new this(...args);\n    const gen = dr.generator();\n\n    for (const res of gen) {\n      yield res;\n    }\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dimred/DR.js\n");

/***/ }),

/***/ "./dimred/FASTMAP.js":
/*!***************************!*\
  !*** ./dimred/FASTMAP.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FASTMAP\": () => (/* binding */ FASTMAP)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n\n\n\n/**\r\n * @class\r\n * @alias FASTMAP\r\n */\n\nclass FASTMAP extends _DR_js__WEBPACK_IMPORTED_MODULE_2__.DR {\n  /**\r\n   * FastMap: a fast algorithm for indexing, data-mining and visualization of traditional and multimedia datasets\r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias FASTMAP\r\n   * @param {Matrix} X - the high-dimensional data. \r\n   * @param {Number} [d = 2] - the dimensionality of the projection.\r\n   * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.  \r\n   * @param {Number} [seed = 1212] - the dimensionality of the projection.\r\n   * @returns {FASTMAP}\r\n   * @see {@link https://doi.org/10.1145/223784.223812}\r\n   */\n  constructor(X, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n    return this;\n  }\n  /**\r\n   * Chooses two points which are the most distant in the actual projection.\r\n   * @private\r\n   * @param {function} dist \r\n   * @returns {Array} An array consisting of first index, second index, and distance between the two points.\r\n   */\n\n\n  _choose_distant_objects(dist) {\n    const X = this.X;\n    const N = X.shape[0];\n    let a_index = this._randomizer.random_int % N - 1;\n    let b_index = null;\n    let max_dist = -Infinity;\n\n    for (let i = 0; i < N; ++i) {\n      const d_ai = dist(a_index, i);\n\n      if (d_ai > max_dist) {\n        max_dist = d_ai;\n        b_index = i;\n      }\n    }\n\n    max_dist = -Infinity;\n\n    for (let i = 0; i < N; ++i) {\n      const d_bi = dist(b_index, i);\n\n      if (d_bi > max_dist) {\n        max_dist = d_bi;\n        a_index = i;\n      }\n    }\n\n    return [a_index, b_index, max_dist];\n  }\n  /**\r\n   * Computes the projection.\r\n   * @returns {Matrix} The {@link d}-dimensional projection of the data matrix {@link X}.\r\n   */\n\n\n  transform() {\n    const X = this.X;\n    const N = X.shape[0];\n    const d = this._d;\n    const metric = this._metric;\n    const Y = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, d, 0);\n\n    let dist = (a, b) => metric(X.row(a), X.row(b));\n\n    for (let _col = 0; _col < d; ++_col) {\n      let old_dist = dist; // choose pivot objects\n\n      const [a_index, b_index, d_ab] = this._choose_distant_objects(dist); // record id of pivot objects\n      //PA[0].push(a_index);\n      //PA[1].push(b_index);\n\n      /* if (d_ab === 0) {\r\n          // because all inter-object distances are zeros\r\n          for (let i = 0; i < N; ++i) {\r\n              Y.set_entry(i, _col, 0);\r\n          }\r\n      } else { */\n\n\n      if (d_ab !== 0) {\n        // project the objects on the line (O_a, O_b)\n        for (let i = 0; i < N; ++i) {\n          const d_ai = dist(a_index, i);\n          const d_bi = dist(b_index, i);\n          const y_i = (d_ai ** 2 + d_ab ** 2 - d_bi ** 2) / (2 * d_ab);\n          Y.set_entry(i, _col, y_i);\n        } // consider the projections of the objects on a\n        // hyperplane perpendicluar to the line (a, b);\n        // the distance function D'() between two \n        // projections is given by Eq.4\n\n\n        dist = (a, b) => Math.sqrt(old_dist(a, b) ** 2 - (Y.entry(a, _col) - Y.entry(b, _col)) ** 2);\n      }\n    } // return embedding\n\n\n    this.Y = Y;\n    return this.projection;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dimred/FASTMAP.js\n");

/***/ }),

/***/ "./dimred/ISOMAP.js":
/*!**************************!*\
  !*** ./dimred/ISOMAP.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ISOMAP\": () => (/* binding */ ISOMAP)\n/* harmony export */ });\n/* harmony import */ var _linear_algebra_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../linear_algebra/index */ \"./linear_algebra/index.js\");\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _datastructure_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../datastructure/index */ \"./datastructure/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n\n\n\n\n\n/**\r\n * @class\r\n * @alias ISOMAP\r\n */\n\nclass ISOMAP extends _DR_js__WEBPACK_IMPORTED_MODULE_4__.DR {\n  /**\r\n   * \r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias ISOMAP\r\n   * @param {Matrix} X - the high-dimensional data. \r\n   * @param {Number} neighbors - the number of neighbors {@link ISOMAP} should use to project the data.\r\n   * @param {Number} [d = 2] - the dimensionality of the projection. \r\n   * @param {Function} [metric = euclidean] - the metric which defines the distance between two points. \r\n   * @param {Number} [seed = 1212] - the dimensionality of the projection.\r\n   */\n  constructor(X, neighbors, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_2__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n    super.parameter_list = [\"k\"];\n    this.parameter(\"k\", Math.min(neighbors ?? Math.max(Math.floor(this.X.shape[0] / 10), 2), this._N - 1));\n    return this;\n  }\n  /**\r\n   * Computes the projection.\r\n   * @returns {Matrix} Returns the projection.\r\n   */\n\n\n  transform() {\n    this.check_init();\n    const X = this.X;\n    const rows = this._N;\n    const metric = this._metric; // TODO: make knn extern and parameter for constructor or transform?\n\n    const D = new _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix();\n    D.shape = [rows, rows, (i, j) => i <= j ? metric(X.row(i), X.row(j)) : D.entry(j, i)];\n    const kNearestNeighbors = [];\n\n    for (let i = 0; i < rows; ++i) {\n      const row = [];\n\n      for (let j = 0; j < rows; ++j) {\n        row.push({\n          \"index\": j,\n          \"distance\": D.entry(i, j)\n        });\n      }\n\n      const H = new _datastructure_index__WEBPACK_IMPORTED_MODULE_3__.Heap(row, d => d.distance, \"min\");\n      kNearestNeighbors.push(H.toArray().slice(1, this._k + 1));\n    }\n    /*D = dijkstra(kNearestNeighbors);*/\n    // compute shortest paths\n    // TODO: make extern\n\n    /** @see {@link https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm} */\n\n\n    const G = new _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix(rows, rows, (i, j) => {\n      const other = kNearestNeighbors[i].find(n => n.index === j);\n      return other ? other.distance : Infinity;\n    });\n\n    for (let i = 0; i < rows; ++i) {\n      for (let j = 0; j < rows; ++j) {\n        for (let k = 0; k < rows; ++k) {\n          G.set_entry(i, j, Math.min(G.entry(i, j), G.entry(i, k) + G.entry(k, j)));\n        }\n      }\n    }\n\n    let ai_ = new Float64Array(rows);\n    let a_j = new Float64Array(rows);\n    let a__ = 0;\n    let A = new _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix(rows, rows, (i, j) => {\n      let val = G.entry(i, j);\n      val = val === Infinity ? 0 : val;\n      ai_[i] += val;\n      a_j[j] += val;\n      a__ += val;\n      return val;\n    });\n    ai_ = ai_.map(v => v / rows);\n    a_j = a_j.map(v => v / rows);\n    a__ /= rows ** 2;\n    const B = new _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__); // compute d eigenvectors\n\n    const {\n      eigenvectors: V\n    } = (0,_linear_algebra_index__WEBPACK_IMPORTED_MODULE_0__.simultaneous_poweriteration)(B, this._d);\n    this.Y = _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix.from(V).transpose(); // return embedding\n\n    return this.projection;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dimred/ISOMAP.js\n");

/***/ }),

/***/ "./dimred/LDA.js":
/*!***********************!*\
  !*** ./dimred/LDA.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LDA\": () => (/* binding */ LDA)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _linear_algebra_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../linear_algebra/index */ \"./linear_algebra/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n\n\n\n\n/**\r\n * @class\r\n * @alias LDA\r\n */\n\nclass LDA extends _DR_js__WEBPACK_IMPORTED_MODULE_3__.DR {\n  /**\r\n   * \r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias LDA\r\n   * @param {Matrix} X - the high-dimensional data.\r\n   * @param {Array} labels - the label / class of each data point.\r\n   * @param {number} [d = 2] - the dimensionality of the projection.\r\n   * @param {function} [metric = euclidean] - the metric which defines the distance between two points.  \r\n   * @param {Number} [seed = 1212] - the dimensionality of the projection.\r\n   */\n  constructor(X, labels, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n    super.parameter_list = [\"labels\"];\n    this.parameter(\"labels\", labels);\n    return this;\n  }\n  /**\r\n   * Transforms the inputdata {@link X} to dimenionality {@link d}.\r\n   */\n\n\n  transform() {\n    let X = this.X;\n    let [rows, cols] = X.shape;\n    let labels = this._labels;\n    let unique_labels = {};\n    let label_id = 0;\n    labels.forEach((l, i) => {\n      if (l in unique_labels) {\n        unique_labels[l].count++;\n        unique_labels[l].rows.push(X.row(i));\n      } else {\n        unique_labels[l] = {\n          \"id\": label_id++,\n          \"count\": 1,\n          \"rows\": [X.row(i)]\n        };\n      }\n    }); // create X_mean and vector means;\n\n    let X_mean = X.mean;\n    let V_mean = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(label_id, cols);\n\n    for (let label in unique_labels) {\n      let V = _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix.from(unique_labels[label].rows);\n      let v_mean = V.meanCols;\n\n      for (let j = 0; j < cols; ++j) {\n        V_mean.set_entry(unique_labels[label].id, j, v_mean[j]);\n      }\n    } // scatter_between\n\n\n    let S_b = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(cols, cols);\n\n    for (let label in unique_labels) {\n      let v = V_mean.row(unique_labels[label].id);\n      let m = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(cols, 1, j => v[j] - X_mean);\n      let N = unique_labels[label].count;\n      S_b = S_b.add(m.dot(m.transpose()).mult(N));\n    } // scatter_within\n\n\n    let S_w = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(cols, cols);\n\n    for (let label in unique_labels) {\n      let v = V_mean.row(unique_labels[label].id);\n      let m = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(cols, 1, j => v[j]);\n      let R = unique_labels[label].rows;\n\n      for (let i = 0, n = unique_labels[label].count; i < n; ++i) {\n        let row_v = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(cols, 1, (j, _) => R[i][j] - m.entry(j, 0));\n        S_w = S_w.add(row_v.dot(row_v.transpose()));\n      }\n    }\n\n    let {\n      eigenvectors: V\n    } = (0,_linear_algebra_index__WEBPACK_IMPORTED_MODULE_2__.simultaneous_poweriteration)(S_w.inverse().dot(S_b), this._d);\n    V = _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix.from(V).transpose();\n    this.Y = X.dot(V); // return embedding\n\n    return this.projection;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dimred/LDA.js\n");

/***/ }),

/***/ "./dimred/LLE.js":
/*!***********************!*\
  !*** ./dimred/LLE.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LLE\": () => (/* binding */ LLE)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _linear_algebra_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../linear_algebra/index */ \"./linear_algebra/index.js\");\n/* harmony import */ var _numerical_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../numerical/index */ \"./numerical/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n\n\n\n\n\n\n/**\r\n * @class\r\n * @alias LLE\r\n */\n\nclass LLE extends _DR_js__WEBPACK_IMPORTED_MODULE_4__.DR {\n  /**\r\n   * \r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias LLE\r\n   * @param {Matrix} X - the high-dimensional data.\r\n   * @param {Number} neighbors - the label / class of each data point.\r\n   * @param {Number} [d = 2] - the dimensionality of the projection.\r\n   * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.  \r\n   * @param {Number} [seed = 1212] - the dimensionality of the projection.\r\n   */\n  constructor(X, neighbors, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n    super.parameter_list = [\"k\"];\n    this.parameter(\"k\", Math.min(neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n    return this;\n  }\n  /**\r\n   * Transforms the inputdata {@link X} to dimenionality {@link d}.\r\n   */\n\n\n  transform() {\n    const X = this.X;\n    const d = this._d;\n    const rows = this._N;\n    const cols = this._D;\n    const k = this.parameter(\"k\");\n    const nN = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.k_nearest_neighbors)(X, k, null, this._metric);\n    const O = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(k, 1, 1);\n    const W = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(rows, rows);\n\n    for (let row = 0; row < rows; ++row) {\n      const nN_row = nN[row];\n      const Z = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(k, cols, (i, j) => X.entry(nN_row[i].j, j) - X.entry(row, j));\n      const C = Z.dot(Z.T);\n\n      if (k > cols) {\n        const C_trace = (0,_numerical_index__WEBPACK_IMPORTED_MODULE_3__.neumair_sum)(C.diag) / 1000;\n\n        for (let j = 0; j < k; ++j) {\n          C.set_entry(j, j, C.entry(j, j) + C_trace);\n        }\n      } // reconstruct;\n\n\n      let w = _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix.solve_CG(C, O, this._randomizer);\n      w = w.divide(w.sum);\n\n      for (let j = 0; j < k; ++j) {\n        W.set_entry(row, nN_row[j].j, w.entry(j, 0));\n      }\n    } // comp embedding\n\n\n    const I = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(rows, rows, \"identity\");\n    const IW = I.sub(W);\n    const M = IW.T.dot(IW);\n    const {\n      eigenvectors: V\n    } = (0,_linear_algebra_index__WEBPACK_IMPORTED_MODULE_2__.simultaneous_poweriteration)(M.T.inverse(), d + 1);\n    this.Y = _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix.from(V.slice(1, 1 + d)).T; // return embedding\n\n    return this.projection;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL2RpbXJlZC9MTEUuanM/YmQxZSJdLCJuYW1lcyI6WyJMTEUiLCJEUiIsImNvbnN0cnVjdG9yIiwiWCIsIm5laWdoYm9ycyIsImQiLCJtZXRyaWMiLCJldWNsaWRlYW4iLCJzZWVkIiwicGFyYW1ldGVyX2xpc3QiLCJwYXJhbWV0ZXIiLCJNYXRoIiwibWluIiwibWF4IiwiZmxvb3IiLCJfTiIsInRyYW5zZm9ybSIsIl9kIiwicm93cyIsImNvbHMiLCJfRCIsImsiLCJuTiIsImtfbmVhcmVzdF9uZWlnaGJvcnMiLCJfbWV0cmljIiwiTyIsIk1hdHJpeCIsIlciLCJyb3ciLCJuTl9yb3ciLCJaIiwiaSIsImoiLCJlbnRyeSIsIkMiLCJkb3QiLCJUIiwiQ190cmFjZSIsIm5ldW1haXJfc3VtIiwiZGlhZyIsInNldF9lbnRyeSIsInciLCJfcmFuZG9taXplciIsImRpdmlkZSIsInN1bSIsIkkiLCJJVyIsInN1YiIsIk0iLCJlaWdlbnZlY3RvcnMiLCJWIiwic2ltdWx0YW5lb3VzX3Bvd2VyaXRlcmF0aW9uIiwiaW52ZXJzZSIsIlkiLCJzbGljZSIsInByb2plY3Rpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLE1BQU1BLEdBQU4sU0FBa0JDLHNDQUFsQixDQUFxQjtBQUN4QjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLGFBQVcsQ0FBQ0MsQ0FBRCxFQUFJQyxTQUFKLEVBQWVDLENBQUMsR0FBQyxDQUFqQixFQUFvQkMsTUFBTSxHQUFDQyxxREFBM0IsRUFBc0NDLElBQUksR0FBQyxJQUEzQyxFQUFpRDtBQUN4RCxVQUFNTCxDQUFOLEVBQVNFLENBQVQsRUFBWUMsTUFBWixFQUFvQkUsSUFBcEI7QUFDQSxVQUFNQyxjQUFOLEdBQXVCLENBQUMsR0FBRCxDQUF2QjtBQUNBLFNBQUtDLFNBQUwsQ0FBZSxHQUFmLEVBQW9CQyxJQUFJLENBQUNDLEdBQUwsQ0FBU1IsU0FBUyxJQUFJTyxJQUFJLENBQUNFLEdBQUwsQ0FBU0YsSUFBSSxDQUFDRyxLQUFMLENBQVcsS0FBS0MsRUFBTCxHQUFVLEVBQXJCLENBQVQsRUFBbUMsQ0FBbkMsQ0FBdEIsRUFBNkQsS0FBS0EsRUFBTCxHQUFVLENBQXZFLENBQXBCO0FBQ0EsV0FBTyxJQUFQO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7OztBQUNJQyxXQUFTLEdBQUc7QUFDUixVQUFNYixDQUFDLEdBQUcsS0FBS0EsQ0FBZjtBQUNBLFVBQU1FLENBQUMsR0FBRyxLQUFLWSxFQUFmO0FBQ0EsVUFBTUMsSUFBSSxHQUFHLEtBQUtILEVBQWxCO0FBQ0EsVUFBTUksSUFBSSxHQUFHLEtBQUtDLEVBQWxCO0FBQ0EsVUFBTUMsQ0FBQyxHQUFHLEtBQUtYLFNBQUwsQ0FBZSxHQUFmLENBQVY7QUFDQSxVQUFNWSxFQUFFLEdBQUdDLGtFQUFtQixDQUFDcEIsQ0FBRCxFQUFJa0IsQ0FBSixFQUFPLElBQVAsRUFBYSxLQUFLRyxPQUFsQixDQUE5QjtBQUNBLFVBQU1DLENBQUMsR0FBRyxJQUFJQyxpREFBSixDQUFXTCxDQUFYLEVBQWMsQ0FBZCxFQUFpQixDQUFqQixDQUFWO0FBQ0EsVUFBTU0sQ0FBQyxHQUFHLElBQUlELGlEQUFKLENBQVdSLElBQVgsRUFBaUJBLElBQWpCLENBQVY7O0FBRUEsU0FBSyxJQUFJVSxHQUFHLEdBQUcsQ0FBZixFQUFrQkEsR0FBRyxHQUFHVixJQUF4QixFQUE4QixFQUFFVSxHQUFoQyxFQUFxQztBQUNqQyxZQUFNQyxNQUFNLEdBQUdQLEVBQUUsQ0FBQ00sR0FBRCxDQUFqQjtBQUNBLFlBQU1FLENBQUMsR0FBRyxJQUFJSixpREFBSixDQUFXTCxDQUFYLEVBQWNGLElBQWQsRUFBb0IsQ0FBQ1ksQ0FBRCxFQUFJQyxDQUFKLEtBQVU3QixDQUFDLENBQUM4QixLQUFGLENBQVFKLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFOLENBQVVDLENBQWxCLEVBQXFCQSxDQUFyQixJQUEwQjdCLENBQUMsQ0FBQzhCLEtBQUYsQ0FBUUwsR0FBUixFQUFhSSxDQUFiLENBQXhELENBQVY7QUFDQSxZQUFNRSxDQUFDLEdBQUdKLENBQUMsQ0FBQ0ssR0FBRixDQUFNTCxDQUFDLENBQUNNLENBQVIsQ0FBVjs7QUFDQSxVQUFLZixDQUFDLEdBQUdGLElBQVQsRUFBZ0I7QUFDWixjQUFNa0IsT0FBTyxHQUFHQyw2REFBVyxDQUFDSixDQUFDLENBQUNLLElBQUgsQ0FBWCxHQUFzQixJQUF0Qzs7QUFDQSxhQUFLLElBQUlQLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdYLENBQXBCLEVBQXVCLEVBQUVXLENBQXpCLEVBQTRCO0FBQ3hCRSxXQUFDLENBQUNNLFNBQUYsQ0FBWVIsQ0FBWixFQUFlQSxDQUFmLEVBQWtCRSxDQUFDLENBQUNELEtBQUYsQ0FBUUQsQ0FBUixFQUFXQSxDQUFYLElBQWdCSyxPQUFsQztBQUNIO0FBQ0osT0FUZ0MsQ0FVakM7OztBQUNBLFVBQUlJLENBQUMsR0FBR2YsMERBQUEsQ0FBZ0JRLENBQWhCLEVBQW1CVCxDQUFuQixFQUFzQixLQUFLaUIsV0FBM0IsQ0FBUjtBQUNBRCxPQUFDLEdBQUdBLENBQUMsQ0FBQ0UsTUFBRixDQUFTRixDQUFDLENBQUNHLEdBQVgsQ0FBSjs7QUFDQSxXQUFLLElBQUlaLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdYLENBQXBCLEVBQXVCLEVBQUVXLENBQXpCLEVBQTRCO0FBQ3hCTCxTQUFDLENBQUNhLFNBQUYsQ0FBWVosR0FBWixFQUFpQkMsTUFBTSxDQUFDRyxDQUFELENBQU4sQ0FBVUEsQ0FBM0IsRUFBOEJTLENBQUMsQ0FBQ1IsS0FBRixDQUFRRCxDQUFSLEVBQVcsQ0FBWCxDQUE5QjtBQUNIO0FBQ0osS0ExQk8sQ0EyQlI7OztBQUNBLFVBQU1hLENBQUMsR0FBRyxJQUFJbkIsaURBQUosQ0FBV1IsSUFBWCxFQUFpQkEsSUFBakIsRUFBdUIsVUFBdkIsQ0FBVjtBQUNBLFVBQU00QixFQUFFLEdBQUdELENBQUMsQ0FBQ0UsR0FBRixDQUFNcEIsQ0FBTixDQUFYO0FBQ0EsVUFBTXFCLENBQUMsR0FBR0YsRUFBRSxDQUFDVixDQUFILENBQUtELEdBQUwsQ0FBU1csRUFBVCxDQUFWO0FBQ0EsVUFBTTtBQUFFRyxrQkFBWSxFQUFFQztBQUFoQixRQUFzQkMsa0ZBQTJCLENBQUNILENBQUMsQ0FBQ1osQ0FBRixDQUFJZ0IsT0FBSixFQUFELEVBQWdCL0MsQ0FBQyxHQUFHLENBQXBCLENBQXZEO0FBQ0EsU0FBS2dELENBQUwsR0FBUzNCLHNEQUFBLENBQVl3QixDQUFDLENBQUNJLEtBQUYsQ0FBUSxDQUFSLEVBQVcsSUFBSWpELENBQWYsQ0FBWixFQUErQitCLENBQXhDLENBaENRLENBa0NSOztBQUNBLFdBQU8sS0FBS21CLFVBQVo7QUFDSDs7QUExRHVCIiwiZmlsZSI6Ii4vZGltcmVkL0xMRS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdHJpeCB9IGZyb20gXCIuLi9tYXRyaXgvaW5kZXhcIjtcclxuaW1wb3J0IHsgZXVjbGlkZWFuIH0gZnJvbSBcIi4uL21ldHJpY3MvaW5kZXhcIjtcclxuaW1wb3J0IHsgc2ltdWx0YW5lb3VzX3Bvd2VyaXRlcmF0aW9ufSBmcm9tIFwiLi4vbGluZWFyX2FsZ2VicmEvaW5kZXhcIjtcclxuaW1wb3J0IHsga19uZWFyZXN0X25laWdoYm9ycyB9IGZyb20gXCIuLi9tYXRyaXgvaW5kZXhcIjtcclxuaW1wb3J0IHsgbmV1bWFpcl9zdW0gfSBmcm9tIFwiLi4vbnVtZXJpY2FsL2luZGV4XCI7XHJcbmltcG9ydCB7IERSIH0gZnJvbSBcIi4vRFIuanNcIjtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3NcclxuICogQGFsaWFzIExMRVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExMRSBleHRlbmRzIERSIHtcclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6ZGltZW5zaW9uYWxpdHlfcmVkdWN0aW9uXHJcbiAgICAgKiBAYWxpYXMgTExFXHJcbiAgICAgKiBAcGFyYW0ge01hdHJpeH0gWCAtIHRoZSBoaWdoLWRpbWVuc2lvbmFsIGRhdGEuXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbmVpZ2hib3JzIC0gdGhlIGxhYmVsIC8gY2xhc3Mgb2YgZWFjaCBkYXRhIHBvaW50LlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtkID0gMl0gLSB0aGUgZGltZW5zaW9uYWxpdHkgb2YgdGhlIHByb2plY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbbWV0cmljID0gZXVjbGlkZWFuXSAtIHRoZSBtZXRyaWMgd2hpY2ggZGVmaW5lcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzLiAgXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3NlZWQgPSAxMjEyXSAtIHRoZSBkaW1lbnNpb25hbGl0eSBvZiB0aGUgcHJvamVjdGlvbi5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoWCwgbmVpZ2hib3JzLCBkPTIsIG1ldHJpYz1ldWNsaWRlYW4sIHNlZWQ9MTIxMikge1xyXG4gICAgICAgIHN1cGVyKFgsIGQsIG1ldHJpYywgc2VlZCk7XHJcbiAgICAgICAgc3VwZXIucGFyYW1ldGVyX2xpc3QgPSBbXCJrXCJdO1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVyKFwia1wiLCBNYXRoLm1pbihuZWlnaGJvcnMgPz8gTWF0aC5tYXgoTWF0aC5mbG9vcih0aGlzLl9OIC8gMTApLCAyKSwgdGhpcy5fTiAtIDEpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zZm9ybXMgdGhlIGlucHV0ZGF0YSB7QGxpbmsgWH0gdG8gZGltZW5pb25hbGl0eSB7QGxpbmsgZH0uXHJcbiAgICAgKi9cclxuICAgIHRyYW5zZm9ybSgpIHtcclxuICAgICAgICBjb25zdCBYID0gdGhpcy5YO1xyXG4gICAgICAgIGNvbnN0IGQgPSB0aGlzLl9kO1xyXG4gICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLl9OO1xyXG4gICAgICAgIGNvbnN0IGNvbHMgPSB0aGlzLl9EO1xyXG4gICAgICAgIGNvbnN0IGsgPSB0aGlzLnBhcmFtZXRlcihcImtcIik7XHJcbiAgICAgICAgY29uc3Qgbk4gPSBrX25lYXJlc3RfbmVpZ2hib3JzKFgsIGssIG51bGwsIHRoaXMuX21ldHJpYyk7XHJcbiAgICAgICAgY29uc3QgTyA9IG5ldyBNYXRyaXgoaywgMSwgMSk7XHJcbiAgICAgICAgY29uc3QgVyA9IG5ldyBNYXRyaXgocm93cywgcm93cyk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHJvd3M7ICsrcm93KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5OX3JvdyA9IG5OW3Jvd107XHJcbiAgICAgICAgICAgIGNvbnN0IFogPSBuZXcgTWF0cml4KGssIGNvbHMsIChpLCBqKSA9PiBYLmVudHJ5KG5OX3Jvd1tpXS5qLCBqKSAtIFguZW50cnkocm93LCBqKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IEMgPSBaLmRvdChaLlQpO1xyXG4gICAgICAgICAgICBpZiAoIGsgPiBjb2xzICkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgQ190cmFjZSA9IG5ldW1haXJfc3VtKEMuZGlhZykgLyAxMDAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBrOyArK2opIHtcclxuICAgICAgICAgICAgICAgICAgICBDLnNldF9lbnRyeShqLCBqLCBDLmVudHJ5KGosIGopICsgQ190cmFjZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcmVjb25zdHJ1Y3Q7XHJcbiAgICAgICAgICAgIGxldCB3ID0gTWF0cml4LnNvbHZlX0NHKEMsIE8sIHRoaXMuX3JhbmRvbWl6ZXIpO1xyXG4gICAgICAgICAgICB3ID0gdy5kaXZpZGUody5zdW0pO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGs7ICsraikge1xyXG4gICAgICAgICAgICAgICAgVy5zZXRfZW50cnkocm93LCBuTl9yb3dbal0uaiwgdy5lbnRyeShqLCAwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29tcCBlbWJlZGRpbmdcclxuICAgICAgICBjb25zdCBJID0gbmV3IE1hdHJpeChyb3dzLCByb3dzLCBcImlkZW50aXR5XCIpO1xyXG4gICAgICAgIGNvbnN0IElXID0gSS5zdWIoVyk7XHJcbiAgICAgICAgY29uc3QgTSA9IElXLlQuZG90KElXKTtcclxuICAgICAgICBjb25zdCB7IGVpZ2VudmVjdG9yczogViB9ID0gc2ltdWx0YW5lb3VzX3Bvd2VyaXRlcmF0aW9uKE0uVC5pbnZlcnNlKCksIGQgKyAxKTtcclxuICAgICAgICB0aGlzLlkgPSBNYXRyaXguZnJvbShWLnNsaWNlKDEsIDEgKyBkKSkuVDtcclxuXHJcbiAgICAgICAgLy8gcmV0dXJuIGVtYmVkZGluZ1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb2plY3Rpb247XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./dimred/LLE.js\n");

/***/ }),

/***/ "./dimred/LSP.js":
/*!***********************!*\
  !*** ./dimred/LSP.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LSP\": () => (/* binding */ LSP)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n/* harmony import */ var _MDS_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MDS.js */ \"./dimred/MDS.js\");\n/* harmony import */ var _clustering_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../clustering/index */ \"./clustering/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _knn_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../knn/index */ \"./knn/index.js\");\n\n\n\n\n\n\n/**\r\n * @class\r\n * @alias LSP\r\n */\n\nclass LSP extends _DR_js__WEBPACK_IMPORTED_MODULE_1__.DR {\n  /**\r\n   * \r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias LSP\r\n   * @param {Matrix} X - the high-dimensional data. \r\n   * @param {number} [k = Math.max(Math.floor(N / 10), 2)] - number of neighbors to consider.\r\n   * @param {number} [control_points = Math.ceil(Math.sqrt(N))] - number of controlpoints\r\n   * @param {number} [d = 2] - the dimensionality of the projection.\r\n   * @param {function} [metric = euclidean] - the metric which defines the distance between two points.  \r\n   * @returns {LSP}\r\n   * @see {@link https://ieeexplore.ieee.org/document/4378370}\r\n   */\n  constructor(X, k, control_points, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_4__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n    super.parameter_list = [\"k\", \"control_points\"];\n    this.parameter(\"k\", Math.min(k ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n    this.parameter(\"control_points\", Math.min(control_points ?? Math.ceil(Math.sqrt(this._N)), this._N - 1));\n    this._is_initialized = false;\n    return this;\n  }\n  /**\r\n   * \r\n   * @param {DR} DR - method used for position control points.\r\n   * @param {DR_parameters} DR_parameters - array containing parameters for the DR method which projects the control points\r\n   * @returns {LSP} \r\n   */\n\n\n  init(DR = _MDS_js__WEBPACK_IMPORTED_MODULE_2__.MDS, DR_parameters = [], KNN = _knn_index__WEBPACK_IMPORTED_MODULE_5__.BallTree) {\n    if (this._is_initialized) return this;\n    const X = this.X;\n    const N = this._N;\n    const K = this.parameter(\"k\");\n    const d = this._d;\n    const metric = this._metric;\n    const nc = this.parameter(\"control_points\");\n    const control_points = new _clustering_index__WEBPACK_IMPORTED_MODULE_3__.KMedoids(X, nc, null, metric).get_clusters().medoids;\n    const C = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(nc, N, \"zeros\");\n    control_points.forEach((c_i, i) => {\n      C.set_entry(i, c_i, 1);\n    });\n    const Y_C = new DR(_matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix.from(control_points.map(c_i => X.row(c_i))), ...DR_parameters, d).transform();\n    const XA = X.to2dArray;\n    const knn = new KNN(XA, metric);\n    const L = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, N, \"I\");\n    const alpha = -1 / K;\n    XA.forEach((x_i, i) => {\n      for (const {\n        \"index\": j\n      } of knn.search(x_i, K).iterate()) {\n        if (i === j) continue;\n        L.set_entry(i, j, alpha);\n      }\n    });\n    const A = L.concat(C, \"vertical\");\n    const z = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, d, \"zeros\");\n    const b = z.concat(Y_C, \"vertical\");\n    this._A = A;\n    this._b = b;\n    this._is_initialized = true;\n    return this;\n  }\n  /**\r\n   * Computes the projection.\r\n   * @returns {Matrix} Returns the projection.\r\n   */\n\n\n  transform() {\n    this.check_init();\n    const A = this._A;\n    const AT = A.T;\n    const b = this._b;\n    const ATA = AT.dot(A);\n    const ATb = AT.dot(b);\n    this.Y = _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix.solve_CG(ATA, ATb, this._randomizer);\n    return this.projection;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dimred/LSP.js\n");

/***/ }),

/***/ "./dimred/LTSA.js":
/*!************************!*\
  !*** ./dimred/LTSA.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LTSA\": () => (/* binding */ LTSA)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _linear_algebra_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../linear_algebra/index */ \"./linear_algebra/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n\n\n\n\n/**\r\n * @class\r\n * @alias LTSA\r\n */\n\nclass LTSA extends _DR_js__WEBPACK_IMPORTED_MODULE_3__.DR {\n  /**\r\n   * \r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias LTSA\r\n   * @param {Matrix} X - the high-dimensional data.\r\n   * @param {Number} neighbors - the label / class of each data point.\r\n   * @param {Number} [d = 2] - the dimensionality of the projection.\r\n   * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.  \r\n   * @param {Number} [seed = 1212] - the dimensionality of the projection.\r\n   * @see {@link https://epubs.siam.org/doi/abs/10.1137/S1064827502419154}\r\n   */\n  constructor(X, neighbors, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n    super.parameter_list = [\"k\"];\n    this.parameter(\"k\", Math.min(neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n    if (this._D <= d) throw `Dimensionality of X (D = ${this._D}) must be greater than the required dimensionality of the result (d = ${d})!`;\n    return this;\n  }\n  /**\r\n   * Transforms the inputdata {@link X} to dimenionality {@link d}.\r\n   */\n\n\n  transform() {\n    const X = this.X;\n    const d = this._d;\n    const [rows, D] = X.shape;\n    const k = this.parameter(\"k\"); // 1.1 determine k nearest neighbors\n\n    const nN = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.k_nearest_neighbors)(X, k, null, this._metric); // center matrix\n\n    const O = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(D, D, \"center\");\n    const B = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(rows, rows, 0);\n\n    for (let row = 0; row < rows; ++row) {\n      // 1.2 compute the d largest eigenvectors of the correlation matrix\n      const I_i = [row, ...nN[row].map(n => n.j)];\n      let X_i = _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix.from(I_i.map(n => X.row(n))); // center X_i\n\n      X_i = X_i.dot(O); // correlation matrix\n\n      const C = X_i.dot(X_i.transpose());\n      const {\n        eigenvectors: g\n      } = (0,_linear_algebra_index__WEBPACK_IMPORTED_MODULE_2__.simultaneous_poweriteration)(C, d); //g.push(linspace(0, k).map(_ => 1 / Math.sqrt(k + 1)));\n\n      const G_i_t = _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix.from(g); // 2. Constructing alignment matrix\n\n      const W_i = G_i_t.transpose().dot(G_i_t).add(1 / Math.sqrt(k + 1));\n\n      for (let i = 0; i < k + 1; ++i) {\n        for (let j = 0; j < k + 1; ++j) {\n          B.set_entry(I_i[i], I_i[j], B.entry(I_i[i], I_i[j]) - (i === j ? 1 : 0) + W_i.entry(i, j));\n        }\n      }\n    } // 3. Aligning global coordinates\n\n\n    const {\n      eigenvectors: Y\n    } = (0,_linear_algebra_index__WEBPACK_IMPORTED_MODULE_2__.simultaneous_poweriteration)(B, d + 1);\n    this.Y = _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix.from(Y.slice(1)).transpose(); // return embedding\n\n    return this.projection;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dimred/LTSA.js\n");

/***/ }),

/***/ "./dimred/MDS.js":
/*!***********************!*\
  !*** ./dimred/MDS.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MDS\": () => (/* binding */ MDS)\n/* harmony export */ });\n/* harmony import */ var _linear_algebra_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../linear_algebra/index */ \"./linear_algebra/index.js\");\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n\n\n\n\n/**\r\n * @class\r\n * @alias MDS\r\n */\n\nclass MDS extends _DR_js__WEBPACK_IMPORTED_MODULE_3__.DR {\n  /**\r\n   * \r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias MDS\r\n   * @param {Matrix} X - the high-dimensional data.\r\n   * @param {Number} neighbors - the label / class of each data point.\r\n   * @param {Number} [d = 2] - the dimensionality of the projection.\r\n   * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.  \r\n   * @param {Number} [seed = 1212] - the dimensionality of the projection.\r\n   */\n  constructor(X, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_2__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n    return this;\n  }\n  /**\r\n   * Transforms the inputdata {@link X} to dimenionality {@link d}.\r\n   */\n\n\n  transform() {\n    const X = this.X;\n    const rows = X.shape[0];\n    const metric = this._metric;\n    let ai_ = new Float64Array(rows);\n    let a_j = new Float64Array(rows);\n    let a__ = 0;\n    const A = new _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix();\n    A.shape = [rows, rows, (i, j) => {\n      if (i === j) return 0;\n      const val = i < j ? metric(X.row(i), X.row(j)) : A.entry(j, i);\n      ai_[i] += val;\n      a_j[j] += val;\n      a__ += val;\n      return val;\n    }];\n    this._d_X = A;\n    ai_ = ai_.map(v => v / rows);\n    a_j = a_j.map(v => v / rows);\n    a__ /= rows ** 2;\n    const B = new _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__); //B.shape = [rows, rows, (i,j) => (A.entry(i,j) - (A.row(i).reduce(sum_reduce) / rows) - (A.col(j).reduce(sum_reduce) / rows) + a__)]\n\n    const {\n      eigenvectors: V\n    } = (0,_linear_algebra_index__WEBPACK_IMPORTED_MODULE_0__.simultaneous_poweriteration)(B, this._d);\n    this.Y = _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix.from(V).transpose();\n    return this.projection;\n  }\n\n  get stress() {\n    const N = this.X.shape[0];\n    const Y = this.Y;\n    const d_X = this._d_X;\n    /*new Matrix();\r\n    d_X.shape = [N, N, (i, j) => {\r\n    return i < j ? metric(X.row(i), X.row(j)) : d_X.entry(j, i);\r\n    }]*/\n\n    const d_Y = new _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix();\n    d_Y.shape = [N, N, (i, j) => {\n      return i < j ? (0,_metrics_index__WEBPACK_IMPORTED_MODULE_2__.euclidean)(Y.row(i), Y.row(j)) : d_Y.entry(j, i);\n    }];\n    let top_sum = 0;\n    let bottom_sum = 0;\n\n    for (let i = 0; i < N; ++i) {\n      for (let j = i + 1; j < N; ++j) {\n        top_sum += Math.pow(d_X.entry(i, j) - d_Y.entry(i, j), 2);\n        bottom_sum += Math.pow(d_X.entry(i, j), 2);\n      }\n    }\n\n    return Math.sqrt(top_sum / bottom_sum);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dimred/MDS.js\n");

/***/ }),

/***/ "./dimred/PCA.js":
/*!***********************!*\
  !*** ./dimred/PCA.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PCA\": () => (/* binding */ PCA)\n/* harmony export */ });\n/* harmony import */ var _linear_algebra_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../linear_algebra/index */ \"./linear_algebra/index.js\");\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n\n\n\n/**\r\n * @class\r\n * @alias PCA\r\n * @augments DR\r\n */\n\nclass PCA extends _DR_js__WEBPACK_IMPORTED_MODULE_2__.DR {\n  /**\r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias PCA \r\n   * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\r\n   * @param {Number} [d = 2] - the dimensionality of the projection.\r\n   * @returns {PCA}\r\n   */\n  constructor(X, d = 2) {\n    super(X, d);\n    return this;\n  }\n  /**\r\n   * Transforms the inputdata {@link X} to dimenionality {@link d}.\r\n   */\n\n\n  transform() {\n    let X = this.X;\n    let D = X.shape[1];\n    let O = new _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix(D, D, \"center\");\n    let X_cent = X.dot(O);\n    let C = X_cent.transpose().dot(X_cent);\n    let {\n      eigenvectors: V\n    } = (0,_linear_algebra_index__WEBPACK_IMPORTED_MODULE_0__.simultaneous_poweriteration)(C, this._d);\n    V = _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix.from(V).transpose();\n    this.Y = X.dot(V);\n    return this.projection;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL2RpbXJlZC9QQ0EuanM/OGQ3ZiJdLCJuYW1lcyI6WyJQQ0EiLCJEUiIsImNvbnN0cnVjdG9yIiwiWCIsImQiLCJ0cmFuc2Zvcm0iLCJEIiwic2hhcGUiLCJPIiwiTWF0cml4IiwiWF9jZW50IiwiZG90IiwiQyIsInRyYW5zcG9zZSIsImVpZ2VudmVjdG9ycyIsIlYiLCJzaW11bHRhbmVvdXNfcG93ZXJpdGVyYXRpb24iLCJfZCIsIlkiLCJwcm9qZWN0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxNQUFNQSxHQUFOLFNBQWtCQyxzQ0FBbEIsQ0FBb0I7QUFDdkI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxhQUFXLENBQUNDLENBQUQsRUFBSUMsQ0FBQyxHQUFDLENBQU4sRUFBUztBQUNoQixVQUFNRCxDQUFOLEVBQVNDLENBQVQ7QUFDQSxXQUFPLElBQVA7QUFDSDtBQUVEO0FBQ0o7QUFDQTs7O0FBQ0lDLFdBQVMsR0FBRztBQUNSLFFBQUlGLENBQUMsR0FBRyxLQUFLQSxDQUFiO0FBQ0EsUUFBSUcsQ0FBQyxHQUFHSCxDQUFDLENBQUNJLEtBQUYsQ0FBUSxDQUFSLENBQVI7QUFDQSxRQUFJQyxDQUFDLEdBQUcsSUFBSUMsaURBQUosQ0FBV0gsQ0FBWCxFQUFjQSxDQUFkLEVBQWlCLFFBQWpCLENBQVI7QUFDQSxRQUFJSSxNQUFNLEdBQUdQLENBQUMsQ0FBQ1EsR0FBRixDQUFNSCxDQUFOLENBQWI7QUFFQSxRQUFJSSxDQUFDLEdBQUdGLE1BQU0sQ0FBQ0csU0FBUCxHQUFtQkYsR0FBbkIsQ0FBdUJELE1BQXZCLENBQVI7QUFDQSxRQUFJO0FBQUVJLGtCQUFZLEVBQUVDO0FBQWhCLFFBQXNCQyxrRkFBMkIsQ0FBQ0osQ0FBRCxFQUFJLEtBQUtLLEVBQVQsQ0FBckQ7QUFDQUYsS0FBQyxHQUFHTixzREFBQSxDQUFZTSxDQUFaLEVBQWVGLFNBQWYsRUFBSjtBQUNBLFNBQUtLLENBQUwsR0FBU2YsQ0FBQyxDQUFDUSxHQUFGLENBQU1JLENBQU4sQ0FBVDtBQUNBLFdBQU8sS0FBS0ksVUFBWjtBQUNIOztBQTVCc0IiLCJmaWxlIjoiLi9kaW1yZWQvUENBLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2ltdWx0YW5lb3VzX3Bvd2VyaXRlcmF0aW9ufSBmcm9tIFwiLi4vbGluZWFyX2FsZ2VicmEvaW5kZXhcIjtcclxuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSBcIi4uL21hdHJpeC9pbmRleFwiO1xyXG5pbXBvcnQgeyBEUiB9IGZyb20gXCIuL0RSLmpzXCI7XHJcblxyXG4vKipcclxuICogQGNsYXNzXHJcbiAqIEBhbGlhcyBQQ0FcclxuICogQGF1Z21lbnRzIERSXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUENBIGV4dGVuZHMgRFJ7XHJcbiAgICAvKipcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpkaW1lbnNpb25hbGl0eV9yZWR1Y3Rpb25cclxuICAgICAqIEBhbGlhcyBQQ0EgXHJcbiAgICAgKiBAcGFyYW0ge01hdHJpeHxBcnJheTxBcnJheTxOdW1iZXI+Pn0gWCAtIHRoZSBoaWdoLWRpbWVuc2lvbmFsIGRhdGEuXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2QgPSAyXSAtIHRoZSBkaW1lbnNpb25hbGl0eSBvZiB0aGUgcHJvamVjdGlvbi5cclxuICAgICAqIEByZXR1cm5zIHtQQ0F9XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFgsIGQ9Mikge1xyXG4gICAgICAgIHN1cGVyKFgsIGQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgaW5wdXRkYXRhIHtAbGluayBYfSB0byBkaW1lbmlvbmFsaXR5IHtAbGluayBkfS5cclxuICAgICAqL1xyXG4gICAgdHJhbnNmb3JtKCkge1xyXG4gICAgICAgIGxldCBYID0gdGhpcy5YO1xyXG4gICAgICAgIGxldCBEID0gWC5zaGFwZVsxXTtcclxuICAgICAgICBsZXQgTyA9IG5ldyBNYXRyaXgoRCwgRCwgXCJjZW50ZXJcIik7XHJcbiAgICAgICAgbGV0IFhfY2VudCA9IFguZG90KE8pO1xyXG5cclxuICAgICAgICBsZXQgQyA9IFhfY2VudC50cmFuc3Bvc2UoKS5kb3QoWF9jZW50KVxyXG4gICAgICAgIGxldCB7IGVpZ2VudmVjdG9yczogViB9ID0gc2ltdWx0YW5lb3VzX3Bvd2VyaXRlcmF0aW9uKEMsIHRoaXMuX2QpXHJcbiAgICAgICAgViA9IE1hdHJpeC5mcm9tKFYpLnRyYW5zcG9zZSgpXHJcbiAgICAgICAgdGhpcy5ZID0gWC5kb3QoVilcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0aW9uO1xyXG4gICAgfVxyXG59ICJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./dimred/PCA.js\n");

/***/ }),

/***/ "./dimred/SAMMON.js":
/*!**************************!*\
  !*** ./dimred/SAMMON.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SAMMON\": () => (/* binding */ SAMMON)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.js */ \"./dimred/index.js\");\n\n\n\n\nclass SAMMON extends _DR_js__WEBPACK_IMPORTED_MODULE_2__.DR {\n  /**\r\n   * \r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias SAMMON\r\n   * @param {Matrix} X - the high-dimensional data. \r\n   * @param {Number} [d = 2] - the dimensionality of the projection.\r\n   * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.  \r\n   * @param {Number} [seed = 1212] - the dimensionality of the projection.\r\n   * @returns {SAMMON}\r\n   * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\r\n   */\n  constructor(X, max_halves = 5, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n    super.parameter_list = [\"max_halves\"];\n    this.parameter(\"max_halves\", max_halves);\n    [this._N, this._D] = this.X.shape;\n    return this;\n  }\n  /**\r\n   * initializes SAMMON. Sets all projcted points to zero, and computes a minimum spanning tree.\r\n   */\n\n\n  init(DR = \"random\", Distance_matrix = null) {\n    const N = this._N;\n    const d = this._d;\n\n    if (DR === \"random\") {\n      const randomizer = this._randomizer;\n      console.log(randomizer);\n      this.Y = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, d, () => randomizer.random);\n    } else {\n      this.Y = DR.transform(this.X);\n    }\n\n    const Y = this.Y;\n\n    if (!Distance_matrix) {\n      Distance_matrix = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, N);\n    }\n\n    const metric = this._metric;\n    let distance_matrix = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, N);\n    let distance_inverse_matrix = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, N);\n\n    for (let i = 0; i < N; ++i) {\n      const Y_i = Y.row(i);\n\n      for (let j = i; j < N; ++j) {\n        let distance = i === j ? 1 : metric(Y_i, Y.row(j));\n        let distance_inverse = 1 / distance;\n        distance_matrix.set_entry(i, j, distance);\n        distance_matrix.set_entry(j, i, distance);\n        distance_inverse_matrix.set_entry(i, j, distance_inverse);\n        distance_inverse_matrix.set_entry(j, i, distance_inverse);\n\n        if (!Distance_matrix) {\n          let Distance = i === j ? 1 : metric(X.row(i), X.row(j));\n          Distance_matrix.set_entry(i, j, Distance);\n          Distance_matrix.set_entry(j, i, Distance);\n        }\n      }\n    }\n\n    let Distance_inverse_matrix = Distance_matrix._apply(1, (d, v) => v / d);\n\n    let delta = Distance_matrix.sub(distance_matrix);\n\n    let E = delta._apply(2, (d, v) => Math.pow(d, v)).mult(Distance_inverse_matrix);\n\n    console.log(E);\n    this._distance_matrix = distance_matrix;\n    this._distance_inverse_matrix = distance_inverse_matrix;\n    this._Distance_matrix = Distance_matrix;\n    this._Distance_inverse_matrix = distance_inverse_matrix;\n    this._delta = delta;\n    this._ones = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, d, 1);\n    this._E = E.sum;\n    return this;\n  }\n  /**\r\n   * @private\r\n   * @param {Matrix} A\r\n   * @returns {Matrix} \r\n   */\n\n\n  __distance_matrix(A) {\n    const metric = this._metric;\n    const N = A.shape[0];\n    const D = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, N);\n\n    for (let i = 0; i < N; ++i) {\n      const A_i = A.row(i);\n\n      for (let j = i; j < N; ++j) {\n        let distance = i === j ? 1 : metric(A_i, A.row(j));\n        D.set_entry(i, j, distance);\n        D.set_entry(j, i, distance);\n      }\n    }\n\n    return D;\n  }\n  /**\r\n   * Transforms the inputdata {@link X} to dimenionality 2.\r\n   */\n\n\n  transform(max_iter = 20) {\n    if (!this._is_initialized) this.init();\n\n    for (let j = 0; j < max_iter; ++j) {\n      console.log([...this.Y]);\n\n      this._step();\n    }\n\n    return this.projection;\n  }\n\n  *generator() {\n    if (!this._is_initialized) this.init();\n\n    for (let j = 0; j < max_iter; ++j) {\n      this._step();\n\n      yield this.projection;\n    }\n\n    return this.projection;\n  }\n\n  _step() {\n    const max_halves = this.parameter(\"max_halves\");\n    let distance_matrix = this._distance_matrix;\n    let distance_inverse_matrix = this._distance_inverse_matrix;\n    let Distance_matrix = this._Distance_matrix;\n    let Distance_inverse_matrix = this._Distance_inverse_matrix;\n    let ones = this._ones;\n    let E = this._E;\n    let Y = this.Y;\n    let delta = distance_inverse_matrix.sub(Distance_inverse_matrix);\n    let delta_one = delta.dot(ones);\n    let g = delta.dot(Y).sub(Y.mult(delta_one));\n\n    let dinv3 = distance_inverse_matrix._apply(3, (d, v) => Math.pow(d, v));\n\n    let Y2 = Y._apply(2, (d, v) => Math.pow(d, v));\n\n    let H = dinv3.dot(Y2).sub(delta_one).sub(Y.mult(2).mult(dinv3.dot(Y))).add(Y2.mult(dinv3.dot(ones)));\n    H = H._apply(null, d => Math.abs(d));\n    let s = g.divide(H);\n    let Y_old = Y.clone();\n\n    for (let j = 0; j < max_halves; ++j) {\n      Y = Y_old.add(s);\n      distance_matrix = this.__distance_matrix(Y);\n      distance_inverse_matrix = distance_matrix._apply(1, (d, v) => v / d);\n      delta = Distance_matrix.sub(distance_matrix);\n\n      let E_new = delta._apply(2, (d, v) => Math.pow(d, v)).mult(Distance_inverse_matrix).sum;\n\n      if (E_new < E) {\n        break;\n      } else {\n        s = s.mult(.5);\n      }\n    }\n\n    this.Y = Y;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL2RpbXJlZC9TQU1NT04uanM/ZWZiNyJdLCJuYW1lcyI6WyJTQU1NT04iLCJEUiIsImNvbnN0cnVjdG9yIiwiWCIsIm1heF9oYWx2ZXMiLCJkIiwibWV0cmljIiwiZXVjbGlkZWFuIiwic2VlZCIsInBhcmFtZXRlcl9saXN0IiwicGFyYW1ldGVyIiwiX04iLCJfRCIsInNoYXBlIiwiaW5pdCIsIkRpc3RhbmNlX21hdHJpeCIsIk4iLCJfZCIsInJhbmRvbWl6ZXIiLCJfcmFuZG9taXplciIsImNvbnNvbGUiLCJsb2ciLCJZIiwiTWF0cml4IiwicmFuZG9tIiwidHJhbnNmb3JtIiwiX21ldHJpYyIsImRpc3RhbmNlX21hdHJpeCIsImRpc3RhbmNlX2ludmVyc2VfbWF0cml4IiwiaSIsIllfaSIsInJvdyIsImoiLCJkaXN0YW5jZSIsImRpc3RhbmNlX2ludmVyc2UiLCJzZXRfZW50cnkiLCJEaXN0YW5jZSIsIkRpc3RhbmNlX2ludmVyc2VfbWF0cml4IiwiX2FwcGx5IiwidiIsImRlbHRhIiwic3ViIiwiRSIsIk1hdGgiLCJwb3ciLCJtdWx0IiwiX2Rpc3RhbmNlX21hdHJpeCIsIl9kaXN0YW5jZV9pbnZlcnNlX21hdHJpeCIsIl9EaXN0YW5jZV9tYXRyaXgiLCJfRGlzdGFuY2VfaW52ZXJzZV9tYXRyaXgiLCJfZGVsdGEiLCJfb25lcyIsIl9FIiwic3VtIiwiX19kaXN0YW5jZV9tYXRyaXgiLCJBIiwiRCIsIkFfaSIsIm1heF9pdGVyIiwiX2lzX2luaXRpYWxpemVkIiwiX3N0ZXAiLCJwcm9qZWN0aW9uIiwiZ2VuZXJhdG9yIiwib25lcyIsImRlbHRhX29uZSIsImRvdCIsImciLCJkaW52MyIsIlkyIiwiSCIsImFkZCIsImFicyIsInMiLCJkaXZpZGUiLCJZX29sZCIsImNsb25lIiwiRV9uZXciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFTyxNQUFNQSxNQUFOLFNBQXFCQyxzQ0FBckIsQ0FBd0I7QUFDM0I7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLGFBQVcsQ0FBQ0MsQ0FBRCxFQUFJQyxVQUFVLEdBQUMsQ0FBZixFQUFrQkMsQ0FBQyxHQUFDLENBQXBCLEVBQXVCQyxNQUFNLEdBQUNDLHFEQUE5QixFQUF5Q0MsSUFBSSxHQUFDLElBQTlDLEVBQW9EO0FBQzNELFVBQU1MLENBQU4sRUFBU0UsQ0FBVCxFQUFZQyxNQUFaLEVBQW9CRSxJQUFwQjtBQUNBLFVBQU1DLGNBQU4sR0FBdUIsQ0FBQyxZQUFELENBQXZCO0FBQ0EsU0FBS0MsU0FBTCxDQUFlLFlBQWYsRUFBNkJOLFVBQTdCO0FBQ0EsS0FBRSxLQUFLTyxFQUFQLEVBQVcsS0FBS0MsRUFBaEIsSUFBdUIsS0FBS1QsQ0FBTCxDQUFPVSxLQUE5QjtBQUNBLFdBQU8sSUFBUDtBQUNIO0FBRUQ7QUFDSjtBQUNBOzs7QUFDSUMsTUFBSSxDQUFDYixFQUFFLEdBQUMsUUFBSixFQUFjYyxlQUFlLEdBQUMsSUFBOUIsRUFBb0M7QUFDcEMsVUFBTUMsQ0FBQyxHQUFHLEtBQUtMLEVBQWY7QUFDQSxVQUFNTixDQUFDLEdBQUcsS0FBS1ksRUFBZjs7QUFFQSxRQUFJaEIsRUFBRSxLQUFLLFFBQVgsRUFBcUI7QUFDakIsWUFBTWlCLFVBQVUsR0FBRyxLQUFLQyxXQUF4QjtBQUNBQyxhQUFPLENBQUNDLEdBQVIsQ0FBWUgsVUFBWjtBQUNBLFdBQUtJLENBQUwsR0FBUyxJQUFJQyxpREFBSixDQUFXUCxDQUFYLEVBQWNYLENBQWQsRUFBaUIsTUFBTWEsVUFBVSxDQUFDTSxNQUFsQyxDQUFUO0FBQ0gsS0FKRCxNQUlPO0FBQ0gsV0FBS0YsQ0FBTCxHQUFTckIsRUFBRSxDQUFDd0IsU0FBSCxDQUFhLEtBQUt0QixDQUFsQixDQUFUO0FBQ0g7O0FBQ0QsVUFBTW1CLENBQUMsR0FBRyxLQUFLQSxDQUFmOztBQUVBLFFBQUksQ0FBQ1AsZUFBTCxFQUFzQjtBQUNsQkEscUJBQWUsR0FBRyxJQUFJUSxpREFBSixDQUFXUCxDQUFYLEVBQWNBLENBQWQsQ0FBbEI7QUFDSDs7QUFFRCxVQUFNVixNQUFNLEdBQUcsS0FBS29CLE9BQXBCO0FBQ0EsUUFBSUMsZUFBZSxHQUFHLElBQUlKLGlEQUFKLENBQVdQLENBQVgsRUFBY0EsQ0FBZCxDQUF0QjtBQUNBLFFBQUlZLHVCQUF1QixHQUFHLElBQUlMLGlEQUFKLENBQVdQLENBQVgsRUFBY0EsQ0FBZCxDQUE5Qjs7QUFDQSxTQUFLLElBQUlhLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdiLENBQXBCLEVBQXVCLEVBQUVhLENBQXpCLEVBQTRCO0FBQ3hCLFlBQU1DLEdBQUcsR0FBR1IsQ0FBQyxDQUFDUyxHQUFGLENBQU1GLENBQU4sQ0FBWjs7QUFDQSxXQUFLLElBQUlHLENBQUMsR0FBR0gsQ0FBYixFQUFnQkcsQ0FBQyxHQUFHaEIsQ0FBcEIsRUFBdUIsRUFBRWdCLENBQXpCLEVBQTRCO0FBQ3hCLFlBQUlDLFFBQVEsR0FBR0osQ0FBQyxLQUFLRyxDQUFOLEdBQVUsQ0FBVixHQUFjMUIsTUFBTSxDQUFDd0IsR0FBRCxFQUFNUixDQUFDLENBQUNTLEdBQUYsQ0FBTUMsQ0FBTixDQUFOLENBQW5DO0FBQ0EsWUFBSUUsZ0JBQWdCLEdBQUcsSUFBSUQsUUFBM0I7QUFDQU4sdUJBQWUsQ0FBQ1EsU0FBaEIsQ0FBMEJOLENBQTFCLEVBQTZCRyxDQUE3QixFQUFnQ0MsUUFBaEM7QUFDQU4sdUJBQWUsQ0FBQ1EsU0FBaEIsQ0FBMEJILENBQTFCLEVBQTZCSCxDQUE3QixFQUFnQ0ksUUFBaEM7QUFDQUwsK0JBQXVCLENBQUNPLFNBQXhCLENBQWtDTixDQUFsQyxFQUFxQ0csQ0FBckMsRUFBd0NFLGdCQUF4QztBQUNBTiwrQkFBdUIsQ0FBQ08sU0FBeEIsQ0FBa0NILENBQWxDLEVBQXFDSCxDQUFyQyxFQUF3Q0ssZ0JBQXhDOztBQUNBLFlBQUksQ0FBQ25CLGVBQUwsRUFBc0I7QUFDbEIsY0FBSXFCLFFBQVEsR0FBR1AsQ0FBQyxLQUFLRyxDQUFOLEdBQVUsQ0FBVixHQUFjMUIsTUFBTSxDQUFDSCxDQUFDLENBQUM0QixHQUFGLENBQU1GLENBQU4sQ0FBRCxFQUFXMUIsQ0FBQyxDQUFDNEIsR0FBRixDQUFNQyxDQUFOLENBQVgsQ0FBbkM7QUFDQWpCLHlCQUFlLENBQUNvQixTQUFoQixDQUEwQk4sQ0FBMUIsRUFBNkJHLENBQTdCLEVBQWdDSSxRQUFoQztBQUNBckIseUJBQWUsQ0FBQ29CLFNBQWhCLENBQTBCSCxDQUExQixFQUE2QkgsQ0FBN0IsRUFBZ0NPLFFBQWhDO0FBQ0g7QUFDSjtBQUNKOztBQUNELFFBQUlDLHVCQUF1QixHQUFHdEIsZUFBZSxDQUFDdUIsTUFBaEIsQ0FBdUIsQ0FBdkIsRUFBMEIsQ0FBQ2pDLENBQUQsRUFBSWtDLENBQUosS0FBVUEsQ0FBQyxHQUFHbEMsQ0FBeEMsQ0FBOUI7O0FBQ0EsUUFBSW1DLEtBQUssR0FBR3pCLGVBQWUsQ0FBQzBCLEdBQWhCLENBQW9CZCxlQUFwQixDQUFaOztBQUNBLFFBQUllLENBQUMsR0FBR0YsS0FBSyxDQUFDRixNQUFOLENBQWEsQ0FBYixFQUFnQixDQUFDakMsQ0FBRCxFQUFJa0MsQ0FBSixLQUFVSSxJQUFJLENBQUNDLEdBQUwsQ0FBU3ZDLENBQVQsRUFBWWtDLENBQVosQ0FBMUIsRUFBMENNLElBQTFDLENBQStDUix1QkFBL0MsQ0FBUjs7QUFDQWpCLFdBQU8sQ0FBQ0MsR0FBUixDQUFZcUIsQ0FBWjtBQUNBLFNBQUtJLGdCQUFMLEdBQXdCbkIsZUFBeEI7QUFDQSxTQUFLb0Isd0JBQUwsR0FBZ0NuQix1QkFBaEM7QUFDQSxTQUFLb0IsZ0JBQUwsR0FBd0JqQyxlQUF4QjtBQUNBLFNBQUtrQyx3QkFBTCxHQUFnQ3JCLHVCQUFoQztBQUNBLFNBQUtzQixNQUFMLEdBQWNWLEtBQWQ7QUFDQSxTQUFLVyxLQUFMLEdBQWEsSUFBSTVCLGlEQUFKLENBQVdQLENBQVgsRUFBY1gsQ0FBZCxFQUFpQixDQUFqQixDQUFiO0FBQ0EsU0FBSytDLEVBQUwsR0FBVVYsQ0FBQyxDQUFDVyxHQUFaO0FBRUEsV0FBTyxJQUFQO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBOzs7QUFDSUMsbUJBQWlCLENBQUNDLENBQUQsRUFBSTtBQUNqQixVQUFNakQsTUFBTSxHQUFHLEtBQUtvQixPQUFwQjtBQUNBLFVBQU1WLENBQUMsR0FBR3VDLENBQUMsQ0FBQzFDLEtBQUYsQ0FBUSxDQUFSLENBQVY7QUFDQSxVQUFNMkMsQ0FBQyxHQUFHLElBQUlqQyxpREFBSixDQUFXUCxDQUFYLEVBQWNBLENBQWQsQ0FBVjs7QUFDQSxTQUFLLElBQUlhLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdiLENBQXBCLEVBQXVCLEVBQUVhLENBQXpCLEVBQTRCO0FBQ3hCLFlBQU00QixHQUFHLEdBQUdGLENBQUMsQ0FBQ3hCLEdBQUYsQ0FBTUYsQ0FBTixDQUFaOztBQUNBLFdBQUssSUFBSUcsQ0FBQyxHQUFHSCxDQUFiLEVBQWdCRyxDQUFDLEdBQUdoQixDQUFwQixFQUF1QixFQUFFZ0IsQ0FBekIsRUFBNEI7QUFDeEIsWUFBSUMsUUFBUSxHQUFJSixDQUFDLEtBQUtHLENBQU4sR0FBVSxDQUFWLEdBQWMxQixNQUFNLENBQUNtRCxHQUFELEVBQU1GLENBQUMsQ0FBQ3hCLEdBQUYsQ0FBTUMsQ0FBTixDQUFOLENBQXBDO0FBQ0F3QixTQUFDLENBQUNyQixTQUFGLENBQVlOLENBQVosRUFBZUcsQ0FBZixFQUFrQkMsUUFBbEI7QUFDQXVCLFNBQUMsQ0FBQ3JCLFNBQUYsQ0FBWUgsQ0FBWixFQUFlSCxDQUFmLEVBQWtCSSxRQUFsQjtBQUNIO0FBQ0o7O0FBQ0QsV0FBT3VCLENBQVA7QUFDSDtBQUVEO0FBQ0o7QUFDQTs7O0FBQ0kvQixXQUFTLENBQUNpQyxRQUFRLEdBQUMsRUFBVixFQUFjO0FBQ25CLFFBQUksQ0FBQyxLQUFLQyxlQUFWLEVBQTJCLEtBQUs3QyxJQUFMOztBQUUzQixTQUFLLElBQUlrQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHMEIsUUFBcEIsRUFBOEIsRUFBRTFCLENBQWhDLEVBQW1DO0FBQy9CWixhQUFPLENBQUNDLEdBQVIsQ0FBWSxDQUFDLEdBQUcsS0FBS0MsQ0FBVCxDQUFaOztBQUNBLFdBQUtzQyxLQUFMO0FBQ0g7O0FBRUQsV0FBTyxLQUFLQyxVQUFaO0FBQ0g7O0FBRVUsR0FBVEMsU0FBUyxHQUFHO0FBQ1YsUUFBSSxDQUFDLEtBQUtILGVBQVYsRUFBMkIsS0FBSzdDLElBQUw7O0FBRTNCLFNBQUssSUFBSWtCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcwQixRQUFwQixFQUE4QixFQUFFMUIsQ0FBaEMsRUFBbUM7QUFDL0IsV0FBSzRCLEtBQUw7O0FBQ0EsWUFBTSxLQUFLQyxVQUFYO0FBQ0g7O0FBRUQsV0FBTyxLQUFLQSxVQUFaO0FBQ0g7O0FBRURELE9BQUssR0FBRztBQUNKLFVBQU14RCxVQUFVLEdBQUcsS0FBS00sU0FBTCxDQUFlLFlBQWYsQ0FBbkI7QUFFQSxRQUFJaUIsZUFBZSxHQUFHLEtBQUttQixnQkFBM0I7QUFDQSxRQUFJbEIsdUJBQXVCLEdBQUcsS0FBS21CLHdCQUFuQztBQUNBLFFBQUloQyxlQUFlLEdBQUcsS0FBS2lDLGdCQUEzQjtBQUNBLFFBQUlYLHVCQUF1QixHQUFHLEtBQUtZLHdCQUFuQztBQUNBLFFBQUljLElBQUksR0FBRyxLQUFLWixLQUFoQjtBQUNBLFFBQUlULENBQUMsR0FBRyxLQUFLVSxFQUFiO0FBQ0EsUUFBSTlCLENBQUMsR0FBRyxLQUFLQSxDQUFiO0FBRUEsUUFBSWtCLEtBQUssR0FBR1osdUJBQXVCLENBQUNhLEdBQXhCLENBQTRCSix1QkFBNUIsQ0FBWjtBQUNBLFFBQUkyQixTQUFTLEdBQUd4QixLQUFLLENBQUN5QixHQUFOLENBQVVGLElBQVYsQ0FBaEI7QUFDQSxRQUFJRyxDQUFDLEdBQUcxQixLQUFLLENBQUN5QixHQUFOLENBQVUzQyxDQUFWLEVBQWFtQixHQUFiLENBQWlCbkIsQ0FBQyxDQUFDdUIsSUFBRixDQUFPbUIsU0FBUCxDQUFqQixDQUFSOztBQUNBLFFBQUlHLEtBQUssR0FBR3ZDLHVCQUF1QixDQUFDVSxNQUF4QixDQUErQixDQUEvQixFQUFrQyxDQUFDakMsQ0FBRCxFQUFJa0MsQ0FBSixLQUFVSSxJQUFJLENBQUNDLEdBQUwsQ0FBU3ZDLENBQVQsRUFBWWtDLENBQVosQ0FBNUMsQ0FBWjs7QUFDQSxRQUFJNkIsRUFBRSxHQUFHOUMsQ0FBQyxDQUFDZ0IsTUFBRixDQUFTLENBQVQsRUFBWSxDQUFDakMsQ0FBRCxFQUFJa0MsQ0FBSixLQUFVSSxJQUFJLENBQUNDLEdBQUwsQ0FBU3ZDLENBQVQsRUFBWWtDLENBQVosQ0FBdEIsQ0FBVDs7QUFDQSxRQUFJOEIsQ0FBQyxHQUFHRixLQUFLLENBQUNGLEdBQU4sQ0FBVUcsRUFBVixFQUFjM0IsR0FBZCxDQUFrQnVCLFNBQWxCLEVBQTZCdkIsR0FBN0IsQ0FBaUNuQixDQUFDLENBQUN1QixJQUFGLENBQU8sQ0FBUCxFQUFVQSxJQUFWLENBQWVzQixLQUFLLENBQUNGLEdBQU4sQ0FBVTNDLENBQVYsQ0FBZixDQUFqQyxFQUErRGdELEdBQS9ELENBQW1FRixFQUFFLENBQUN2QixJQUFILENBQVFzQixLQUFLLENBQUNGLEdBQU4sQ0FBVUYsSUFBVixDQUFSLENBQW5FLENBQVI7QUFDQU0sS0FBQyxHQUFHQSxDQUFDLENBQUMvQixNQUFGLENBQVMsSUFBVCxFQUFnQmpDLENBQUQsSUFBT3NDLElBQUksQ0FBQzRCLEdBQUwsQ0FBU2xFLENBQVQsQ0FBdEIsQ0FBSjtBQUNBLFFBQUltRSxDQUFDLEdBQUdOLENBQUMsQ0FBQ08sTUFBRixDQUFTSixDQUFULENBQVI7QUFDQSxRQUFJSyxLQUFLLEdBQUdwRCxDQUFDLENBQUNxRCxLQUFGLEVBQVo7O0FBRUEsU0FBSyxJQUFJM0MsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzVCLFVBQXBCLEVBQWdDLEVBQUU0QixDQUFsQyxFQUFxQztBQUNqQ1YsT0FBQyxHQUFHb0QsS0FBSyxDQUFDSixHQUFOLENBQVVFLENBQVYsQ0FBSjtBQUNBN0MscUJBQWUsR0FBRyxLQUFLMkIsaUJBQUwsQ0FBdUJoQyxDQUF2QixDQUFsQjtBQUNBTSw2QkFBdUIsR0FBR0QsZUFBZSxDQUFDVyxNQUFoQixDQUF1QixDQUF2QixFQUEwQixDQUFDakMsQ0FBRCxFQUFJa0MsQ0FBSixLQUFVQSxDQUFDLEdBQUdsQyxDQUF4QyxDQUExQjtBQUNBbUMsV0FBSyxHQUFHekIsZUFBZSxDQUFDMEIsR0FBaEIsQ0FBb0JkLGVBQXBCLENBQVI7O0FBQ0EsVUFBSWlELEtBQUssR0FBR3BDLEtBQUssQ0FBQ0YsTUFBTixDQUFhLENBQWIsRUFBZ0IsQ0FBQ2pDLENBQUQsRUFBSWtDLENBQUosS0FBVUksSUFBSSxDQUFDQyxHQUFMLENBQVN2QyxDQUFULEVBQVlrQyxDQUFaLENBQTFCLEVBQTBDTSxJQUExQyxDQUErQ1IsdUJBQS9DLEVBQXdFZ0IsR0FBcEY7O0FBQ0EsVUFBSXVCLEtBQUssR0FBR2xDLENBQVosRUFBZTtBQUNYO0FBQ0gsT0FGRCxNQUVPO0FBQ0g4QixTQUFDLEdBQUdBLENBQUMsQ0FBQzNCLElBQUYsQ0FBTyxFQUFQLENBQUo7QUFDSDtBQUNKOztBQUVELFNBQUt2QixDQUFMLEdBQVNBLENBQVQ7QUFDSDs7QUEzSjBCIiwiZmlsZSI6Ii4vZGltcmVkL1NBTU1PTi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdHJpeCB9IGZyb20gXCIuLi9tYXRyaXgvaW5kZXhcIjtcclxuaW1wb3J0IHsgZXVjbGlkZWFuIH0gZnJvbSBcIi4uL21ldHJpY3MvaW5kZXhcIjtcclxuaW1wb3J0IHsgRFIgfSBmcm9tIFwiLi9EUi5qc1wiO1xyXG5pbXBvcnQgeyBQQ0EgfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNBTU1PTiBleHRlbmRzIERSIHtcclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6ZGltZW5zaW9uYWxpdHlfcmVkdWN0aW9uXHJcbiAgICAgKiBAYWxpYXMgU0FNTU9OXHJcbiAgICAgKiBAcGFyYW0ge01hdHJpeH0gWCAtIHRoZSBoaWdoLWRpbWVuc2lvbmFsIGRhdGEuIFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtkID0gMl0gLSB0aGUgZGltZW5zaW9uYWxpdHkgb2YgdGhlIHByb2plY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbbWV0cmljID0gZXVjbGlkZWFuXSAtIHRoZSBtZXRyaWMgd2hpY2ggZGVmaW5lcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzLiAgXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3NlZWQgPSAxMjEyXSAtIHRoZSBkaW1lbnNpb25hbGl0eSBvZiB0aGUgcHJvamVjdGlvbi5cclxuICAgICAqIEByZXR1cm5zIHtTQU1NT059XHJcbiAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2FyeGl2Lm9yZy9wZGYvMjAwOS4wMTUxMi5wZGZ9XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFgsIG1heF9oYWx2ZXM9NSwgZD0yLCBtZXRyaWM9ZXVjbGlkZWFuLCBzZWVkPTEyMTIpIHtcclxuICAgICAgICBzdXBlcihYLCBkLCBtZXRyaWMsIHNlZWQpXHJcbiAgICAgICAgc3VwZXIucGFyYW1ldGVyX2xpc3QgPSBbXCJtYXhfaGFsdmVzXCJdO1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVyKFwibWF4X2hhbHZlc1wiLCBtYXhfaGFsdmVzKTtcclxuICAgICAgICBbIHRoaXMuX04sIHRoaXMuX0QgXSA9IHRoaXMuWC5zaGFwZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGluaXRpYWxpemVzIFNBTU1PTi4gU2V0cyBhbGwgcHJvamN0ZWQgcG9pbnRzIHRvIHplcm8sIGFuZCBjb21wdXRlcyBhIG1pbmltdW0gc3Bhbm5pbmcgdHJlZS5cclxuICAgICAqL1xyXG4gICAgaW5pdChEUj1cInJhbmRvbVwiLCBEaXN0YW5jZV9tYXRyaXg9bnVsbCkge1xyXG4gICAgICAgIGNvbnN0IE4gPSB0aGlzLl9OO1xyXG4gICAgICAgIGNvbnN0IGQgPSB0aGlzLl9kO1xyXG5cclxuICAgICAgICBpZiAoRFIgPT09IFwicmFuZG9tXCIpIHtcclxuICAgICAgICAgICAgY29uc3QgcmFuZG9taXplciA9IHRoaXMuX3JhbmRvbWl6ZXI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJhbmRvbWl6ZXIpXHJcbiAgICAgICAgICAgIHRoaXMuWSA9IG5ldyBNYXRyaXgoTiwgZCwgKCkgPT4gcmFuZG9taXplci5yYW5kb20pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuWSA9IERSLnRyYW5zZm9ybSh0aGlzLlgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBZID0gdGhpcy5ZO1xyXG5cclxuICAgICAgICBpZiAoIURpc3RhbmNlX21hdHJpeCkge1xyXG4gICAgICAgICAgICBEaXN0YW5jZV9tYXRyaXggPSBuZXcgTWF0cml4KE4sIE4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbWV0cmljID0gdGhpcy5fbWV0cmljO1xyXG4gICAgICAgIGxldCBkaXN0YW5jZV9tYXRyaXggPSBuZXcgTWF0cml4KE4sIE4pO1xyXG4gICAgICAgIGxldCBkaXN0YW5jZV9pbnZlcnNlX21hdHJpeCA9IG5ldyBNYXRyaXgoTiwgTik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgWV9pID0gWS5yb3coaSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSBpOyBqIDwgTjsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGlzdGFuY2UgPSBpID09PSBqID8gMSA6IG1ldHJpYyhZX2ksIFkucm93KGopKTtcclxuICAgICAgICAgICAgICAgIGxldCBkaXN0YW5jZV9pbnZlcnNlID0gMSAvIGRpc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgZGlzdGFuY2VfbWF0cml4LnNldF9lbnRyeShpLCBqLCBkaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBkaXN0YW5jZV9tYXRyaXguc2V0X2VudHJ5KGosIGksIGRpc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIGRpc3RhbmNlX2ludmVyc2VfbWF0cml4LnNldF9lbnRyeShpLCBqLCBkaXN0YW5jZV9pbnZlcnNlKTtcclxuICAgICAgICAgICAgICAgIGRpc3RhbmNlX2ludmVyc2VfbWF0cml4LnNldF9lbnRyeShqLCBpLCBkaXN0YW5jZV9pbnZlcnNlKTtcclxuICAgICAgICAgICAgICAgIGlmICghRGlzdGFuY2VfbWF0cml4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IERpc3RhbmNlID0gaSA9PT0gaiA/IDEgOiBtZXRyaWMoWC5yb3coaSksIFgucm93KGopKTtcclxuICAgICAgICAgICAgICAgICAgICBEaXN0YW5jZV9tYXRyaXguc2V0X2VudHJ5KGksIGosIERpc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICBEaXN0YW5jZV9tYXRyaXguc2V0X2VudHJ5KGosIGksIERpc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgRGlzdGFuY2VfaW52ZXJzZV9tYXRyaXggPSBEaXN0YW5jZV9tYXRyaXguX2FwcGx5KDEsIChkLCB2KSA9PiB2IC8gZCk7XHJcbiAgICAgICAgbGV0IGRlbHRhID0gRGlzdGFuY2VfbWF0cml4LnN1YihkaXN0YW5jZV9tYXRyaXgpO1xyXG4gICAgICAgIGxldCBFID0gZGVsdGEuX2FwcGx5KDIsIChkLCB2KSA9PiBNYXRoLnBvdyhkLCB2KSkubXVsdChEaXN0YW5jZV9pbnZlcnNlX21hdHJpeCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coRSlcclxuICAgICAgICB0aGlzLl9kaXN0YW5jZV9tYXRyaXggPSBkaXN0YW5jZV9tYXRyaXg7XHJcbiAgICAgICAgdGhpcy5fZGlzdGFuY2VfaW52ZXJzZV9tYXRyaXggPSBkaXN0YW5jZV9pbnZlcnNlX21hdHJpeDtcclxuICAgICAgICB0aGlzLl9EaXN0YW5jZV9tYXRyaXggPSBEaXN0YW5jZV9tYXRyaXg7XHJcbiAgICAgICAgdGhpcy5fRGlzdGFuY2VfaW52ZXJzZV9tYXRyaXggPSBkaXN0YW5jZV9pbnZlcnNlX21hdHJpeDtcclxuICAgICAgICB0aGlzLl9kZWx0YSA9IGRlbHRhO1xyXG4gICAgICAgIHRoaXMuX29uZXMgPSBuZXcgTWF0cml4KE4sIGQsIDEpO1xyXG4gICAgICAgIHRoaXMuX0UgPSBFLnN1bTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHtNYXRyaXh9IEFcclxuICAgICAqIEByZXR1cm5zIHtNYXRyaXh9IFxyXG4gICAgICovXHJcbiAgICBfX2Rpc3RhbmNlX21hdHJpeChBKSB7XHJcbiAgICAgICAgY29uc3QgbWV0cmljID0gdGhpcy5fbWV0cmljO1xyXG4gICAgICAgIGNvbnN0IE4gPSBBLnNoYXBlWzBdO1xyXG4gICAgICAgIGNvbnN0IEQgPSBuZXcgTWF0cml4KE4sIE4pO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IEFfaSA9IEEucm93KGkpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gaTsgaiA8IE47ICsraikge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRpc3RhbmNlID0gKGkgPT09IGogPyAxIDogbWV0cmljKEFfaSwgQS5yb3coaikpKTtcclxuICAgICAgICAgICAgICAgIEQuc2V0X2VudHJ5KGksIGosIGRpc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIEQuc2V0X2VudHJ5KGosIGksIGRpc3RhbmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gRDsgICAgICAgICAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSBpbnB1dGRhdGEge0BsaW5rIFh9IHRvIGRpbWVuaW9uYWxpdHkgMi5cclxuICAgICAqL1xyXG4gICAgdHJhbnNmb3JtKG1heF9pdGVyPTIwKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc19pbml0aWFsaXplZCkgdGhpcy5pbml0KCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF4X2l0ZXI7ICsraikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhbLi4udGhpcy5ZXSlcclxuICAgICAgICAgICAgdGhpcy5fc3RlcCgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgICogZ2VuZXJhdG9yKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNfaW5pdGlhbGl6ZWQpIHRoaXMuaW5pdCgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1heF9pdGVyOyArK2opIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RlcCgpXHJcbiAgICAgICAgICAgIHlpZWxkIHRoaXMucHJvamVjdGlvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnByb2plY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgX3N0ZXAoKSB7XHJcbiAgICAgICAgY29uc3QgbWF4X2hhbHZlcyA9IHRoaXMucGFyYW1ldGVyKFwibWF4X2hhbHZlc1wiKTtcclxuXHJcbiAgICAgICAgbGV0IGRpc3RhbmNlX21hdHJpeCA9IHRoaXMuX2Rpc3RhbmNlX21hdHJpeDtcclxuICAgICAgICBsZXQgZGlzdGFuY2VfaW52ZXJzZV9tYXRyaXggPSB0aGlzLl9kaXN0YW5jZV9pbnZlcnNlX21hdHJpeDtcclxuICAgICAgICBsZXQgRGlzdGFuY2VfbWF0cml4ID0gdGhpcy5fRGlzdGFuY2VfbWF0cml4O1xyXG4gICAgICAgIGxldCBEaXN0YW5jZV9pbnZlcnNlX21hdHJpeCA9IHRoaXMuX0Rpc3RhbmNlX2ludmVyc2VfbWF0cml4O1xyXG4gICAgICAgIGxldCBvbmVzID0gdGhpcy5fb25lcztcclxuICAgICAgICBsZXQgRSA9IHRoaXMuX0U7XHJcbiAgICAgICAgbGV0IFkgPSB0aGlzLlk7XHJcblxyXG4gICAgICAgIGxldCBkZWx0YSA9IGRpc3RhbmNlX2ludmVyc2VfbWF0cml4LnN1YihEaXN0YW5jZV9pbnZlcnNlX21hdHJpeCk7XHJcbiAgICAgICAgbGV0IGRlbHRhX29uZSA9IGRlbHRhLmRvdChvbmVzKTtcclxuICAgICAgICBsZXQgZyA9IGRlbHRhLmRvdChZKS5zdWIoWS5tdWx0KGRlbHRhX29uZSkpO1xyXG4gICAgICAgIGxldCBkaW52MyA9IGRpc3RhbmNlX2ludmVyc2VfbWF0cml4Ll9hcHBseSgzLCAoZCwgdikgPT4gTWF0aC5wb3coZCwgdikpO1xyXG4gICAgICAgIGxldCBZMiA9IFkuX2FwcGx5KDIsIChkLCB2KSA9PiBNYXRoLnBvdyhkLCB2KSk7XHJcbiAgICAgICAgbGV0IEggPSBkaW52My5kb3QoWTIpLnN1YihkZWx0YV9vbmUpLnN1YihZLm11bHQoMikubXVsdChkaW52My5kb3QoWSkpKS5hZGQoWTIubXVsdChkaW52My5kb3Qob25lcykpKTtcclxuICAgICAgICBIID0gSC5fYXBwbHkobnVsbCwgKGQpID0+IE1hdGguYWJzKGQpKTtcclxuICAgICAgICBsZXQgcyA9IGcuZGl2aWRlKEgpO1xyXG4gICAgICAgIGxldCBZX29sZCA9IFkuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXhfaGFsdmVzOyArK2opIHtcclxuICAgICAgICAgICAgWSA9IFlfb2xkLmFkZChzKTtcclxuICAgICAgICAgICAgZGlzdGFuY2VfbWF0cml4ID0gdGhpcy5fX2Rpc3RhbmNlX21hdHJpeChZKTtcclxuICAgICAgICAgICAgZGlzdGFuY2VfaW52ZXJzZV9tYXRyaXggPSBkaXN0YW5jZV9tYXRyaXguX2FwcGx5KDEsIChkLCB2KSA9PiB2IC8gZCk7XHJcbiAgICAgICAgICAgIGRlbHRhID0gRGlzdGFuY2VfbWF0cml4LnN1YihkaXN0YW5jZV9tYXRyaXgpO1xyXG4gICAgICAgICAgICBsZXQgRV9uZXcgPSBkZWx0YS5fYXBwbHkoMiwgKGQsIHYpID0+IE1hdGgucG93KGQsIHYpKS5tdWx0KERpc3RhbmNlX2ludmVyc2VfbWF0cml4KS5zdW07XHJcbiAgICAgICAgICAgIGlmIChFX25ldyA8IEUpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcyA9IHMubXVsdCguNSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuWSA9IFk7XHJcbiAgICB9XHJcbn0gIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./dimred/SAMMON.js\n");

/***/ }),

/***/ "./dimred/TSNE.js":
/*!************************!*\
  !*** ./dimred/TSNE.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TSNE\": () => (/* binding */ TSNE)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n\n\n\n/**\r\n * @class\r\n * @alias TSNE\r\n */\n\nclass TSNE extends _DR_js__WEBPACK_IMPORTED_MODULE_2__.DR {\n  /**\r\n   * \r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias TSNE\r\n   * @param {Matrix} X - the high-dimensional data. \r\n   * @param {Number} [perplexity = 50] - perplexity.\r\n   * @param {Number} [epsilon = 10] - learning parameter.\r\n   * @param {Number} [d = 2] - the dimensionality of the projection.\r\n   * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.  \r\n   * @param {Number} [seed = 1212] - the dimensionality of the projection.\r\n   * @returns {TSNE}\r\n   */\n  constructor(X, perplexity = 50, epsilon = 10, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n    super.parameter_list = [\"perplexity\", \"epsilon\"];\n    [this._N, this._D] = this.X.shape;\n    this.parameter(\"perplexity\", Math.min(perplexity, this._N - 1));\n    this.parameter(\"epsilon\", epsilon);\n    this._iter = 0;\n    this.Y = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(this._N, this._d, () => this._randomizer.random);\n    return this;\n  }\n\n  init(distance_matrix = null) {\n    // init\n    const Htarget = Math.log(this._perplexity);\n    const N = this._N;\n    const D = this._D;\n    const metric = this._metric;\n    const X = this.X;\n    let Delta;\n\n    if (distance_matrix) {\n      Delta = distance_matrix;\n    } else {\n      Delta = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, N);\n\n      for (let i = 0; i < N; ++i) {\n        const X_i = X.row(i);\n\n        for (let j = i + 1; j < N; ++j) {\n          const distance = metric(X_i, X.row(j));\n          Delta.set_entry(i, j, distance);\n          Delta.set_entry(j, i, distance);\n        }\n      }\n    }\n\n    const P = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, N, \"zeros\");\n    this._ystep = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, D, \"zeros\");\n    this._gains = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, D, 1); // search for fitting sigma\n\n    let prow = new Array(N).fill(0);\n    const tol = 1e-4;\n    const maxtries = 50;\n\n    for (let i = 0; i < N; ++i) {\n      let betamin = -Infinity;\n      let betamax = Infinity;\n      let beta = 1;\n      let done = false;\n      let num = 0;\n\n      while (!done) {\n        let psum = 0;\n\n        for (let j = 0; j < N; ++j) {\n          let pj = Math.exp(-Delta.entry(i, j) * beta);\n          if (i === j) pj = 0;\n          prow[j] = pj;\n          psum += pj;\n        }\n\n        let Hhere = 0;\n\n        for (let j = 0; j < N; ++j) {\n          let pj = psum === 0 ? 0 : prow[j] / psum;\n          prow[j] = pj;\n\n          if (pj > 1e-7) {\n            Hhere -= pj * Math.log(pj);\n          }\n        }\n\n        if (Hhere > Htarget) {\n          betamin = beta;\n          beta = betamax === Infinity ? beta * 2 : (beta + betamax) / 2;\n        } else {\n          betamax = beta;\n          beta = betamin === -Infinity ? beta / 2 : (beta + betamin) / 2;\n        }\n\n        ++num;\n        if (Math.abs(Hhere - Htarget) < tol) done = true;\n        if (num >= maxtries) done = true;\n      }\n\n      for (let j = 0; j < N; ++j) {\n        P.set_entry(i, j, prow[j]);\n      }\n    } //compute probabilities\n\n\n    const Pout = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, N, \"zeros\");\n    const N2 = N * 2;\n\n    for (let i = 0; i < N; ++i) {\n      for (let j = i; j < N; ++j) {\n        const p = Math.max((P.entry(i, j) + P.entry(j, i)) / N2, 1e-100);\n        Pout.set_entry(i, j, p);\n        Pout.set_entry(j, i, p);\n      }\n    }\n\n    this._P = Pout;\n    return this;\n  }\n\n  transform(iterations = 500) {\n    this.check_init();\n\n    for (let i = 0; i < iterations; ++i) {\n      this.next();\n    }\n\n    return this.projection;\n  }\n\n  *generator() {\n    this.check_init();\n\n    while (true) {\n      this.next();\n      yield this.projection;\n    }\n  } // perform optimization\n\n\n  next() {\n    const iter = ++this._iter;\n    const P = this._P;\n    const ystep = this._ystep;\n    const gains = this._gains;\n    const N = this._N;\n    const epsilon = this._epsilon;\n    const dim = this._d;\n    let Y = this.Y; //calc cost gradient;\n\n    const pmul = iter < 100 ? 4 : 1; // compute Q dist (unnormalized)\n\n    const Qu = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, N, \"zeros\");\n    let qsum = 0;\n\n    for (let i = 0; i < N; ++i) {\n      for (let j = i + 1; j < N; ++j) {\n        let dsum = 0;\n\n        for (let d = 0; d < dim; ++d) {\n          const dhere = Y.entry(i, d) - Y.entry(j, d);\n          dsum += dhere * dhere;\n        }\n\n        const qu = 1 / (1 + dsum);\n        Qu.set_entry(i, j, qu);\n        Qu.set_entry(j, i, qu);\n        qsum += 2 * qu;\n      }\n    } // normalize Q dist\n\n\n    const Q = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, N, 0);\n\n    for (let i = 0; i < N; ++i) {\n      for (let j = i + 1; j < N; ++j) {\n        const val = Math.max(Qu.entry(i, j) / qsum, 1e-100);\n        Q.set_entry(i, j, val);\n        Q.set_entry(j, i, val);\n      }\n    }\n\n    const grad = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, dim, \"zeros\");\n\n    for (let i = 0; i < N; ++i) {\n      for (let j = 0; j < N; ++j) {\n        const premult = 4 * (pmul * P.entry(i, j) - Q.entry(i, j)) * Qu.entry(i, j);\n\n        for (let d = 0; d < dim; ++d) {\n          grad.set_entry(i, d, grad.entry(i, d) + premult * (Y.entry(i, d) - Y.entry(j, d)));\n        }\n      }\n    } // perform gradient step\n\n\n    let ymean = new Float64Array(dim);\n\n    for (let i = 0; i < N; ++i) {\n      for (let d = 0; d < dim; ++d) {\n        const gid = grad.entry(i, d);\n        const sid = ystep.entry(i, d);\n        const gainid = gains.entry(i, d);\n        let newgain = Math.sign(gid) === Math.sign(sid) ? gainid * .8 : gainid + .2;\n        if (newgain < .01) newgain = .01;\n        gains.set_entry(i, d, newgain);\n        const momval = iter < 250 ? .5 : .8;\n        const newsid = momval * sid - epsilon * newgain * gid;\n        ystep.set_entry(i, d, newsid);\n        Y.set_entry(i, d, Y.entry(i, d) + newsid);\n        ymean[d] += Y.entry(i, d);\n      }\n    }\n\n    for (let i = 0; i < N; ++i) {\n      for (let d = 0; d < 2; ++d) {\n        Y.set_entry(i, d, Y.entry(i, d) - ymean[d] / N);\n      }\n    }\n\n    return this.Y;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dimred/TSNE.js\n");

/***/ }),

/***/ "./dimred/TopoMap.js":
/*!***************************!*\
  !*** ./dimred/TopoMap.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TopoMap\": () => (/* binding */ TopoMap)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nclass TopoMap extends _DR_js__WEBPACK_IMPORTED_MODULE_2__.DR {\n  /**\r\n   * \r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias Topomap\r\n   * @param {Matrix} X - the high-dimensional data. \r\n   * @param {Number} [d = 2] - the dimensionality of the projection.\r\n   * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.  \r\n   * @param {Number} [seed = 1212] - the dimensionality of the projection.\r\n   * @returns {TopoMap}\r\n   * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\r\n   */\n  constructor(X, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n\n    _defineProperty(this, \"__align_components\", (u, v, w) => {\n      const points_u = [...u.__disjoint_set.children];\n      const points_v = [...v.__disjoint_set.children];\n\n      const hull_u = this.__hull(points_u);\n\n      const hull_v = this.__hull(points_v);\n\n      const t_u = this.__align_hull(hull_u, u, false);\n\n      const t_v = this.__align_hull(hull_v, v, true);\n\n      this.__transform_component(points_u, t_u, 0);\n\n      this.__transform_component(points_v, t_v, w);\n    });\n\n    super.parameter_list = [];\n    [this._N, this._D] = this.X.shape;\n    this._distance_matrix = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(this._N, this._N, 0);\n    return this;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  __lazy_distance_matrix(i, j, metric) {\n    const D = this._distance_matrix;\n    const X = this.X;\n    const D_ij = D.entry(i, j);\n\n    if (D_ij === 0) {\n      let dist = metric(X.row(i), X.row(j));\n      D.set_entry(i, j, dist);\n      D.set_entry(j, i, dist);\n      return dist;\n    }\n\n    return D_ij;\n  }\n  /**\r\n   * Computes the minimum spanning tree, using a given metric\r\n   * @private\r\n   * @param {Function} metric \r\n   * @see {@link https://en.wikipedia.org/wiki/Kruskal%27s_algorithm}\r\n   */\n\n\n  _make_minimum_spanning_tree(metric = _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean) {\n    const N = this._N;\n    const X = [...this.X];\n    let disjoint_set = new DisjointSet(X);\n    const F = [];\n    let E = [];\n\n    for (let i = 0; i < N; ++i) {\n      for (let j = i + 1; j < N; ++j) {\n        E.push([i, j, this.__lazy_distance_matrix(i, j, metric)]);\n      }\n    }\n\n    E = E.sort((a, b) => a[2] - b[2]);\n\n    for (const [u, v, w] of E) {\n      const set_u = disjoint_set.find(X[u]);\n      const set_v = disjoint_set.find(X[v]);\n\n      if (set_u !== set_v) {\n        F.push([u, v, w]);\n        disjoint_set.union(set_u, set_v);\n      }\n    }\n\n    return F.sort((a, b) => a[2] - b[2]);\n  }\n  /**\r\n   * initializes TopoMap. Sets all projcted points to zero, and computes a minimum spanning tree.\r\n   */\n\n\n  init() {\n    this.Y = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(this._N, this._d, 0);\n    this._Emst = this._make_minimum_spanning_tree(this._metric);\n    this._is_initialized = true;\n    return this;\n  }\n  /**\r\n   * Returns true if Point C is left of line AB.\r\n   * @private\r\n   * @param {Array} PointA - Point A of line AB\r\n   * @param {Array} PointB - Point B of line AB\r\n   * @param {Array} PointC - Point C\r\n   * @returns {Boolean}\r\n   */\n\n\n  __hull_cross([ax, ay], [bx, by], [sx, sy]) {\n    return (bx - ax) * (sy - ay) - (by - ay) * (sx - ax) <= 0;\n  }\n  /**\r\n   * Computes the convex hull of the set of Points S\r\n   * @private\r\n   * @param {Array} S - Set of Points.\r\n   * @see {@link https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript}\r\n   * @returns {Array} convex hull of S. Starts at the bottom-most point and continues counter-clockwise.\r\n   */\n\n\n  __hull(S) {\n    const points = S.sort(([x1, y1], [x2, y2]) => y1 - y2 || x1 - x2);\n    const N = points.length;\n    if (N <= 2) return points;\n    const lower = [];\n\n    for (let i = 0; i < N; ++i) {\n      while (lower.length >= 2 && this.__hull_cross(lower[lower.length - 2], lower[lower.length - 1], points[i])) {\n        lower.pop();\n      }\n\n      lower.push(points[i]);\n    }\n\n    const upper = [];\n\n    for (let i = N - 1; i >= 0; --i) {\n      while (upper.length >= 2 && this.__hull_cross(upper[upper.length - 2], upper[upper.length - 1], points[i])) {\n        upper.pop();\n      }\n\n      upper.push(points[i]);\n    }\n\n    upper.pop();\n    lower.pop();\n    return lower.concat(upper);\n  }\n  /**\r\n   * Finds the angle to rotate Point A and B to lie on a line parallel to the x-axis.\r\n   * @private\r\n   * @param {Array} PointA \r\n   * @param {Array} PointB\r\n   * @return {Object} Object containing the sinus- and cosinus-values for a rotation.  \r\n   */\n\n\n  __findAngle([p1x, p1y], [p2x, p2y]) {\n    const n = (0,_metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean)([p1x, p1y], [p2x, p2y]);\n    if (n === 0) return {\n      \"sin\": 0,\n      \"cos\": 1\n    };\n    const vec = [(p2x - p1x) / n, (p2y - p1y) / n];\n    const cos = vec[0];\n    let sin = Math.sqrt(1 - cos * cos);\n    sin = vec[1] >= 0 ? -sin : sin;\n    return {\n      \"sin\": sin,\n      \"cos\": cos\n    };\n  }\n  /**\r\n   * @private\r\n   * @param {Array} hull \r\n   * @param {Array} p \r\n   * @param {Bool} topEdge\r\n   */\n\n\n  __align_hull(hull, p, topEdge) {\n    let v = -1;\n    let d2;\n\n    for (let i = 0; i < hull.length; ++i) {\n      const d = (0,_metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean)(hull[i], p);\n\n      if (v === -1) {\n        d2 = d;\n        v = i;\n      } else {\n        if (d2 > d) {\n          d2 = d;\n          v = i;\n        }\n      }\n    }\n\n    let v1;\n    let v2;\n\n    if (topEdge) {\n      v1 = hull[v];\n      v2 = hull[(v + 1) % hull.length];\n    } else {\n      if (v == 0) v = hull.length - 1;\n      v1 = hull[v];\n      v2 = hull[(v - 1) % hull.length];\n    }\n\n    const transformation = {\n      \"tx\": -hull[v][0],\n      \"ty\": -hull[v][1]\n    };\n\n    if (hull.length >= 2) {\n      const {\n        sin,\n        cos\n      } = this.__findAngle(v1, v2);\n\n      transformation.sin = sin;\n      transformation.cos = cos;\n    } else {\n      transformation.sin = 0;\n      transformation.cos = 1;\n    }\n\n    return transformation;\n  }\n  /**\r\n   * @private\r\n   * @param {Array} Point - The point which should get transformed.\r\n   * @param {Object} Transformation - contains the values for translation and rotation.\r\n   */\n\n\n  __transform([px, py], {\n    tx,\n    ty,\n    sin,\n    cos\n  }) {\n    let x = px + tx;\n    let y = py + ty;\n    let xx = x * cos - y * sin;\n    let yy = x * sin + y * cos;\n    return [xx, yy];\n  }\n  /**\r\n   * Calls {@link __transform} for each point in Set C\r\n   * @private\r\n   * @param {Array} C - Set of points.\r\n   * @param {Object} t - Transform object. \r\n   * @param {Number} yOffset - value to offset set C.\r\n   */\n\n\n  __transform_component(C, t, yOffset) {\n    const N = C.length;\n\n    for (let i = 0; i < N; ++i) {\n      const c = C[i];\n\n      const [cx, cy] = this.__transform(c, t);\n\n      c[0] = cx;\n      c[1] = cy + yOffset;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {Array} u - point u\r\n   * @param {Array} v - point v\r\n   * @param {Number} w - edge weight w\r\n   */\n\n\n  /**\r\n   * Transforms the inputdata {@link X} to dimenionality 2.\r\n   */\n  transform() {\n    if (!this._is_initialized) this.init();\n    const Emst = this._Emst;\n    const Y = [...this.Y];\n    const components = new DisjointSet(Y.map((y, i) => {\n      y.i = i;\n      return y;\n    }));\n\n    for (const [u, v, w] of Emst) {\n      const component_u = components.find(Y[u]);\n      const component_v = components.find(Y[v]);\n      if (component_u === component_v) continue;\n\n      this.__align_components(component_u, component_v, w);\n\n      components.union(component_u, component_v);\n    }\n\n    return this.projection;\n  }\n\n  *generator() {\n    if (!this._is_initialized) this.init();\n    const Emst = this._Emst;\n    const Y = [...this.Y];\n    const components = new DisjointSet(Y.map((y, i) => {\n      y.i = i;\n      return y;\n    }));\n\n    for (const [u, v, w] of Emst) {\n      const component_u = components.find(Y[u]);\n      const component_v = components.find(Y[v]);\n      if (component_u === component_v) continue;\n\n      this.__align_components(component_u, component_v, w);\n\n      components.union(component_u, component_v);\n      /* let ok = true\r\n      Y.forEach(([x, y]) => ok = ok && !isNaN(x) && !isNaN(y))\r\n      if (!ok) {\r\n          console.log(...Y) \r\n          throw \"error\" \r\n      } */\n\n      yield this.projection;\n    }\n\n    return this.projection;\n  }\n\n}\n/**\r\n * @see {@link https://en.wikipedia.org/wiki/Disjoint-set_data_structure}\r\n */\n\nclass DisjointSet {\n  constructor(elements = null) {\n    this._list = new Set();\n\n    if (elements) {\n      for (const e of elements) {\n        this.make_set(e);\n      }\n    }\n\n    return this;\n  }\n\n  make_set(x) {\n    const list = this._list;\n\n    if (!list.has(x)) {\n      list.add(x);\n      x.__disjoint_set = {};\n      x.__disjoint_set.parent = x;\n      x.__disjoint_set.children = new Set([x]);\n      x.__disjoint_set.size = 1;\n    }\n\n    return this;\n  }\n\n  find(x) {\n    const list = this._list;\n\n    if (list.has(x)) {\n      if (x.__disjoint_set.parent !== x) {\n        x.__disjoint_set.children.add(...x);\n\n        x.__disjoint_set.parent = this.find(x.__disjoint_set.parent);\n        return x.__disjoint_set.parent;\n      } else {\n        return x;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  union(x, y) {\n    let node_x = this.find(x);\n    let node_y = this.find(y);\n    if (node_x === node_y) return this;\n    if (node_x.__disjoint_set.size < node_y.__disjoint_set.size) [node_x, node_y] = [node_y, node_x];\n    node_y.__disjoint_set.parent = node_x; // keep track of children?\n\n    node_y.__disjoint_set.children.forEach(node_x.__disjoint_set.children.add, node_x.__disjoint_set.children);\n\n    node_x.__disjoint_set.size += node_y.__disjoint_set.size;\n    return this;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dimred/TopoMap.js\n");

/***/ }),

/***/ "./dimred/TriMap.js":
/*!**************************!*\
  !*** ./dimred/TriMap.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TriMap\": () => (/* binding */ TriMap)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _PCA__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PCA */ \"./dimred/PCA.js\");\n/* harmony import */ var _knn_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../knn/index */ \"./knn/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n\n\n\n\n\n/**\r\n * @class\r\n * @alias TriMap\r\n */\n\nclass TriMap extends _DR_js__WEBPACK_IMPORTED_MODULE_4__.DR {\n  /**\r\n   * \r\n   * @constructor\r\n   * @memberof module:dimensionality_reduction\r\n   * @alias TriMap\r\n   * @param {Matrix} X - the high-dimensional data. \r\n   * @param {Number} [weight_adj = 500] - scaling factor.\r\n   * @param {Number} [c = 5] - number of triplets multiplier.\r\n   * @param {Number} [d = 2] - the dimensionality of the projection.\r\n   * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.  \r\n   * @param {Number} [seed = 1212] - the dimensionality of the projection.\r\n   * @returns {TriMap}\r\n   * @see {@link https://arxiv.org/pdf/1910.00204v1.pdf}\r\n   * @see {@link https://github.com/eamid/trimap}\r\n   */\n  constructor(X, weight_adj = 500, c = 5, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n    super.parameter_list = [\"weight_adj\", \"c\"];\n    this.parameter(\"weight_adj\", weight_adj);\n    this.parameter(\"c\", c);\n    return this;\n  }\n  /**\r\n   * \r\n   * @param {Matrix} [pca = null] - Initial Embedding (if null then PCA gets used). \r\n   * @param {KNN} [knn = null] - KNN Object (if null then BallTree gets used). \r\n   */\n\n\n  init(pca = null, knn = null) {\n    const X = this.X;\n    const N = X.shape[0];\n    const d = this._d;\n    const metric = this._metric;\n    const c = this._c;\n    this.n_inliers = 2 * c;\n    this.n_outliers = 1 * c;\n    this.n_random = 1 * c;\n    this.Y = pca || new _PCA__WEBPACK_IMPORTED_MODULE_2__.PCA(X, d).transform(); //.mult(.01);\n\n    this.knn = knn || new _knn_index__WEBPACK_IMPORTED_MODULE_3__.BallTree(X.to2dArray, metric);\n\n    const {\n      triplets,\n      weights\n    } = this._generate_triplets(this.n_inliers, this.n_outliers, this.n_random);\n\n    this.triplets = triplets;\n    this.weights = weights;\n    this.lr = 1000 * N / triplets.shape[0];\n    this.C = Infinity;\n    this.tol = 1e-7;\n    this.vel = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, d, 0);\n    this.gain = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, d, 1);\n    return this;\n  }\n  /**\r\n   * Generates {@link n_inliers} x {@link n_outliers} x {@link n_random} triplets.\r\n   * @param {Number} n_inliers \r\n   * @param {Number} n_outliers \r\n   * @param {Number} n_random \r\n   */\n\n\n  _generate_triplets(n_inliers, n_outliers, n_random) {\n    const metric = this._metric;\n    const weight_adj = this._weight_adj;\n    const X = this.X;\n    const N = X.shape[0];\n    const knn = this.knn;\n    const n_extra = Math.min(n_inliers + 20, N);\n    const nbrs = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, n_extra);\n    const knn_distances = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, n_extra);\n\n    for (let i = 0; i < N; ++i) {\n      knn.search(X.row(i), n_extra + 1).raw_data().filter(d => d.value != 0).sort((a, b) => a.value - b.value).forEach((d, j) => {\n        nbrs.set_entry(i, j, d.element.index);\n        knn_distances.set_entry(i, j, d.value);\n      });\n    } // scale parameter\n\n\n    const sig = new Float64Array(N);\n\n    for (let i = 0; i < N; ++i) {\n      sig[i] = Math.max((knn_distances.entry(i, 3) + knn_distances.entry(i, 4) + knn_distances.entry(i, 5) + knn_distances.entry(i, 6)) / 4, 1e-10);\n    }\n\n    const P = this._find_p(knn_distances, sig, nbrs);\n\n    let triplets = this._sample_knn_triplets(P, nbrs, n_inliers, n_outliers);\n\n    let n_triplets = triplets.shape[0];\n    const outlier_distances = new Float64Array(n_triplets);\n\n    for (let i = 0; i < n_triplets; ++i) {\n      const j = triplets.entry(i, 0);\n      const k = triplets.entry(i, 2);\n      outlier_distances[i] = metric(X.row(j), X.row(k));\n    }\n\n    let weights = this._find_weights(triplets, P, nbrs, outlier_distances, sig);\n\n    if (n_random > 0) {\n      const {\n        random_triplets,\n        random_weights\n      } = this._sample_random_triplets(X, n_random, sig);\n\n      triplets = triplets.concat(random_triplets, \"vertical\");\n      weights = Float64Array.from([...weights, ...random_weights]);\n    }\n\n    n_triplets = triplets.shape[0];\n    let max_weight = -Infinity;\n\n    for (let i = 0; i < n_triplets; ++i) {\n      if (isNaN(weights[i])) {\n        weights[i] = 0;\n      }\n\n      if (max_weight < weights[i]) max_weight = weights[i];\n    }\n\n    let max_weight_2 = -Infinity;\n\n    for (let i = 0; i < n_triplets; ++i) {\n      weights[i] /= max_weight;\n      weights[i] += .0001;\n      weights[i] = Math.log(1 + weight_adj * weights[i]);\n      if (max_weight_2 < weights[i]) max_weight_2 = weights[i];\n    }\n\n    for (let i = 0; i < n_triplets; ++i) {\n      weights[i] /= max_weight_2;\n    }\n\n    return {\n      \"triplets\": triplets,\n      \"weights\": weights\n    };\n  }\n  /**\r\n   * Calculates the similarity matrix P\r\n   * @private\r\n   * @param {Matrix} knn_distances - matrix of pairwise knn distances\r\n   * @param {Float64Array} sig - scaling factor for the distances\r\n   * @param {Matrix} nbrs - nearest neighbors\r\n   * @returns {Matrix} pairwise similarity matrix\r\n   */\n\n\n  _find_p(knn_distances, sig, nbrs) {\n    const [N, n_neighbors] = knn_distances.shape;\n    return new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, n_neighbors, (i, j) => {\n      return Math.exp(-(knn_distances.entry(i, j) ** 2 / sig[i] / sig[nbrs.entry(i, j)]));\n    });\n  }\n  /**\r\n   * Sample nearest neighbors triplets based on the similarity values given in P.\r\n   * @private\r\n   * @param {Matrix} P - Matrix of pairwise similarities between each point and its neighbors given in matrix nbrs.\r\n   * @param {Matrix} nbrs - Nearest neighbors indices for each point. The similarity values are given in matrix {@link P}. Row i corresponds to the i-th point.\r\n   * @param {Number} n_inliers - Number of inlier points.\r\n   * @param {Number} n_outliers - Number of outlier points.\r\n   * \r\n   */\n\n\n  _sample_knn_triplets(P, nbrs, n_inliers, n_outliers) {\n    const N = nbrs.shape[0];\n    const triplets = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N * n_inliers * n_outliers, 3);\n\n    for (let i = 0; i < N; ++i) {\n      let n_i = i * n_inliers * n_outliers;\n\n      const sort_indices = this.__argsort(P.row(i).map(d => -d));\n\n      for (let j = 0; j < n_inliers; ++j) {\n        let n_j = j * n_outliers;\n        const sim = nbrs.entry(i, sort_indices[j]);\n\n        const samples = this._rejection_sample(n_outliers, N, sort_indices.slice(0, j + 1));\n\n        for (let k = 0; k < n_outliers; ++k) {\n          const index = n_i + n_j + k;\n          const out = samples[k];\n          triplets.set_entry(index, 0, i);\n          triplets.set_entry(index, 1, sim);\n          triplets.set_entry(index, 2, out);\n        }\n      }\n    }\n\n    return triplets;\n  }\n  /**\r\n   * Should do the same as np.argsort()\r\n   * @private\r\n   * @param {Array} A \r\n   */\n\n\n  __argsort(A) {\n    return A.map((d, i) => {\n      return {\n        d: d,\n        i: i\n      };\n    }).sort((a, b) => a.d - b.d).map(d => d.i);\n  }\n  /**\r\n   * Samples {@link n_samples} integers from a given interval [0, {@link max_int}] while rejection the values that are in the {@link rejects}.\r\n   * @private\r\n   * @param {*} n_samples \r\n   * @param {*} max_int \r\n   * @param {*} rejects \r\n   */\n\n\n  _rejection_sample(n_samples, max_int, rejects) {\n    const randomizer = this._randomizer;\n    const interval = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.linspace)(0, max_int - 1).filter(d => rejects.indexOf(d) < 0);\n    return randomizer.choice(interval, Math.min(n_samples, interval.length - 2));\n  }\n  /**\r\n   * Calculates the weights for the sampled nearest neighbors triplets\r\n   * @private\r\n   * @param {Matrix} triplets - Sampled Triplets.\r\n   * @param {Matrix} P - Pairwise similarity matrix.\r\n   * @param {Matrix} nbrs - nearest Neighbors\r\n   * @param {Float64Array} outlier_distances - Matrix of pairwise outlier distances\r\n   * @param {Float64Array} sig - scaling factor for the distances.\r\n   */\n\n\n  _find_weights(triplets, P, nbrs, outlier_distances, sig) {\n    const n_triplets = triplets.shape[0];\n    const weights = new Float64Array(n_triplets);\n\n    for (let t = 0; t < n_triplets; ++t) {\n      const i = triplets.entry(t, 0);\n      const sim = nbrs.row(i).indexOf(triplets.entry(t, 1));\n      const p_sim = P.entry(i, sim);\n      let p_out = Math.exp(-(outlier_distances[t] ** 2 / (sig[i] * sig[triplets.entry(t, 2)])));\n      if (p_out < 1e-20) p_out = 1e-20;\n      weights[t] = p_sim / p_out;\n    }\n\n    return weights;\n  }\n  /**\r\n   * Sample uniformly ranom triplets\r\n   * @private\r\n   * @param {Matrix} X - Data matrix.\r\n   * @param {Number} n_random - Number of random triplets per point\r\n   * @param {Float64Array} sig - Scaling factor for the distances\r\n   */\n\n\n  _sample_random_triplets(X, n_random, sig) {\n    const metric = this._metric;\n    const randomizer = this._randomizer;\n    const N = X.shape[0];\n    const random_triplets = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N * n_random, 3);\n    const random_weights = new Float64Array(N * n_random);\n\n    for (let i = 0; i < N; ++i) {\n      const n_i = i * n_random;\n      const indices = [...(0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.linspace)(0, i - 1), ...(0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.linspace)(i + 1, N - 1)];\n\n      for (let j = 0; j < n_random; ++j) {\n        let [sim, out] = randomizer.choice(indices, 2);\n        let p_sim = Math.exp(-(metric(X.row(i), X.row(sim)) ** 2 / (sig[i] * sig[sim])));\n        if (p_sim < 1e-20) p_sim = 1e-20;\n        let p_out = Math.exp(-(metric(X.row(i), X.row(out)) ** 2 / (sig[i] * sig[out])));\n        if (p_out < 1e-20) p_out = 1e-20;\n\n        if (p_sim < p_out) {\n          [sim, out] = [out, sim];\n          [p_sim, p_out] = [p_out, p_sim];\n        }\n\n        const index = n_i + j;\n        random_triplets.set_entry(index, 0, i);\n        random_triplets.set_entry(index, 1, sim);\n        random_triplets.set_entry(index, 2, out);\n        random_weights[index] = p_sim / p_out;\n      }\n    }\n\n    return {\n      \"random_triplets\": random_triplets,\n      \"random_weights\": random_weights\n    };\n  }\n  /**\r\n   * Computes the gradient for updating the embedding.\r\n   * @param {Matrix} Y - The embedding\r\n   */\n\n\n  _grad(Y) {\n    const n_inliers = this.n_inliers;\n    const n_outliers = this.n_outliers;\n    const triplets = this.triplets;\n    const weights = this.weights;\n    const [N, dim] = Y.shape;\n    const n_triplets = triplets.shape[0];\n    const grad = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, dim, 0);\n    let y_ij = new Array(dim).fill(0);\n    let y_ik = new Array(dim).fill(0);\n    let d_ij = 1;\n    let d_ik = 1;\n    let n_viol = 0;\n    let loss = 0;\n    const n_knn_triplets = N * n_inliers * n_outliers;\n\n    for (let t = 0; t < n_triplets; ++t) {\n      const [i, j, k] = triplets.row(t); // update y_ij, y_ik, d_ij, d_ik\n\n      if (t % n_outliers == 0 || t >= n_knn_triplets) {\n        d_ij = 1;\n        d_ik = 1;\n\n        for (let d = 0; d < dim; ++d) {\n          const Y_id = Y.entry(i, d);\n          const Y_jd = Y.entry(j, d);\n          const Y_kd = Y.entry(k, d);\n          y_ij[d] = Y_id - Y_jd;\n          y_ik[d] = Y_id - Y_kd;\n          d_ij += y_ij[d] ** 2;\n          d_ik += y_ik[d] ** 2;\n        } // update y_ik and d_ik only\n\n      } else {\n        d_ik = 1;\n\n        for (let d = 0; d < dim; ++d) {\n          const Y_id = Y.entry(i, d);\n          const Y_kd = Y.entry(k, d);\n          y_ik[d] = Y_id - Y_kd;\n          d_ik += y_ik[d] ** 2;\n        }\n      }\n\n      if (d_ij > d_ik) ++n_viol;\n      loss += weights[t] / (1 + d_ik / d_ij);\n      const w = (weights[t] / (d_ij + d_ik)) ** 2;\n\n      for (let d = 0; d < dim; ++d) {\n        const gs = y_ij[d] * d_ik * w;\n        const go = y_ik[d] * d_ij * w;\n        grad.set_entry(i, d, grad.entry(i, d) + gs - go);\n        grad.set_entry(j, d, grad.entry(j, d) - gs);\n        grad.set_entry(k, d, grad.entry(k, d) + go);\n      }\n    }\n\n    return {\n      \"grad\": grad,\n      \"loss\": loss,\n      \"n_viol\": n_viol\n    };\n  }\n  /**\r\n   * \r\n   * @param {Number} max_iteration \r\n   */\n\n\n  transform(max_iteration = 400) {\n    this.check_init();\n\n    for (let iter = 0; iter < max_iteration; ++iter) {\n      this._next(iter);\n    }\n\n    return this.projection;\n  }\n  /**\r\n   * @yields {Matrix}\r\n   * @returns {Matrix}\r\n   */\n\n\n  *generator() {\n    this.check_init();\n\n    for (let iter = 0; iter < 800; ++iter) {\n      this._next(iter);\n\n      yield this.projection;\n    }\n\n    return this.projection;\n  }\n  /**\r\n   * Does the iteration step.\r\n   * @private\r\n   * @param {Number} iter \r\n   */\n\n\n  _next(iter) {\n    const gamma = iter > 150 ? .5 : .3;\n    const old_C = this.C;\n    const vel = this.vel;\n    const Y = this.Y.add(vel.mult(gamma));\n\n    const {\n      grad,\n      loss,\n      n_viol\n    } = this._grad(Y);\n\n    this.C = loss;\n    this.Y = this._update_embedding(Y, iter, grad);\n    this.lr *= old_C > loss + this.tol ? 1.01 : .9;\n    return this.Y;\n  }\n  /**\r\n   * Updates the embedding.\r\n   * @private\r\n   * @param {Matrix} Y \r\n   * @param {Number} iter \r\n   * @param {Matrix} grad \r\n   */\n\n\n  _update_embedding(Y, iter, grad) {\n    const [N, dim] = Y.shape;\n    const gamma = iter > 150 ? .9 : .5; // moment parameter\n\n    const min_gain = .01;\n    const gain = this.gain;\n    const vel = this.vel;\n    const lr = this.lr;\n\n    for (let i = 0; i < N; ++i) {\n      for (let d = 0; d < dim; ++d) {\n        const new_gain = Math.sign(vel.entry(i, d)) != Math.sign(grad.entry(i, d)) ? gain.entry(i, d) + .2 : Math.max(gain.entry(i, d) * .8, min_gain);\n        gain.set_entry(i, d, new_gain);\n        vel.set_entry(i, d, gamma * vel.entry(i, d) - lr * gain.entry(i, d) * grad.entry(i, d));\n        Y.set_entry(i, d, Y.entry(i, d) + vel.entry(i, d));\n      }\n    }\n\n    return Y;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dimred/TriMap.js\n");

/***/ }),

/***/ "./dimred/UMAP.js":
/*!************************!*\
  !*** ./dimred/UMAP.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UMAP\": () => (/* binding */ UMAP)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _knn_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../knn/index */ \"./knn/index.js\");\n/* harmony import */ var _numerical_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../numerical/index */ \"./numerical/index.js\");\n/* harmony import */ var _optimization_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../optimization/index */ \"./optimization/index.js\");\n/* harmony import */ var _DR_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DR.js */ \"./dimred/DR.js\");\n/* harmony import */ var _util_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/index */ \"./util/index.js\");\n\n\n\n\n\n\n\n\nclass UMAP extends _DR_js__WEBPACK_IMPORTED_MODULE_5__.DR {\n  constructor(X, n_neighbors = 15, local_connectivity = 1, min_dist = 1, d = 2, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean, seed = 1212) {\n    super(X, d, metric, seed);\n    super.parameter_list = [\"n_neighbors\", \"local_connectivity\", \"min_dist\"];\n    [this._N, this._D] = this.X.shape;\n    n_neighbors = Math.min(this._N - 1, n_neighbors);\n    this.parameter(\"n_neighbors\", n_neighbors);\n    this.parameter(\"local_connectivity\", Math.min(local_connectivity, n_neighbors - 1));\n    this.parameter(\"min_dist\", min_dist);\n    this._iter = 0;\n    this._spread = 1;\n    this._set_op_mix_ratio = 1;\n    this._repulsion_strength = 1;\n    this._negative_sample_rate = 5;\n    this._n_epochs = 350;\n    this._initial_alpha = 1;\n    this.Y = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(this._N, this._d, () => this._randomizer.random);\n    return this;\n  }\n\n  _find_ab_params(spread, min_dist) {\n    const curve = (x, a, b) => 1 / (1 + a * Math.pow(x, 2 * b));\n\n    const xv = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.linspace)(0, spread * 3, 300);\n    const yv = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.linspace)(0, spread * 3, 300);\n\n    for (let i = 0, n = xv.length; i < n; ++i) {\n      const xv_i = xv[i];\n      yv[i] = xv_i < min_dist ? 1 : Math.exp(-(xv_i - min_dist) / spread);\n    }\n\n    const err = p => {\n      const error = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.linspace)(1, 300).map((_, i) => yv[i] - curve(xv[i], p[0], p[1]));\n      return Math.sqrt((0,_numerical_index__WEBPACK_IMPORTED_MODULE_3__.neumair_sum)(error.map(e => e * e)));\n    };\n\n    return (0,_optimization_index__WEBPACK_IMPORTED_MODULE_4__.powell)(err, [1, 1]);\n  }\n\n  _compute_membership_strengths(distances, sigmas, rhos) {\n    for (let i = 0, n = distances.length; i < n; ++i) {\n      for (let j = 0, m = distances[i].length; j < m; ++j) {\n        const v = distances[i][j].value - rhos[i];\n        distances[i][j].value = v > 0 ? Math.exp(-v / sigmas[i]) : 1;\n      }\n    }\n\n    return distances;\n  }\n\n  _smooth_knn_dist(knn, k) {\n    const SMOOTH_K_TOLERANCE = 1e-5;\n    const MIN_K_DIST_SCALE = 1e-3;\n    const n_iter = 64;\n    const local_connectivity = this._local_connectivity;\n    const target = Math.log2(k);\n    const rhos = [];\n    const sigmas = [];\n    const X = this.X;\n    const distances = [...X].map(x_i => knn.search(x_i, k).raw_data().reverse());\n\n    for (let i = 0, n = X.shape[0]; i < n; ++i) {\n      let lo = 0;\n      let hi = Infinity;\n      let mid = 1;\n      const search_result = distances[i];\n      const non_zero_dist = search_result.filter(d => d.value > 0);\n      const non_zero_dist_length = non_zero_dist.length;\n\n      if (non_zero_dist_length >= local_connectivity) {\n        const index = Math.floor(local_connectivity);\n        const interpolation = local_connectivity - index;\n\n        if (index > 0) {\n          rhos.push(non_zero_dist[index - 1]);\n\n          if (interpolation > SMOOTH_K_TOLERANCE) {\n            rhos[i].value += interpolation * (non_zero_dist[index].value - non_zero_dist[index - 1]);\n          }\n        } else {\n          rhos[i].value = interpolation * non_zero_dist[0].value;\n        }\n      } else if (non_zero_dist_length > 0) {\n        rhos[i] = non_zero_dist[non_zero_dist_length - 1].value;\n      }\n\n      for (let x = 0; x < n_iter; ++x) {\n        let psum = 0;\n\n        for (let j = 0; j < k; ++j) {\n          const d = search_result[j].value - rhos[i];\n          psum += d > 0 ? Math.exp(-(d / mid)) : 1;\n        }\n\n        if (Math.abs(psum - target) < SMOOTH_K_TOLERANCE) {\n          break;\n        }\n\n        if (psum > target) {\n          [hi, mid] = [mid, (lo + hi) / 2];\n        } else {\n          if (hi === Infinity) {\n            [lo, mid] = [mid, mid * 2];\n          } else {\n            [lo, mid] = [mid, (lo + hi) / 2];\n          }\n        }\n      }\n\n      sigmas[i] = mid;\n      const mean_ithd = search_result.reduce((a, b) => a + b.value, 0) / search_result.length; //let mean_d = null;\n\n      if (rhos[i] > 0) {\n        if (sigmas[i] < MIN_K_DIST_SCALE * mean_ithd) {\n          sigmas[i] = MIN_K_DIST_SCALE * mean_ithd;\n        }\n      } else {\n        const mean_d = distances.reduce((acc, res) => acc + res.reduce((a, b) => a + b.value, 0) / res.length);\n\n        if (sigmas[i] > MIN_K_DIST_SCALE * mean_d) {\n          sigmas[i] = MIN_K_DIST_SCALE * mean_d;\n        }\n      }\n    }\n\n    return {\n      \"distances\": distances,\n      \"sigmas\": sigmas,\n      \"rhos\": rhos\n    };\n  }\n\n  _fuzzy_simplicial_set(X, n_neighbors) {\n    const N = X.shape[0];\n    const knn = new _knn_index__WEBPACK_IMPORTED_MODULE_2__.BallTree(X.to2dArray, _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean);\n\n    let {\n      distances,\n      sigmas,\n      rhos\n    } = this._smooth_knn_dist(knn, n_neighbors);\n\n    distances = this._compute_membership_strengths(distances, sigmas, rhos);\n    const result = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(N, N, \"zeros\");\n\n    for (let i = 0; i < N; ++i) {\n      const distances_i = distances[i];\n\n      for (let j = 0; j < distances_i.length; ++j) {\n        result.set_entry(i, distances_i[j].element.index, distances_i[j].value);\n      }\n    }\n\n    const transposed_result = result.T;\n    const prod_matrix = result.mult(transposed_result);\n    return result.add(transposed_result).sub(prod_matrix).mult(this._set_op_mix_ratio).add(prod_matrix.mult(1 - this._set_op_mix_ratio));\n  }\n\n  _make_epochs_per_sample(n_epochs) {\n    const weights = this._weights;\n    const result = new Float32Array(weights.length).fill(-1);\n    const weights_max = (0,_util_index__WEBPACK_IMPORTED_MODULE_6__.max)(weights);\n    const n_samples = weights.map(w => n_epochs * (w / weights_max));\n\n    for (let i = 0; i < result.length; ++i) if (n_samples[i] > 0) result[i] = Math.round(n_epochs / n_samples[i]);\n\n    return result;\n  }\n\n  _tocoo(graph) {\n    const rows = [];\n    const cols = [];\n    const data = [];\n    const [rows_n, cols_n] = graph.shape;\n\n    for (let row = 0; row < rows_n; ++row) {\n      for (let col = 0; col < cols_n; ++col) {\n        const entry = graph.entry(row, col);\n\n        if (entry !== 0) {\n          rows.push(row);\n          cols.push(col);\n          data.push(entry);\n        }\n      }\n    }\n\n    return {\n      \"rows\": rows,\n      \"cols\": cols,\n      \"data\": data\n    };\n  }\n\n  init() {\n    const [a, b] = this._find_ab_params(this._spread, this._min_dist);\n\n    this._a = a;\n    this._b = b;\n    this._graph = this._fuzzy_simplicial_set(this.X, this._n_neighbors);\n\n    const {\n      rows,\n      cols,\n      data: weights\n    } = this._tocoo(this._graph);\n\n    this._head = rows;\n    this._tail = cols;\n    this._weights = weights;\n    this._epochs_per_sample = this._make_epochs_per_sample(this._n_epochs);\n    this._epochs_per_negative_sample = this._epochs_per_sample.map(d => d * this._negative_sample_rate);\n    this._epoch_of_next_sample = this._epochs_per_sample.slice();\n    this._epoch_of_next_negative_sample = this._epochs_per_negative_sample.slice();\n    return this;\n  }\n\n  set local_connectivity(value) {\n    this._local_connectivity = value;\n  }\n\n  get local_connectivity() {\n    return this._local_connectivity;\n  }\n\n  set min_dist(value) {\n    this._min_dist = value;\n  }\n\n  get min_dist() {\n    return this._min_dist;\n  }\n\n  graph() {\n    this.check_init();\n    return {\n      cols: this._head,\n      rows: this._tail,\n      weights: this._weights\n    };\n  }\n\n  transform(iterations) {\n    this.check_init();\n    iterations = iterations || this._n_epochs;\n\n    for (let i = 0; i < iterations; ++i) {\n      this.next();\n    }\n\n    return this.projection;\n  }\n\n  *generator() {\n    this.check_init();\n    this._iter = 0;\n\n    while (this._iter < this._n_epochs) {\n      this.next();\n      yield this.projection;\n    }\n\n    return this.projection;\n  }\n\n  _clip(x) {\n    if (x > 4) return 4;\n    if (x < -4) return -4;\n    return x;\n  }\n\n  _optimize_layout(head_embedding, tail_embedding, head, tail) {\n    const {\n      _d: dim,\n      _alpha: alpha,\n      _repulsion_strength: repulsion_strength,\n      _a: a,\n      _b: b,\n      _epochs_per_sample: epochs_per_sample,\n      _epochs_per_negative_sample: epochs_per_negative_sample,\n      _epoch_of_next_negative_sample: epoch_of_next_negative_sample,\n      _epoch_of_next_sample: epoch_of_next_sample,\n      _clip: clip\n    } = this;\n    const tail_length = tail.length;\n\n    for (let i = 0, n = epochs_per_sample.length; i < n; ++i) {\n      if (epoch_of_next_sample[i] <= this._iter) {\n        const j = head[i];\n        const k = tail[i];\n        const current = head_embedding.row(j);\n        const other = tail_embedding.row(k);\n        const dist = (0,_metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean_squared)(current, other); //this._metric(current, other);\n\n        let grad_coeff = 0;\n\n        if (dist > 0) {\n          grad_coeff = -2 * a * b * Math.pow(dist, b - 1) / (a * Math.pow(dist, b) + 1);\n        }\n\n        for (let d = 0; d < dim; ++d) {\n          const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n          const c = current[d] + grad_d;\n          const o = other[d] - grad_d;\n          current[d] = c;\n          other[d] = o;\n          head_embedding.set_entry(j, d, c);\n          tail_embedding.set_entry(k, d, o);\n        }\n\n        epoch_of_next_sample[i] += epochs_per_sample[i];\n        const n_neg_samples = (this._iter - epoch_of_next_negative_sample[i]) / epochs_per_negative_sample[i];\n\n        for (let p = 0; p < n_neg_samples; ++p) {\n          const k = Math.floor(this._randomizer.random * tail_length);\n          const other = tail_embedding.row(tail[k]);\n          const dist = (0,_metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean_squared)(current, other); //this._metric(current, other);\n\n          let grad_coeff = 0;\n\n          if (dist > 0) {\n            grad_coeff = 2 * repulsion_strength * b / ((.01 + dist) * (a * Math.pow(dist, b) + 1));\n          } else if (j === k) {\n            continue;\n          }\n\n          for (let d = 0; d < dim; ++d) {\n            const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n            const c = current[d] + grad_d;\n            const o = other[d] - grad_d;\n            current[d] = c;\n            other[d] = o;\n            head_embedding.set_entry(j, d, c);\n            tail_embedding.set_entry(tail[k], d, o);\n          }\n        }\n\n        epoch_of_next_negative_sample[i] += n_neg_samples * epochs_per_negative_sample[i];\n      }\n    }\n\n    return head_embedding;\n  }\n\n  next() {\n    let iter = ++this._iter;\n    let Y = this.Y;\n    this._alpha = this._initial_alpha * (1 - iter / this._n_epochs);\n    this.Y = this._optimize_layout(Y, Y, this._head, this._tail);\n    return this.Y;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dimred/UMAP.js\n");

/***/ }),

/***/ "./dimred/index.js":
/*!*************************!*\
  !*** ./dimred/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PCA\": () => (/* reexport safe */ _PCA__WEBPACK_IMPORTED_MODULE_0__.PCA),\n/* harmony export */   \"MDS\": () => (/* reexport safe */ _MDS__WEBPACK_IMPORTED_MODULE_1__.MDS),\n/* harmony export */   \"ISOMAP\": () => (/* reexport safe */ _ISOMAP__WEBPACK_IMPORTED_MODULE_2__.ISOMAP),\n/* harmony export */   \"FASTMAP\": () => (/* reexport safe */ _FASTMAP__WEBPACK_IMPORTED_MODULE_3__.FASTMAP),\n/* harmony export */   \"LDA\": () => (/* reexport safe */ _LDA__WEBPACK_IMPORTED_MODULE_4__.LDA),\n/* harmony export */   \"LLE\": () => (/* reexport safe */ _LLE__WEBPACK_IMPORTED_MODULE_5__.LLE),\n/* harmony export */   \"LTSA\": () => (/* reexport safe */ _LTSA__WEBPACK_IMPORTED_MODULE_6__.LTSA),\n/* harmony export */   \"TSNE\": () => (/* reexport safe */ _TSNE__WEBPACK_IMPORTED_MODULE_7__.TSNE),\n/* harmony export */   \"UMAP\": () => (/* reexport safe */ _UMAP__WEBPACK_IMPORTED_MODULE_8__.UMAP),\n/* harmony export */   \"TriMap\": () => (/* reexport safe */ _TriMap__WEBPACK_IMPORTED_MODULE_9__.TriMap),\n/* harmony export */   \"LSP\": () => (/* reexport safe */ _LSP__WEBPACK_IMPORTED_MODULE_10__.LSP),\n/* harmony export */   \"TopoMap\": () => (/* reexport safe */ _TopoMap__WEBPACK_IMPORTED_MODULE_11__.TopoMap),\n/* harmony export */   \"SAMMON\": () => (/* reexport safe */ _SAMMON__WEBPACK_IMPORTED_MODULE_12__.SAMMON)\n/* harmony export */ });\n/* harmony import */ var _PCA__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PCA */ \"./dimred/PCA.js\");\n/* harmony import */ var _MDS__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MDS */ \"./dimred/MDS.js\");\n/* harmony import */ var _ISOMAP__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ISOMAP */ \"./dimred/ISOMAP.js\");\n/* harmony import */ var _FASTMAP__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FASTMAP */ \"./dimred/FASTMAP.js\");\n/* harmony import */ var _LDA__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LDA */ \"./dimred/LDA.js\");\n/* harmony import */ var _LLE__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LLE */ \"./dimred/LLE.js\");\n/* harmony import */ var _LTSA__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./LTSA */ \"./dimred/LTSA.js\");\n/* harmony import */ var _TSNE__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TSNE */ \"./dimred/TSNE.js\");\n/* harmony import */ var _UMAP__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./UMAP */ \"./dimred/UMAP.js\");\n/* harmony import */ var _TriMap__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./TriMap */ \"./dimred/TriMap.js\");\n/* harmony import */ var _LSP__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./LSP */ \"./dimred/LSP.js\");\n/* harmony import */ var _TopoMap__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./TopoMap */ \"./dimred/TopoMap.js\");\n/* harmony import */ var _SAMMON__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./SAMMON */ \"./dimred/SAMMON.js\");\n/**\r\n * @module dimensionality_reduction\r\n */\n\n\n\n\n\n //export { MLLE } from \"./MLLE\";\n\n\n\n //export { OAP } from \"./OAP\";\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL2RpbXJlZC9pbmRleC5qcz8yNDYxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUVBOztBQUNBO0FBQ0E7Q0FFQTs7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9kaW1yZWQvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG1vZHVsZSBkaW1lbnNpb25hbGl0eV9yZWR1Y3Rpb25cclxuICovXHJcbmV4cG9ydCB7IFBDQSB9IGZyb20gXCIuL1BDQVwiO1xyXG5leHBvcnQgeyBNRFMgfSBmcm9tIFwiLi9NRFNcIjtcclxuZXhwb3J0IHsgSVNPTUFQIH0gZnJvbSBcIi4vSVNPTUFQXCI7XHJcbmV4cG9ydCB7IEZBU1RNQVAgfSBmcm9tIFwiLi9GQVNUTUFQXCI7XHJcbmV4cG9ydCB7IExEQSB9IGZyb20gXCIuL0xEQVwiO1xyXG5leHBvcnQgeyBMTEUgfSBmcm9tIFwiLi9MTEVcIjtcclxuLy9leHBvcnQgeyBNTExFIH0gZnJvbSBcIi4vTUxMRVwiO1xyXG5leHBvcnQgeyBMVFNBIH0gZnJvbSBcIi4vTFRTQVwiO1xyXG5leHBvcnQgeyBUU05FIH0gZnJvbSBcIi4vVFNORVwiO1xyXG5leHBvcnQgeyBVTUFQIH0gZnJvbSBcIi4vVU1BUFwiO1xyXG4vL2V4cG9ydCB7IE9BUCB9IGZyb20gXCIuL09BUFwiO1xyXG5leHBvcnQgeyBUcmlNYXAgfSBmcm9tIFwiLi9UcmlNYXBcIjtcclxuZXhwb3J0IHsgTFNQIH0gZnJvbSBcIi4vTFNQXCI7XHJcbmV4cG9ydCB7IFRvcG9NYXAgfSBmcm9tIFwiLi9Ub3BvTWFwXCI7XHJcbmV4cG9ydCB7IFNBTU1PTiB9IGZyb20gXCIuL1NBTU1PTlwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./dimred/index.js\n");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Randomizer\": () => (/* reexport safe */ _util_index__WEBPACK_IMPORTED_MODULE_0__.Randomizer),\n/* harmony export */   \"max\": () => (/* reexport safe */ _util_index__WEBPACK_IMPORTED_MODULE_0__.max),\n/* harmony export */   \"kahan_sum\": () => (/* reexport safe */ _numerical_index__WEBPACK_IMPORTED_MODULE_1__.kahan_sum),\n/* harmony export */   \"neumair_sum\": () => (/* reexport safe */ _numerical_index__WEBPACK_IMPORTED_MODULE_1__.neumair_sum),\n/* harmony export */   \"canberra\": () => (/* reexport safe */ _metrics_index__WEBPACK_IMPORTED_MODULE_2__.canberra),\n/* harmony export */   \"chebyshev\": () => (/* reexport safe */ _metrics_index__WEBPACK_IMPORTED_MODULE_2__.chebyshev),\n/* harmony export */   \"cosine\": () => (/* reexport safe */ _metrics_index__WEBPACK_IMPORTED_MODULE_2__.cosine),\n/* harmony export */   \"euclidean\": () => (/* reexport safe */ _metrics_index__WEBPACK_IMPORTED_MODULE_2__.euclidean),\n/* harmony export */   \"euclidean_squared\": () => (/* reexport safe */ _metrics_index__WEBPACK_IMPORTED_MODULE_2__.euclidean_squared),\n/* harmony export */   \"manhattan\": () => (/* reexport safe */ _metrics_index__WEBPACK_IMPORTED_MODULE_2__.manhattan),\n/* harmony export */   \"Matrix\": () => (/* reexport safe */ _matrix_index__WEBPACK_IMPORTED_MODULE_3__.Matrix),\n/* harmony export */   \"distance_matrix\": () => (/* reexport safe */ _matrix_index__WEBPACK_IMPORTED_MODULE_3__.distance_matrix),\n/* harmony export */   \"k_nearest_neighbors\": () => (/* reexport safe */ _matrix_index__WEBPACK_IMPORTED_MODULE_3__.k_nearest_neighbors),\n/* harmony export */   \"linspace\": () => (/* reexport safe */ _matrix_index__WEBPACK_IMPORTED_MODULE_3__.linspace),\n/* harmony export */   \"norm\": () => (/* reexport safe */ _matrix_index__WEBPACK_IMPORTED_MODULE_3__.norm),\n/* harmony export */   \"BallTree\": () => (/* reexport safe */ _knn_index__WEBPACK_IMPORTED_MODULE_4__.BallTree),\n/* harmony export */   \"Heap\": () => (/* reexport safe */ _datastructure_index__WEBPACK_IMPORTED_MODULE_5__.Heap),\n/* harmony export */   \"qr\": () => (/* reexport safe */ _linear_algebra_index__WEBPACK_IMPORTED_MODULE_6__.qr),\n/* harmony export */   \"simultaneous_poweriteration\": () => (/* reexport safe */ _linear_algebra_index__WEBPACK_IMPORTED_MODULE_6__.simultaneous_poweriteration),\n/* harmony export */   \"FASTMAP\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.FASTMAP),\n/* harmony export */   \"ISOMAP\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.ISOMAP),\n/* harmony export */   \"LDA\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.LDA),\n/* harmony export */   \"LLE\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.LLE),\n/* harmony export */   \"LSP\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.LSP),\n/* harmony export */   \"LTSA\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.LTSA),\n/* harmony export */   \"MDS\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.MDS),\n/* harmony export */   \"PCA\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.PCA),\n/* harmony export */   \"SAMMON\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.SAMMON),\n/* harmony export */   \"TSNE\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.TSNE),\n/* harmony export */   \"TopoMap\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.TopoMap),\n/* harmony export */   \"TriMap\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.TriMap),\n/* harmony export */   \"UMAP\": () => (/* reexport safe */ _dimred_index__WEBPACK_IMPORTED_MODULE_7__.UMAP),\n/* harmony export */   \"powell\": () => (/* reexport safe */ _optimization_index__WEBPACK_IMPORTED_MODULE_8__.powell),\n/* harmony export */   \"Hierarchical_Clustering\": () => (/* reexport safe */ _clustering_index__WEBPACK_IMPORTED_MODULE_9__.Hierarchical_Clustering),\n/* harmony export */   \"KMeans\": () => (/* reexport safe */ _clustering_index__WEBPACK_IMPORTED_MODULE_9__.KMeans),\n/* harmony export */   \"KMedoids\": () => (/* reexport safe */ _clustering_index__WEBPACK_IMPORTED_MODULE_9__.KMedoids),\n/* harmony export */   \"OPTICS\": () => (/* reexport safe */ _clustering_index__WEBPACK_IMPORTED_MODULE_9__.OPTICS),\n/* harmony export */   \"version\": () => (/* reexport safe */ _package_json__WEBPACK_IMPORTED_MODULE_10__.version)\n/* harmony export */ });\n/* harmony import */ var _util_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/index */ \"./util/index.js\");\n/* harmony import */ var _numerical_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./numerical/index */ \"./numerical/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _knn_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./knn/index */ \"./knn/index.js\");\n/* harmony import */ var _datastructure_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./datastructure/index */ \"./datastructure/index.js\");\n/* harmony import */ var _linear_algebra_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./linear_algebra/index */ \"./linear_algebra/index.js\");\n/* harmony import */ var _dimred_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dimred/index */ \"./dimred/index.js\");\n/* harmony import */ var _optimization_index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./optimization/index */ \"./optimization/index.js\");\n/* harmony import */ var _clustering_index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./clustering/index */ \"./clustering/index.js\");\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./package.json */ \"./package.json\");\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL2luZGV4LmpzPzQxZjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL3V0aWwvaW5kZXgnO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9udW1lcmljYWwvaW5kZXhcIjtcclxuZXhwb3J0ICogZnJvbSAnLi9tZXRyaWNzL2luZGV4JztcclxuZXhwb3J0ICogZnJvbSBcIi4vbWF0cml4L2luZGV4XCI7XHJcbmV4cG9ydCAqIGZyb20gJy4va25uL2luZGV4JztcclxuZXhwb3J0ICogZnJvbSAnLi9kYXRhc3RydWN0dXJlL2luZGV4JztcclxuZXhwb3J0ICogZnJvbSAnLi9saW5lYXJfYWxnZWJyYS9pbmRleCc7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RpbXJlZC9pbmRleFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9vcHRpbWl6YXRpb24vaW5kZXhcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2x1c3RlcmluZy9pbmRleFwiO1xyXG5leHBvcnQge3ZlcnNpb259IGZyb20gXCIuL3BhY2thZ2UuanNvblwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ }),

/***/ "./knn/BallTree.js":
/*!*************************!*\
  !*** ./knn/BallTree.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BallTree\": () => (/* binding */ BallTree)\n/* harmony export */ });\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _datastructure_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../datastructure/index */ \"./datastructure/index.js\");\n\n\n/**\r\n * @class\r\n * @alias BallTree\r\n */\n\nclass BallTree {\n  /**\r\n   * Generates a BallTree with given {@link elements}.\r\n   * @constructor\r\n   * @memberof module:knn\r\n   * @alias BallTree\r\n   * @param {Array=} elements - Elements which should be added to the BallTree\r\n   * @param {Function} [metric = euclidean] metric to use: (a, b) => distance\r\n   * @see {@link https://en.wikipedia.org/wiki/Ball_tree}\r\n   * @see {@link https://github.com/invisal/noobjs/blob/master/src/tree/BallTree.js}\r\n   * @returns {BallTree}\r\n   */\n  constructor(elements = null, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_0__.euclidean) {\n    this._Node = class {\n      constructor(pivot, child1 = null, child2 = null, radius = null) {\n        this.pivot = pivot;\n        this.child1 = child1;\n        this.child2 = child2;\n        this.radius = radius;\n      }\n\n    };\n    this._Leaf = class {\n      constructor(points) {\n        this.points = points;\n      }\n\n    };\n    this._metric = metric;\n\n    if (elements) {\n      this.add(elements);\n    }\n\n    return this;\n  }\n  /**\r\n   * \r\n   * @param {Array<*>} elements - new elements.\r\n   * @returns {BallTree}\r\n   */\n\n\n  add(elements) {\n    elements = elements.map((element, index) => {\n      return {\n        index: index,\n        element: element\n      };\n    });\n    this._root = this._construct(elements);\n    return this;\n  }\n  /**\r\n   * @private\r\n   * @param {Array<*>} elements \r\n   * @returns {Node} root of balltree.\r\n   */\n\n\n  _construct(elements) {\n    if (elements.length === 1) {\n      return new this._Leaf(elements);\n    } else {\n      let c = this._greatest_spread(elements);\n\n      let sorted_elements = elements.sort((a, b) => a.element[c] - b.element[c]);\n      let n = sorted_elements.length;\n      let p_index = Math.floor(n / 2);\n      let p = elements[p_index];\n      let L = sorted_elements.slice(0, p_index);\n      let R = sorted_elements.slice(p_index, n);\n      let radius = Math.max(...elements.map(d => this._metric(p.element, d.element)));\n      let B;\n\n      if (L.length > 0 && R.length > 0) {\n        B = new this._Node(p, this._construct(L), this._construct(R), radius);\n      } else {\n        B = new this._Leaf(elements);\n      }\n\n      return B;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {Node} B \r\n   * @returns {Number}\r\n   */\n\n\n  _greatest_spread(B) {\n    let d = B[0].element.length;\n    let start = new Array(d);\n\n    for (let i = 0; i < d; ++i) {\n      start[i] = [Infinity, -Infinity];\n    }\n\n    let spread = B.reduce((acc, current) => {\n      for (let i = 0; i < d; ++i) {\n        acc[i][0] = Math.min(acc[i][0], current.element[i]);\n        acc[i][1] = Math.max(acc[i][1], current.element[i]);\n      }\n\n      return acc;\n    }, start);\n    spread = spread.map(d => d[1] - d[0]);\n    let c = 0;\n\n    for (let i = 0; i < d; ++i) {\n      c = spread[i] > spread[c] ? i : c;\n    }\n\n    return c;\n  }\n  /**\r\n   * \r\n   * @param {*} t - query element.\r\n   * @param {Number} [k = 5] - number of nearest neighbors to return.\r\n   * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\r\n   */\n\n\n  search(t, k = 5) {\n    return this._search(t, k, new _datastructure_index__WEBPACK_IMPORTED_MODULE_1__.Heap(null, d => this._metric(d.element, t), \"max\"), this._root);\n  }\n  /**\r\n   * @private\r\n   * @param {*} t - query element.\r\n   * @param {Number} [k = 5] - number of nearest neighbors to return.\r\n   * @param {Heap} Q - Heap consists of the currently found {@link k} nearest neighbors.\r\n   * @param {Node|Leaf} B \r\n   */\n\n\n  _search(t, k, Q, B) {\n    // B is Node\n    if (Q.length >= k && B.pivot && B.radius && this._metric(t, B.pivot.element) - B.radius >= Q.first.value) {\n      return Q;\n    }\n\n    if (B.child1) this._search(t, k, Q, B.child1);\n    if (B.child2) this._search(t, k, Q, B.child2); // B is leaf\n\n    if (B.points) {\n      for (let i = 0, n = B.points.length; i < n; ++i) {\n        let p = B.points[i];\n\n        if (k > Q.length) {\n          Q.push(p);\n        } else {\n          Q.push(p);\n          Q.pop();\n        }\n      }\n    }\n\n    return Q;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./knn/BallTree.js\n");

/***/ }),

/***/ "./knn/index.js":
/*!**********************!*\
  !*** ./knn/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BallTree\": () => (/* reexport safe */ _BallTree__WEBPACK_IMPORTED_MODULE_0__.BallTree)\n/* harmony export */ });\n/* harmony import */ var _BallTree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BallTree */ \"./knn/BallTree.js\");\n/**\r\n * @module knn\r\n */\n//export { HNSW } from './HNSW'\n //export { NNDescent } from \"./NNDescent\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL2tubi9pbmRleC5qcz9hZWE3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7Q0FFQSIsImZpbGUiOiIuL2tubi9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbW9kdWxlIGtublxyXG4gKi9cclxuLy9leHBvcnQgeyBITlNXIH0gZnJvbSAnLi9ITlNXJ1xyXG5leHBvcnQgeyBCYWxsVHJlZSB9IGZyb20gJy4vQmFsbFRyZWUnXHJcbi8vZXhwb3J0IHsgTk5EZXNjZW50IH0gZnJvbSBcIi4vTk5EZXNjZW50XCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./knn/index.js\n");

/***/ }),

/***/ "./linear_algebra/index.js":
/*!*********************************!*\
  !*** ./linear_algebra/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"qr\": () => (/* reexport safe */ _qr__WEBPACK_IMPORTED_MODULE_0__.default),\n/* harmony export */   \"simultaneous_poweriteration\": () => (/* reexport safe */ _simultaneous_poweriteration__WEBPACK_IMPORTED_MODULE_1__.default)\n/* harmony export */ });\n/* harmony import */ var _qr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./qr */ \"./linear_algebra/qr.js\");\n/* harmony import */ var _simultaneous_poweriteration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simultaneous_poweriteration */ \"./linear_algebra/simultaneous_poweriteration.js\");\n/**\r\n * @module linear_algebra\r\n */\n//export { default as poweriteration } from \"./poweriteration\"\n//export { default as lanczos } from \"./lanczos\"\n//export { default as sapi } from \"./sapi\"\n //export { default as qr_householder } from \"./qr_householder\";\n//export { default as qr_givens } from \"./qr_givens\";\n\n //export { default as lu } from \"./lu\"\n//export { default as svrg } from \"./svrg\"\n//export { default as poweriteration_m } from \"./poweriteration_m\"\n//export { default as poweriteration_n } from \"./poweriteration_n\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL2xpbmVhcl9hbGdlYnJhL2luZGV4LmpzP2M5YjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtDQUVBO0FBQ0E7O0NBRUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9saW5lYXJfYWxnZWJyYS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbW9kdWxlIGxpbmVhcl9hbGdlYnJhXHJcbiAqL1xyXG5cclxuLy9leHBvcnQgeyBkZWZhdWx0IGFzIHBvd2VyaXRlcmF0aW9uIH0gZnJvbSBcIi4vcG93ZXJpdGVyYXRpb25cIlxyXG4vL2V4cG9ydCB7IGRlZmF1bHQgYXMgbGFuY3pvcyB9IGZyb20gXCIuL2xhbmN6b3NcIlxyXG4vL2V4cG9ydCB7IGRlZmF1bHQgYXMgc2FwaSB9IGZyb20gXCIuL3NhcGlcIlxyXG5leHBvcnQgeyBkZWZhdWx0IGFzIHFyIH0gZnJvbSBcIi4vcXJcIlxyXG4vL2V4cG9ydCB7IGRlZmF1bHQgYXMgcXJfaG91c2Vob2xkZXIgfSBmcm9tIFwiLi9xcl9ob3VzZWhvbGRlclwiO1xyXG4vL2V4cG9ydCB7IGRlZmF1bHQgYXMgcXJfZ2l2ZW5zIH0gZnJvbSBcIi4vcXJfZ2l2ZW5zXCI7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2ltdWx0YW5lb3VzX3Bvd2VyaXRlcmF0aW9uIH0gZnJvbSBcIi4vc2ltdWx0YW5lb3VzX3Bvd2VyaXRlcmF0aW9uXCJcclxuLy9leHBvcnQgeyBkZWZhdWx0IGFzIGx1IH0gZnJvbSBcIi4vbHVcIlxyXG4vL2V4cG9ydCB7IGRlZmF1bHQgYXMgc3ZyZyB9IGZyb20gXCIuL3N2cmdcIlxyXG4vL2V4cG9ydCB7IGRlZmF1bHQgYXMgcG93ZXJpdGVyYXRpb25fbSB9IGZyb20gXCIuL3Bvd2VyaXRlcmF0aW9uX21cIlxyXG4vL2V4cG9ydCB7IGRlZmF1bHQgYXMgcG93ZXJpdGVyYXRpb25fbiB9IGZyb20gXCIuL3Bvd2VyaXRlcmF0aW9uX25cIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./linear_algebra/index.js\n");

/***/ }),

/***/ "./linear_algebra/qr.js":
/*!******************************!*\
  !*** ./linear_algebra/qr.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _numerical_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../numerical/index */ \"./numerical/index.js\");\n\n\n\n/**\r\n * Computes the QR Decomposition of the Matrix {@link A} using Gram-Schmidt process.\r\n * @memberof module:linear_algebra\r\n * @alias qr\r\n * @param {Matrix} A\r\n * @returns {{R: Matrix, Q: Matrix}}\r\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_the_Gram%E2%80%93Schmidt_process}\r\n */\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(A) {\n  const [rows, cols] = A.shape;\n  const Q = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(rows, cols, \"identity\");\n  const R = new _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix(cols, cols, 0);\n\n  for (let j = 0; j < cols; ++j) {\n    let v = A.col(j);\n\n    for (let i = 0; i < j; ++i) {\n      const q = Q.col(i);\n      const q_dot_v = (0,_numerical_index__WEBPACK_IMPORTED_MODULE_2__.neumair_sum)(q.map((q_, k) => q_ * v[k]));\n      R.set_entry(i, j, q_dot_v);\n      v = v.map((v_, k) => v_ - q_dot_v * q[k]);\n    }\n\n    const v_norm = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.norm)(v, _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean);\n\n    for (let k = 0; k < rows; ++k) {\n      Q.set_entry(k, j, v[k] / v_norm);\n    }\n\n    R.set_entry(j, j, v_norm);\n  }\n\n  return {\n    \"R\": R,\n    \"Q\": Q\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL2xpbmVhcl9hbGdlYnJhL3FyLmpzPzVmN2MiXSwibmFtZXMiOlsiQSIsInJvd3MiLCJjb2xzIiwic2hhcGUiLCJRIiwiTWF0cml4IiwiUiIsImoiLCJ2IiwiY29sIiwiaSIsInEiLCJxX2RvdF92IiwibmV1bWFpcl9zdW0iLCJtYXAiLCJxXyIsImsiLCJzZXRfZW50cnkiLCJ2XyIsInZfbm9ybSIsIm5vcm0iLCJldWNsaWRlYW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLDZCQUFlLG9DQUFTQSxDQUFULEVBQVk7QUFDdkIsUUFBTSxDQUFDQyxJQUFELEVBQU9DLElBQVAsSUFBZUYsQ0FBQyxDQUFDRyxLQUF2QjtBQUNBLFFBQU1DLENBQUMsR0FBRyxJQUFJQyxpREFBSixDQUFXSixJQUFYLEVBQWlCQyxJQUFqQixFQUF1QixVQUF2QixDQUFWO0FBQ0EsUUFBTUksQ0FBQyxHQUFHLElBQUlELGlEQUFKLENBQVdILElBQVgsRUFBaUJBLElBQWpCLEVBQXVCLENBQXZCLENBQVY7O0FBRUEsT0FBSyxJQUFJSyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTCxJQUFwQixFQUEwQixFQUFFSyxDQUE1QixFQUErQjtBQUMzQixRQUFJQyxDQUFDLEdBQUdSLENBQUMsQ0FBQ1MsR0FBRixDQUFNRixDQUFOLENBQVI7O0FBQ0EsU0FBSyxJQUFJRyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxDQUFwQixFQUF1QixFQUFFRyxDQUF6QixFQUE0QjtBQUN4QixZQUFNQyxDQUFDLEdBQUdQLENBQUMsQ0FBQ0ssR0FBRixDQUFNQyxDQUFOLENBQVY7QUFDQSxZQUFNRSxPQUFPLEdBQUdDLDZEQUFXLENBQUNGLENBQUMsQ0FBQ0csR0FBRixDQUFNLENBQUNDLEVBQUQsRUFBS0MsQ0FBTCxLQUFXRCxFQUFFLEdBQUdQLENBQUMsQ0FBQ1EsQ0FBRCxDQUF2QixDQUFELENBQTNCO0FBQ0FWLE9BQUMsQ0FBQ1csU0FBRixDQUFZUCxDQUFaLEVBQWNILENBQWQsRUFBaUJLLE9BQWpCO0FBQ0FKLE9BQUMsR0FBR0EsQ0FBQyxDQUFDTSxHQUFGLENBQU0sQ0FBQ0ksRUFBRCxFQUFLRixDQUFMLEtBQVdFLEVBQUUsR0FBR04sT0FBTyxHQUFHRCxDQUFDLENBQUNLLENBQUQsQ0FBakMsQ0FBSjtBQUNIOztBQUNELFVBQU1HLE1BQU0sR0FBR0MsbURBQUksQ0FBQ1osQ0FBRCxFQUFJYSxxREFBSixDQUFuQjs7QUFDQSxTQUFLLElBQUlMLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdmLElBQXBCLEVBQTBCLEVBQUVlLENBQTVCLEVBQStCO0FBQzNCWixPQUFDLENBQUNhLFNBQUYsQ0FBWUQsQ0FBWixFQUFlVCxDQUFmLEVBQWtCQyxDQUFDLENBQUNRLENBQUQsQ0FBRCxHQUFPRyxNQUF6QjtBQUNIOztBQUNEYixLQUFDLENBQUNXLFNBQUYsQ0FBWVYsQ0FBWixFQUFjQSxDQUFkLEVBQWlCWSxNQUFqQjtBQUNIOztBQUNELFNBQU87QUFBQyxTQUFLYixDQUFOO0FBQVMsU0FBS0Y7QUFBZCxHQUFQO0FBQ0giLCJmaWxlIjoiLi9saW5lYXJfYWxnZWJyYS9xci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdHJpeCwgbm9ybSB9IGZyb20gXCIuLi9tYXRyaXgvaW5kZXhcIjtcclxuaW1wb3J0IHsgZXVjbGlkZWFuIH0gZnJvbSBcIi4uL21ldHJpY3MvaW5kZXhcIlxyXG5pbXBvcnQgeyBuZXVtYWlyX3N1bSB9IGZyb20gXCIuLi9udW1lcmljYWwvaW5kZXhcIjtcclxuXHJcbi8qKlxyXG4gKiBDb21wdXRlcyB0aGUgUVIgRGVjb21wb3NpdGlvbiBvZiB0aGUgTWF0cml4IHtAbGluayBBfSB1c2luZyBHcmFtLVNjaG1pZHQgcHJvY2Vzcy5cclxuICogQG1lbWJlcm9mIG1vZHVsZTpsaW5lYXJfYWxnZWJyYVxyXG4gKiBAYWxpYXMgcXJcclxuICogQHBhcmFtIHtNYXRyaXh9IEFcclxuICogQHJldHVybnMge3tSOiBNYXRyaXgsIFE6IE1hdHJpeH19XHJcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1FSX2RlY29tcG9zaXRpb24jVXNpbmdfdGhlX0dyYW0lRTIlODAlOTNTY2htaWR0X3Byb2Nlc3N9XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihBKSB7XHJcbiAgICBjb25zdCBbcm93cywgY29sc10gPSBBLnNoYXBlO1xyXG4gICAgY29uc3QgUSA9IG5ldyBNYXRyaXgocm93cywgY29scywgXCJpZGVudGl0eVwiKTtcclxuICAgIGNvbnN0IFIgPSBuZXcgTWF0cml4KGNvbHMsIGNvbHMsIDApO1xyXG5cclxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sczsgKytqKSB7XHJcbiAgICAgICAgbGV0IHYgPSBBLmNvbChqKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGo7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBxID0gUS5jb2woaSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHFfZG90X3YgPSBuZXVtYWlyX3N1bShxLm1hcCgocV8sIGspID0+IHFfICogdltrXSkpO1xyXG4gICAgICAgICAgICBSLnNldF9lbnRyeShpLGosIHFfZG90X3YpO1xyXG4gICAgICAgICAgICB2ID0gdi5tYXAoKHZfLCBrKSA9PiB2XyAtIHFfZG90X3YgKiBxW2tdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgdl9ub3JtID0gbm9ybSh2LCBldWNsaWRlYW4pO1xyXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcm93czsgKytrKSB7XHJcbiAgICAgICAgICAgIFEuc2V0X2VudHJ5KGssIGosIHZba10gLyB2X25vcm0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBSLnNldF9lbnRyeShqLGosIHZfbm9ybSlcclxuICAgIH1cclxuICAgIHJldHVybiB7XCJSXCI6IFIsIFwiUVwiOiBRfTtcclxufVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./linear_algebra/qr.js\n");

/***/ }),

/***/ "./linear_algebra/simultaneous_poweriteration.js":
/*!*******************************************************!*\
  !*** ./linear_algebra/simultaneous_poweriteration.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"./linear_algebra/index.js\");\n/* harmony import */ var _matrix_Matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../matrix/Matrix */ \"./matrix/Matrix.js\");\n/* harmony import */ var _util_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/index */ \"./util/index.js\");\n/* harmony import */ var _numerical_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../numerical/index */ \"./numerical/index.js\");\n\n\n\n\n/**\r\n * Computes the {@link k} biggest Eigenvectors and Eigenvalues from Matrix {@link A} with the QR-Algorithm.\r\n * @param {Matrix} A - The Matrix\r\n * @param {Number} k - The number of eigenvectors and eigenvalues to compute.\r\n * @param {Number} [max_iterations=100] - The number of maxiumum iterations the algorithm should run.\r\n * @param {Number|Randomizer} [seed=1212] - The seed value or a randomizer used in the algorithm.\r\n * @returns {{eigenvalues: Array, eigenvectors: Array}} - The {@link k} biggest eigenvectors and eigenvalues of Matrix {@link A}.\r\n */\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(A, k = 2, max_iterations = 100, seed = 1212) {\n  const randomizer = seed instanceof _util_index__WEBPACK_IMPORTED_MODULE_2__.Randomizer ? seed : new _util_index__WEBPACK_IMPORTED_MODULE_2__.Randomizer(seed);\n  if (!(A instanceof _matrix_Matrix__WEBPACK_IMPORTED_MODULE_1__.Matrix)) A = _matrix_Matrix__WEBPACK_IMPORTED_MODULE_1__.Matrix.from(A);\n  const n = A.shape[0];\n  let {\n    Q: Q,\n    R: R\n  } = (0,_index__WEBPACK_IMPORTED_MODULE_0__.qr)(new _matrix_Matrix__WEBPACK_IMPORTED_MODULE_1__.Matrix(n, k, () => randomizer.random));\n\n  while (max_iterations--) {\n    const oldR = R.clone();\n    const Z = A.dot(Q);\n    const QR = (0,_index__WEBPACK_IMPORTED_MODULE_0__.qr)(Z);\n    Q = QR.Q;\n    R = QR.R;\n\n    if ((0,_numerical_index__WEBPACK_IMPORTED_MODULE_3__.neumair_sum)(R.sub(oldR).diag) / n < 1e-12) {\n      max_iterations = 0;\n    }\n  }\n\n  const eigenvalues = R.diag;\n  const eigenvectors = Q.transpose().to2dArray;\n  return {\n    \"eigenvalues\": eigenvalues,\n    \"eigenvectors\": eigenvectors\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL2xpbmVhcl9hbGdlYnJhL3NpbXVsdGFuZW91c19wb3dlcml0ZXJhdGlvbi5qcz9jZTgwIl0sIm5hbWVzIjpbIkEiLCJrIiwibWF4X2l0ZXJhdGlvbnMiLCJzZWVkIiwicmFuZG9taXplciIsIlJhbmRvbWl6ZXIiLCJNYXRyaXgiLCJuIiwic2hhcGUiLCJRIiwiUiIsInFyIiwicmFuZG9tIiwib2xkUiIsImNsb25lIiwiWiIsImRvdCIsIlFSIiwibmV1bWFpcl9zdW0iLCJzdWIiLCJkaWFnIiwiZWlnZW52YWx1ZXMiLCJlaWdlbnZlY3RvcnMiLCJ0cmFuc3Bvc2UiLCJ0bzJkQXJyYXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLDZCQUFlLG9DQUFTQSxDQUFULEVBQVlDLENBQUMsR0FBRyxDQUFoQixFQUFtQkMsY0FBYyxHQUFDLEdBQWxDLEVBQXVDQyxJQUFJLEdBQUMsSUFBNUMsRUFBa0Q7QUFDN0QsUUFBTUMsVUFBVSxHQUFHRCxJQUFJLFlBQVlFLG1EQUFoQixHQUE2QkYsSUFBN0IsR0FBb0MsSUFBSUUsbURBQUosQ0FBZUYsSUFBZixDQUF2RDtBQUNBLE1BQUksRUFBRUgsQ0FBQyxZQUFZTSxrREFBZixDQUFKLEVBQTRCTixDQUFDLEdBQUdNLHVEQUFBLENBQVlOLENBQVosQ0FBSjtBQUM1QixRQUFNTyxDQUFDLEdBQUdQLENBQUMsQ0FBQ1EsS0FBRixDQUFRLENBQVIsQ0FBVjtBQUNBLE1BQUk7QUFBRUMsS0FBQyxFQUFFQSxDQUFMO0FBQVFDLEtBQUMsRUFBRUE7QUFBWCxNQUFpQkMsMENBQUUsQ0FBQyxJQUFJTCxrREFBSixDQUFXQyxDQUFYLEVBQWNOLENBQWQsRUFBaUIsTUFBTUcsVUFBVSxDQUFDUSxNQUFsQyxDQUFELENBQXZCOztBQUNBLFNBQU9WLGNBQWMsRUFBckIsRUFBeUI7QUFDckIsVUFBTVcsSUFBSSxHQUFHSCxDQUFDLENBQUNJLEtBQUYsRUFBYjtBQUNBLFVBQU1DLENBQUMsR0FBR2YsQ0FBQyxDQUFDZ0IsR0FBRixDQUFNUCxDQUFOLENBQVY7QUFDQSxVQUFNUSxFQUFFLEdBQUdOLDBDQUFFLENBQUNJLENBQUQsQ0FBYjtBQUNBTixLQUFDLEdBQUdRLEVBQUUsQ0FBQ1IsQ0FBUDtBQUNBQyxLQUFDLEdBQUdPLEVBQUUsQ0FBQ1AsQ0FBUDs7QUFDQSxRQUFJUSw2REFBVyxDQUFDUixDQUFDLENBQUNTLEdBQUYsQ0FBTU4sSUFBTixFQUFZTyxJQUFiLENBQVgsR0FBZ0NiLENBQWhDLEdBQW9DLEtBQXhDLEVBQStDO0FBQzNDTCxvQkFBYyxHQUFHLENBQWpCO0FBQ0g7QUFDSjs7QUFFRCxRQUFNbUIsV0FBVyxHQUFHWCxDQUFDLENBQUNVLElBQXRCO0FBQ0EsUUFBTUUsWUFBWSxHQUFHYixDQUFDLENBQUNjLFNBQUYsR0FBY0MsU0FBbkM7QUFDQSxTQUFPO0FBQ0gsbUJBQWVILFdBRFo7QUFFSCxvQkFBZ0JDO0FBRmIsR0FBUDtBQUlIIiwiZmlsZSI6Ii4vbGluZWFyX2FsZ2VicmEvc2ltdWx0YW5lb3VzX3Bvd2VyaXRlcmF0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcXIgfSBmcm9tIFwiLi9pbmRleFwiO1xyXG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tIFwiLi4vbWF0cml4L01hdHJpeFwiO1xyXG5pbXBvcnQgeyBSYW5kb21pemVyIH0gZnJvbSBcIi4uL3V0aWwvaW5kZXhcIjtcclxuaW1wb3J0IHsgbmV1bWFpcl9zdW0gfSBmcm9tIFwiLi4vbnVtZXJpY2FsL2luZGV4XCI7XHJcblxyXG4vKipcclxuICogQ29tcHV0ZXMgdGhlIHtAbGluayBrfSBiaWdnZXN0IEVpZ2VudmVjdG9ycyBhbmQgRWlnZW52YWx1ZXMgZnJvbSBNYXRyaXgge0BsaW5rIEF9IHdpdGggdGhlIFFSLUFsZ29yaXRobS5cclxuICogQHBhcmFtIHtNYXRyaXh9IEEgLSBUaGUgTWF0cml4XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBrIC0gVGhlIG51bWJlciBvZiBlaWdlbnZlY3RvcnMgYW5kIGVpZ2VudmFsdWVzIHRvIGNvbXB1dGUuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWF4X2l0ZXJhdGlvbnM9MTAwXSAtIFRoZSBudW1iZXIgb2YgbWF4aXVtdW0gaXRlcmF0aW9ucyB0aGUgYWxnb3JpdGhtIHNob3VsZCBydW4uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfFJhbmRvbWl6ZXJ9IFtzZWVkPTEyMTJdIC0gVGhlIHNlZWQgdmFsdWUgb3IgYSByYW5kb21pemVyIHVzZWQgaW4gdGhlIGFsZ29yaXRobS5cclxuICogQHJldHVybnMge3tlaWdlbnZhbHVlczogQXJyYXksIGVpZ2VudmVjdG9yczogQXJyYXl9fSAtIFRoZSB7QGxpbmsga30gYmlnZ2VzdCBlaWdlbnZlY3RvcnMgYW5kIGVpZ2VudmFsdWVzIG9mIE1hdHJpeCB7QGxpbmsgQX0uXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihBLCBrID0gMiwgbWF4X2l0ZXJhdGlvbnM9MTAwLCBzZWVkPTEyMTIpIHtcclxuICAgIGNvbnN0IHJhbmRvbWl6ZXIgPSBzZWVkIGluc3RhbmNlb2YgUmFuZG9taXplciA/IHNlZWQgOiBuZXcgUmFuZG9taXplcihzZWVkKTtcclxuICAgIGlmICghKEEgaW5zdGFuY2VvZiBNYXRyaXgpKSBBID0gTWF0cml4LmZyb20oQSk7XHJcbiAgICBjb25zdCBuID0gQS5zaGFwZVswXVxyXG4gICAgbGV0IHsgUTogUSwgUjogUiB9ID0gcXIobmV3IE1hdHJpeChuLCBrLCAoKSA9PiByYW5kb21pemVyLnJhbmRvbSkpO1xyXG4gICAgd2hpbGUgKG1heF9pdGVyYXRpb25zLS0pIHtcclxuICAgICAgICBjb25zdCBvbGRSID0gUi5jbG9uZSgpO1xyXG4gICAgICAgIGNvbnN0IFogPSBBLmRvdChRKTtcclxuICAgICAgICBjb25zdCBRUiA9IHFyKFopOyBcclxuICAgICAgICBRID0gUVIuUTtcclxuICAgICAgICBSID0gUVIuUjtcclxuICAgICAgICBpZiAobmV1bWFpcl9zdW0oUi5zdWIob2xkUikuZGlhZykgLyBuIDwgMWUtMTIpIHtcclxuICAgICAgICAgICAgbWF4X2l0ZXJhdGlvbnMgPSAwO1xyXG4gICAgICAgIH0gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVpZ2VudmFsdWVzID0gUi5kaWFnO1xyXG4gICAgY29uc3QgZWlnZW52ZWN0b3JzID0gUS50cmFuc3Bvc2UoKS50bzJkQXJyYXk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIFwiZWlnZW52YWx1ZXNcIjogZWlnZW52YWx1ZXMsXHJcbiAgICAgICAgXCJlaWdlbnZlY3RvcnNcIjogZWlnZW52ZWN0b3JzLFxyXG4gICAgfTtcclxufVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./linear_algebra/simultaneous_poweriteration.js\n");

/***/ }),

/***/ "./matrix/Matrix.js":
/*!**************************!*\
  !*** ./matrix/Matrix.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Matrix\": () => (/* binding */ Matrix)\n/* harmony export */ });\n/* harmony import */ var _numerical_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../numerical/index */ \"./numerical/index.js\");\nlet _Symbol$iterator;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n/**\r\n * @class\r\n * @alias Matrix\r\n * @requires module:numerical/neumair_sum\r\n */\n\n_Symbol$iterator = Symbol.iterator;\nclass Matrix {\n  /**\r\n   * creates a new Matrix. Entries are stored in a Float64Array. \r\n   * @constructor\r\n   * @memberof module:matrix\r\n   * @alias Matrix\r\n   * @param {number} rows - The amount of rows of the matrix.\r\n   * @param {number} cols - The amount of columns of the matrix.\r\n   * @param {(function|string|number)} value=0 - Can be a function with row and col as parameters, a number, or \"zeros\", \"identity\" or \"I\", or \"center\".\r\n   *  - **function**: for each entry the function gets called with the parameters for the actual row and column.\r\n   *  - **string**: allowed are\r\n   *      - \"zero\", creates a zero matrix.\r\n   *      - \"identity\" or \"I\", creates an identity matrix.\r\n   *      - \"center\", creates an center matrix.\r\n   *  - **number**: create a matrix filled with the given value.\r\n   * @example\r\n   * \r\n   * let A = new Matrix(10, 10, () => Math.random()); //creates a 10 times 10 random matrix.\r\n   * let B = new Matrix(3, 3, \"I\"); // creates a 3 times 3 identity matrix.\r\n   * @returns {Matrix} returns a {@link rows} times {@link cols} Matrix filled with {@link value}.\r\n   */\n  constructor(rows = null, cols = null, value = null) {\n    _defineProperty(this, _Symbol$iterator, this.iterate_rows);\n\n    this._rows = rows;\n    this._cols = cols;\n    this._data = null;\n\n    if (rows && cols) {\n      if (!value) {\n        this._data = new Float64Array(rows * cols);\n        return this;\n      }\n\n      if (typeof value === \"function\") {\n        this._data = new Float64Array(rows * cols);\n\n        for (let row = 0; row < rows; ++row) {\n          for (let col = 0; col < cols; ++col) {\n            this._data[row * cols + col] = value(row, col);\n          }\n        }\n\n        return this;\n      }\n\n      if (typeof value === \"string\") {\n        if (value === \"zeros\") {\n          return new Matrix(rows, cols, 0);\n        }\n\n        if (value === \"identity\" || value === \"I\") {\n          this._data = new Float64Array(rows * cols);\n\n          for (let row = 0; row < rows; ++row) {\n            this._data[row * cols + row] = 1;\n          }\n\n          return this;\n        }\n\n        if (value === \"center\" && rows == cols) {\n          this._data = new Float64Array(rows * cols);\n\n          value = (i, j) => (i === j ? 1 : 0) - 1 / rows;\n\n          for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col) {\n              this._data[row * cols + col] = value(row, col);\n            }\n          }\n\n          return this;\n        }\n      }\n\n      if (typeof value === \"number\") {\n        this._data = new Float64Array(rows * cols);\n\n        for (let row = 0; row < rows; ++row) {\n          for (let col = 0; col < cols; ++col) {\n            this._data[row * cols + col] = value;\n          }\n        }\n\n        return this;\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * Creates a Matrix out of {@link A}.\r\n   * @param {(Matrix|Array|Float64Array|number)} A - The matrix, array, or number, which should converted to a Matrix.\r\n   * @param {\"row\"|\"col\"|\"diag\"} [type = \"row\"] - If {@link A} is a Array or Float64Array, then type defines if it is a row- or a column vector. \r\n   * @returns {Matrix}\r\n   * \r\n   * @example\r\n   * let A = Matrix.from([[1, 0], [0, 1]]); //creates a two by two identity matrix.\r\n   * let S = Matrix.from([1, 2, 3], \"diag\"); // creates a three by three matrix with 1, 2, 3 on its diagonal.\r\n   */\n\n\n  static from(A, type = \"row\") {\n    if (A instanceof Matrix) {\n      return A.clone();\n    } else if (Array.isArray(A) || A instanceof Float64Array) {\n      let m = A.length;\n      if (m === 0) throw \"Array is empty\"; // 1d\n\n      if (!Array.isArray(A[0]) && !(A[0] instanceof Float64Array)) {\n        if (type === \"row\") {\n          return new Matrix(1, m, (_, j) => A[j]);\n        } else if (type === \"col\") {\n          return new Matrix(m, 1, i => A[i]);\n        } else if (type === \"diag\") {\n          return new Matrix(m, m, (i, j) => i == j ? A[i] : 0);\n        } else {\n          throw \"1d array has NaN entries\";\n        } // 2d\n\n      } else if (Array.isArray(A[0]) || A[0] instanceof Float64Array) {\n        let n = A[0].length;\n\n        for (let row = 0; row < m; ++row) {\n          if (A[row].length !== n) {\n            throw \"various array lengths\";\n          }\n        }\n\n        return new Matrix(m, n, (i, j) => A[i][j]);\n      }\n    } else if (typeof A === \"number\") {\n      return new Matrix(1, 1, A);\n    } else {\n      throw \"error\";\n    }\n  }\n  /**\r\n   * Returns the {@link row}th row from the Matrix.\r\n   * @param {int} row \r\n   * @returns {Array}\r\n   */\n\n\n  row(row) {\n    /* let result_row = new Array(this._cols);\r\n    for (let col = 0; col < this._cols; ++col) {\r\n        result_row[col] = this._data[row * this._cols + col];\r\n    }\r\n    return result_row; */\n    const data = this._data;\n    const cols = this._cols;\n    return data.subarray(row * cols, (row + 1) * cols);\n  }\n  /**\r\n   * Returns an generator yielding each row of the Matrix.\r\n   */\n\n\n  *iterate_rows() {\n    const cols = this._cols;\n    const rows = this._rows;\n    const data = this._data;\n\n    for (let row = 0; row < rows; ++row) {\n      yield data.subarray(row * cols, (row + 1) * cols);\n    }\n  }\n  /**\r\n   * Makes a {@link Matrix} object an iterable object.\r\n   */\n\n\n  /**\r\n   * Sets the entries of {@link row}th row from the Matrix to the entries from {@link values}.\r\n   * @param {int} row \r\n   * @param {Array} values \r\n   * @returns {Matrix}\r\n   */\n  set_row(row, values) {\n    let cols = this._cols;\n\n    if (Array.isArray(values) && values.length === cols) {\n      let offset = row * cols;\n\n      for (let col = 0; col < cols; ++col) {\n        this._data[offset + col] = values[col];\n      }\n    } else if (values instanceof Matrix && values.shape[1] === cols && values.shape[0] === 1) {\n      let offset = row * cols;\n\n      for (let col = 0; col < cols; ++col) {\n        this._data[offset + col] = values._data[col];\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * Returns the {@link col}th column from the Matrix.\r\n   * @param {int} col \r\n   * @returns {Array}\r\n   */\n\n\n  col(col) {\n    let result_col = new Float64Array(this._rows);\n\n    for (let row = 0; row < this._rows; ++row) {\n      result_col[row] = this._data[row * this._cols + col];\n    }\n\n    return result_col;\n  }\n  /**\r\n   * Returns the {@link col}th entry from the {@link row}th row of the Matrix.\r\n   * @param {int} row \r\n   * @param {int} col \r\n   * @returns {float64}\r\n   */\n\n\n  entry(row, col) {\n    return this._data[row * this._cols + col];\n  }\n  /**\r\n   * Sets the {@link col}th entry from the {@link row}th row of the Matrix to the given {@link value}.\r\n   * @param {int} row \r\n   * @param {int} col \r\n   * @param {float64} value\r\n   * @returns {Matrix}\r\n   */\n\n\n  set_entry(row, col, value) {\n    this._data[row * this._cols + col] = value;\n    return this;\n  }\n  /**\r\n   * Returns a new transposed Matrix.\r\n   * @returns {Matrix}\r\n   */\n\n\n  transpose() {\n    let B = new Matrix(this._cols, this._rows, (row, col) => this.entry(col, row));\n    return B;\n  }\n  /**\r\n   * Returns a new transposed Matrix. Short-form of {@function transpose}.\r\n   * @returns {Matrix}\r\n   */\n\n\n  get T() {\n    return this.transpose();\n  }\n  /**\r\n   * Returns the inverse of the Matrix.\r\n   * @returns {Matrix}\r\n   */\n\n\n  inverse() {\n    const rows = this._rows;\n    const cols = this._cols;\n    let B = new Matrix(rows, 2 * cols, (i, j) => {\n      if (j >= cols) {\n        return i === j - cols ? 1 : 0;\n      } else {\n        return this.entry(i, j);\n      }\n    });\n    let h = 0;\n    let k = 0;\n\n    while (h < rows && k < cols) {\n      var i_max = 0;\n      let max_val = -Infinity;\n\n      for (let i = h; i < rows; ++i) {\n        let val = Math.abs(B.entry(i, k));\n\n        if (max_val < val) {\n          i_max = i;\n          max_val = val;\n        }\n      }\n\n      if (B.entry(i_max, k) == 0) {\n        k++;\n      } else {\n        // swap rows\n        for (let j = 0; j < 2 * cols; ++j) {\n          let h_val = B.entry(h, j);\n          let i_val = B.entry(i_max, j);\n          B.set_entry(h, j, h_val);\n          B.set_entry(i_max, j, i_val);\n        }\n\n        for (let i = h + 1; i < rows; ++i) {\n          let f = B.entry(i, k) / B.entry(h, k);\n          B.set_entry(i, k, 0);\n\n          for (let j = k + 1; j < 2 * cols; ++j) {\n            B.set_entry(i, j, B.entry(i, j) - B.entry(h, j) * f);\n          }\n        }\n\n        h++;\n        k++;\n      }\n    }\n\n    for (let row = 0; row < rows; ++row) {\n      let f = B.entry(row, row);\n\n      for (let col = row; col < 2 * cols; ++col) {\n        B.set_entry(row, col, B.entry(row, col) / f);\n      }\n    }\n\n    for (let row = rows - 1; row >= 0; --row) {\n      let B_row_row = B.entry(row, row);\n\n      for (let i = 0; i < row; i++) {\n        let B_i_row = B.entry(i, row);\n        let f = B_i_row / B_row_row;\n\n        for (let j = i; j < 2 * cols; ++j) {\n          let B_i_j = B.entry(i, j);\n          let B_row_j = B.entry(row, j);\n          B_i_j = B_i_j - B_row_j * f;\n          B.set_entry(i, j, B_i_j);\n        }\n      }\n    }\n\n    return new Matrix(rows, cols, (i, j) => B.entry(i, j + cols));\n  }\n  /**\r\n   * Returns the dot product. If {@link B} is an Array or Float64Array then an Array gets returned. If {@link B} is a Matrix then a Matrix gets returned.\r\n   * @param {(Matrix|Array|Float64Array)} B the right side\r\n   * @returns {(Matrix|Array)}\r\n   */\n\n\n  dot(B) {\n    if (B instanceof Matrix) {\n      let A = this;\n\n      if (A.shape[1] !== B.shape[0]) {\n        throw `A.dot(B): A is a ${A.shape.join(\" x \")}-Matrix, B is a ${B.shape.join(\" x \")}-Matrix: \n                A has ${A.shape[1]} cols and B ${B.shape[0]} rows. \n                Must be equal!`;\n      }\n\n      let I = A.shape[1];\n      let C = new Matrix(A.shape[0], B.shape[1], (row, col) => {\n        const A_i = A.row(row);\n        const B_i = B.col(col);\n        let sum = 0;\n\n        for (let i = 0; i < I; ++i) {\n          sum += A_i[i] * B_i[i];\n        }\n\n        return sum;\n      });\n      return C;\n    } else if (Array.isArray(B) || B instanceof Float64Array) {\n      let rows = this._rows;\n\n      if (B.length !== rows) {\n        throw `A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`;\n      }\n\n      let C = new Array(rows);\n\n      for (let row = 0; row < rows; ++row) {\n        C[row] = (0,_numerical_index__WEBPACK_IMPORTED_MODULE_0__.neumair_sum)(this.row(row).map(e => e * B[row]));\n      }\n\n      return C;\n    } else {\n      throw `B must be Matrix or Array`;\n    }\n  }\n  /**\r\n   * Computes the outer product from {@link this} and {@link B}.\r\n   * @param {Matrix} B \r\n   * @returns {Matrix}\r\n   */\n\n\n  outer(B) {\n    let A = this;\n    let l = A._data.length;\n    let r = B._data.length;\n    if (l != r) return undefined;\n    let C = new Matrix();\n    C.shape = [l, l, (i, j) => {\n      if (i <= j) {\n        return A._data[i] * B._data[j];\n      } else {\n        return C.entry(j, i);\n      }\n    }];\n    return C;\n  }\n  /**\r\n   * Appends matrix {@link B} to the matrix.\r\n   * @param {Matrix} B - matrix to append.\r\n   * @param {\"horizontal\"|\"vertical\"|\"diag\"} [type = \"horizontal\"] - type of concatenation.\r\n   * @returns {Matrix}\r\n   * @example\r\n   * \r\n   * let A = Matrix.from([[1, 1], [1, 1]]); // 2 by 2 matrix filled with ones.\r\n   * let B = Matrix.from([[2, 2], [2, 2]]); // 2 by 2 matrix filled with twos.\r\n   * \r\n   * A.concat(B, \"horizontal\"); // 2 by 4 matrix. [[1, 1, 2, 2], [1, 1, 2, 2]]\r\n   * A.concat(B, \"vertical\"); // 4 by 2 matrix. [[1, 1], [1, 1], [2, 2], [2, 2]]\r\n   * A.concat(B, \"diag\"); // 4 by 4 matrix. [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 2, 2], [0, 0, 2, 2]]\r\n   */\n\n\n  concat(B, type = \"horizontal\") {\n    const A = this;\n    const [rows_A, cols_A] = A.shape;\n    const [rows_B, cols_B] = B.shape;\n\n    if (type == \"horizontal\") {\n      if (rows_A != rows_B) throw `A.concat(B, \"horizontal\"): A and B need same number of rows, A has ${rows_A} rows, B has ${rows_B} rows.`;\n      const X = new Matrix(rows_A, cols_A + cols_B, \"zeros\");\n      X.set_block(0, 0, A);\n      X.set_block(0, cols_A, B);\n      return X;\n    } else if (type == \"vertical\") {\n      if (cols_A != cols_B) throw `A.concat(B, \"vertical\"): A and B need same number of columns, A has ${cols_A} columns, B has ${cols_B} columns.`;\n      const X = new Matrix(rows_A + rows_B, cols_A, \"zeros\");\n      X.set_block(0, 0, A);\n      X.set_block(rows_A, 0, B);\n      return X;\n    } else if (type == \"diag\") {\n      const X = new Matrix(rows_A + rows_B, cols_A + cols_B, \"zeros\");\n      X.set_block(0, 0, A);\n      X.set_block(rows_A, cols_A, B);\n      return X;\n    } else {\n      throw `type must be \"horizontal\" or \"vertical\", but type is ${type}!`;\n    }\n  }\n  /**\r\n   * Writes the entries of B in A at an offset position given by {@link offset_row} and {@link offset_col}.\r\n   * @param {int} offset_row \r\n   * @param {int} offset_col \r\n   * @param {Matrix} B \r\n   * @returns {Matrix}\r\n   */\n\n\n  set_block(offset_row, offset_col, B) {\n    let [rows, cols] = B.shape;\n\n    for (let row = 0; row < rows; ++row) {\n      if (row > this._rows) continue;\n\n      for (let col = 0; col < cols; ++col) {\n        if (col > this._cols) continue;\n        this.set_entry(row + offset_row, col + offset_col, B.entry(row, col));\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * Extracts the entries from the {@link start_row}th row to the {@link end_row}th row, the {@link start_col}th column to the {@link end_col}th column of the matrix.\r\n   * If {@link end_row} or {@link end_col} is empty, the respective value is set to {@link this.rows} or {@link this.cols}.\r\n   * @param {Number} start_row \r\n   * @param {Number} start_col\r\n   * @param {Number} [end_row = null]\r\n   * @param {Number} [end_col = null] \r\n   * @returns {Matrix} Returns a end_row - start_row times end_col - start_col matrix, with respective entries from the matrix.\r\n   * @example\r\n   * \r\n   * let A = Matrix.from([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // a 3 by 3 matrix.\r\n   * \r\n   * A.get_block(1, 1).to2dArray; // [[5, 6], [8, 9]]\r\n   * A.get_block(0, 0, 1, 1).to2dArray; // [[1]]\r\n   * A.get_block(1, 1, 2, 2).to2dArray; // [[5]]\r\n   * A.get_block(0, 0, 2, 2).to2dArray; // [[1, 2], [4, 5]]\r\n   */\n\n\n  get_block(start_row, start_col, end_row = null, end_col = null) {\n    const [rows, cols] = this.shape;\n    /*if (!end_row)) {\r\n        end_row = rows;\r\n    }\r\n        end_col = cols;\r\n    }*/\n\n    end_row = end_row ?? rows;\n    end_col = end_col ?? cols;\n\n    if (end_row <= start_row || end_col <= start_col) {\n      throw `\n                end_row must be greater than start_row, and \n                end_col must be greater than start_col, but\n                end_row = ${end_row}, start_row = ${start_row}, end_col = ${end_col}, and start_col = ${start_col}!`;\n    }\n\n    const X = new Matrix(end_row - start_row, end_col - start_col, \"zeros\");\n\n    for (let row = start_row, new_row = 0; row < end_row; ++row, ++new_row) {\n      for (let col = start_col, new_col = 0; col < end_col; ++col, ++new_col) {\n        X.set_entry(new_row, new_col, this.entry(row, col));\n      }\n    }\n\n    return X; //return new Matrix(end_row - start_row, end_col - start_col, (i, j) => this.entry(i + start_row, j + start_col));\n  }\n  /**\r\n   * Returns a new array gathering entries defined by the indices given by argument.\r\n   * @param {Array<Number>} row_indices - Array consists of indices of rows for gathering entries of this matrix \r\n   * @param {Array<Number>} col_indices  - Array consists of indices of cols for gathering entries of this matrix \r\n   * @returns {Matrix}\r\n   */\n\n\n  gather(row_indices, col_indices) {\n    const N = row_indices.length;\n    const D = col_indices.length;\n    const R = new Matrix(N, D);\n\n    for (let i = 0; i < N; ++i) {\n      const row_index = row_indices[i];\n\n      for (let j = 0; j < N; ++j) {\n        const col_index = col_indices[j];\n        R.set_entry(i, j, this.entry(row_index, col_index));\n      }\n    }\n\n    return R;\n  }\n  /**\r\n   * Applies a function to each entry of the matrix.\r\n   * @param {function} f function takes 2 parameters, the value of the actual entry and a value given by the function {@link v}. The result of {@link f} gets writen to the Matrix.\r\n   * @param {function} v function takes 2 parameters for row and col, and returns a value witch should be applied to the colth entry of the rowth row of the matrix.\r\n   */\n\n\n  _apply_array(f, v) {\n    const data = this._data;\n    const [rows, cols] = this.shape;\n\n    for (let row = 0; row < rows; ++row) {\n      const offset = row * cols;\n\n      for (let col = 0; col < cols; ++col) {\n        const i = offset + col;\n        data[i] = f(data[i], v(row, col));\n      }\n    }\n\n    return this;\n  }\n\n  _apply_rowwise_array(values, f) {\n    return this._apply_array(f, (_, j) => values[j]);\n  }\n\n  _apply_colwise_array(values, f) {\n    const data = this._data;\n    const [rows, cols] = this.shape;\n\n    for (let row = 0; row < rows; ++row) {\n      const offset = row * cols;\n\n      for (let col = 0; col < cols; ++col) {\n        const i = offset + col;\n        data[i] = f(data[i], values[row]);\n      }\n    }\n\n    return this;\n  }\n\n  _apply(value, f) {\n    let data = this._data;\n\n    if (value instanceof Matrix) {\n      let [value_rows, value_cols] = value.shape;\n      let [rows, cols] = this.shape;\n\n      if (value_rows === 1) {\n        if (cols !== value_cols) {\n          throw `cols !== value_cols`;\n        }\n\n        for (let row = 0; row < rows; ++row) {\n          for (let col = 0; col < cols; ++col) {\n            data[row * cols + col] = f(data[row * cols + col], value.entry(0, col));\n          }\n        }\n      } else if (value_cols === 1) {\n        if (rows !== value_rows) {\n          throw `rows !== value_rows`;\n        }\n\n        for (let row = 0; row < rows; ++row) {\n          for (let col = 0; col < cols; ++col) {\n            data[row * cols + col] = f(data[row * cols + col], value.entry(row, 0));\n          }\n        }\n      } else if (rows == value_rows && cols == value_cols) {\n        for (let row = 0; row < rows; ++row) {\n          for (let col = 0; col < cols; ++col) {\n            data[row * cols + col] = f(data[row * cols + col], value.entry(row, col));\n          }\n        }\n      } else {\n        throw `error`;\n      }\n    } else if (Array.isArray(value)) {\n      let rows = this._rows;\n      let cols = this._cols;\n\n      if (value.length === rows) {\n        for (let row = 0; row < rows; ++row) {\n          for (let col = 0; col < cols; ++col) {\n            data[row * cols + col] = f(data[row * cols + col], value[row]);\n          }\n        }\n      } else if (value.length === cols) {\n        for (let row = 0; row < rows; ++row) {\n          for (let col = 0; col < cols; ++col) {\n            data[row * cols + col] = f(data[row * cols + col], value[col]);\n          }\n        }\n      } else {\n        throw `error`;\n      }\n    } else {\n      for (let i = 0, n = this._rows * this._cols; i < n; ++i) {\n        data[i] = f(data[i], value);\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * Clones the Matrix.\r\n   * @returns {Matrix}\r\n   */\n\n\n  clone() {\n    let B = new Matrix();\n    B._rows = this._rows;\n    B._cols = this._cols;\n    B._data = this._data.slice(0);\n    return B;\n  }\n\n  mult(value) {\n    return this.clone()._apply(value, (a, b) => a * b);\n  }\n\n  divide(value) {\n    return this.clone()._apply(value, (a, b) => a / b);\n  }\n\n  add(value) {\n    return this.clone()._apply(value, (a, b) => a + b);\n  }\n\n  sub(value) {\n    return this.clone()._apply(value, (a, b) => a - b);\n  }\n  /**\r\n   * Returns the number of rows and columns of the Matrix.\r\n   * @returns {Array} An Array in the form [rows, columns].\r\n   */\n\n\n  get shape() {\n    return [this._rows, this._cols];\n  }\n  /**\r\n   * Returns the matrix in the given shape with the given function which returns values for the entries of the matrix.\r\n   * @param {Array} parameter - takes an Array in the form [rows, cols, value], where rows and cols are the number of rows and columns of the matrix, and value is a function which takes two parameters (row and col) which has to return a value for the colth entry of the rowth row.\r\n   * @returns {Matrix}\r\n   */\n\n\n  set shape([rows, cols, value = () => 0]) {\n    this._rows = rows;\n    this._cols = cols;\n    this._data = new Float64Array(rows * cols);\n\n    for (let row = 0; row < rows; ++row) {\n      for (let col = 0; col < cols; ++col) {\n        this._data[row * cols + col] = value(row, col);\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * Returns the Matrix as a two-dimensional Array.\r\n   * @returns {Array}\r\n   */\n\n\n  get to2dArray() {\n    /* const rows = this._rows;\r\n    const cols = this._cols;\r\n    let result = new Array(rows)\r\n    for (let row = 0; row < rows; ++row) {\r\n        let result_col = new Array(cols)\r\n        for (let col = 0; col < cols; ++col) {\r\n            result_col[col] = this.entry(row, col);\r\n        }\r\n        result[row] = result_col;\r\n    }\r\n    return result; */\n    return [...this.iterate_rows()];\n  }\n  /**\r\n   * Returns the diagonal of the Matrix.\r\n   * @returns {Array}\r\n   */\n\n\n  get diag() {\n    const rows = this._rows;\n    const cols = this._cols;\n    const min_row_col = Math.min(rows, cols);\n    let result = new Float64Array(min_row_col);\n\n    for (let i = 0; i < min_row_col; ++i) {\n      result[i] = this.entry(i, i);\n    }\n\n    return result;\n  }\n  /**\r\n   * Returns the mean of all entries of the Matrix.\r\n   * @returns {float64}\r\n   */\n\n\n  get mean() {\n    const sum = this.sum;\n    const n = this._rows * this._cols;\n    return sum / n;\n  }\n  /**\r\n   * Returns the sum oof all entries of the Matrix.\r\n   * @returns {number}\r\n   */\n\n\n  get sum() {\n    const data = this._data;\n    return (0,_numerical_index__WEBPACK_IMPORTED_MODULE_0__.neumair_sum)(data);\n  }\n  /**\r\n   * Returns the mean of each row of the matrix.\r\n   * @returns {Array}\r\n   */\n\n\n  get meanRows() {\n    const data = this._data;\n    const rows = this._rows;\n    const cols = this._cols;\n    let result = [];\n\n    for (let row = 0; row < rows; ++row) {\n      result[row] = 0;\n\n      for (let col = 0; col < cols; ++col) {\n        result[row] += data[row * cols + col];\n      }\n\n      result[row] /= cols;\n    }\n\n    return result;\n  }\n  /** Returns the mean of each column of the matrix.\r\n   * @returns {Array}\r\n   */\n\n\n  get meanCols() {\n    const data = this._data;\n    const rows = this._rows;\n    const cols = this._cols;\n    let result = [];\n\n    for (let col = 0; col < cols; ++col) {\n      result[col] = 0;\n\n      for (let row = 0; row < rows; ++row) {\n        result[col] += data[row * cols + col];\n      }\n\n      result[col] /= rows;\n    }\n\n    return result;\n  }\n\n  static solve_CG(A, b, randomizer, tol = 1e-3) {\n    const rows = A.shape[0];\n    const cols = b.shape[1];\n    let result = new Matrix(rows, 0);\n\n    for (let i = 0; i < cols; ++i) {\n      const b_i = Matrix.from(b.col(i)).T;\n      let x = new Matrix(rows, 1, () => randomizer.random);\n      let r = b_i.sub(A.dot(x));\n      let d = r.clone();\n\n      do {\n        const z = A.dot(d);\n        const alpha = r.T.dot(r).entry(0, 0) / d.T.dot(z).entry(0, 0);\n        x = x.add(d.mult(alpha));\n        const r_next = r.sub(z.mult(alpha));\n        const beta = r_next.T.dot(r_next).entry(0, 0) / r.T.dot(r).entry(0, 0);\n        d = r_next.add(d.mult(beta));\n        r = r_next;\n      } while (Math.abs(r.mean) > tol);\n\n      result = result.concat(x, \"horizontal\");\n    }\n\n    return result;\n  }\n  /**\r\n   * Solves the equation {@link A}x = {@link b}. Returns the result x.\r\n   * @param {Matrix} A - Matrix or LU Decomposition\r\n   * @param {Matrix} b - Matrix\r\n   * @returns {Matrix}\r\n   */\n\n\n  static solve(A, b) {\n    let {\n      L: L,\n      U: U\n    } = \"L\" in A && \"U\" in A ? A : Matrix.LU(A);\n    let rows = L.shape[0];\n    let x = b.clone(); // forward\n\n    for (let row = 0; row < rows; ++row) {\n      for (let col = 0; col < row - 1; ++col) {\n        x.set_entry(0, row, x.entry(0, row) - L.entry(row, col) * x.entry(1, col));\n      }\n\n      x.set_entry(0, row, x.entry(0, row) / L.entry(row, row));\n    } // backward\n\n\n    for (let row = rows - 1; row >= 0; --row) {\n      for (let col = rows - 1; col > row; --col) {\n        x.set_entry(0, row, x.entry(0, row) - U.entry(row, col) * x.entry(0, col));\n      }\n\n      x.set_entry(0, row, x.entry(0, row) / U.entry(row, row));\n    }\n\n    return x;\n  }\n  /**\r\n   * {@link L}{@link U} decomposition of the Matrix {@link A}. Creates two matrices, so that the dot product LU equals A.\r\n   * @param {Matrix} A \r\n   * @returns {{L: Matrix, U: Matrix}} result - Returns the left triangle matrix {@link L} and the upper triangle matrix {@link U}.\r\n   */\n\n\n  static LU(A) {\n    const rows = A.shape[0];\n    const L = new Matrix(rows, rows, \"zeros\");\n    const U = new Matrix(rows, rows, \"identity\");\n\n    for (let j = 0; j < rows; ++j) {\n      for (let i = j; i < rows; ++i) {\n        let sum = 0;\n\n        for (let k = 0; k < j; ++k) {\n          sum += L.entry(i, k) * U.entry(k, j);\n        }\n\n        L.set_entry(i, j, A.entry(i, j) - sum);\n      }\n\n      for (let i = j; i < rows; ++i) {\n        if (L.entry(j, j) === 0) {\n          return undefined;\n        }\n\n        let sum = 0;\n\n        for (let k = 0; k < j; ++k) {\n          sum += L.entry(j, k) * U.entry(k, i);\n        }\n\n        U.set_entry(j, i, (A.entry(j, i) - sum) / L.entry(j, j));\n      }\n    }\n\n    return {\n      L: L,\n      U: U\n    };\n  }\n  /**\r\n   * Computes the {@link k} components of the SVD decomposition of the matrix {@link M}\r\n   * @param {Matrix} M \r\n   * @param {int} [k=2] \r\n   * @returns {{U: Matrix, Sigma: Matrix, V: Matrix}}\r\n   */\n\n\n  static SVD(M, k = 2) {\n    const MT = M.T;\n    let MtM = MT.dot(M);\n    let MMt = M.dot(MT);\n    let {\n      eigenvectors: V,\n      eigenvalues: Sigma\n    } = simultaneous_poweriteration(MtM, k);\n    let {\n      eigenvectors: U\n    } = simultaneous_poweriteration(MMt, k);\n    return {\n      U: U,\n      Sigma: Sigma.map(sigma => Math.sqrt(sigma)),\n      V: V\n    }; //Algorithm 1a: Householder reduction to bidiagonal form:\n\n    /* const [m, n] = A.shape;\r\n    let U = new Matrix(m, n, (i, j) => i == j ? 1 : 0);\r\n    console.log(U.to2dArray)\r\n    let V = new Matrix(n, m, (i, j) => i == j ? 1 : 0);\r\n    console.log(V.to2dArray)\r\n    let B = Matrix.bidiagonal(A.clone(), U, V);\r\n    console.log(U,V,B)\r\n    return { U: U, \"Sigma\": B, V: V }; */\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./matrix/Matrix.js\n");

/***/ }),

/***/ "./matrix/distance_matrix.js":
/*!***********************************!*\
  !*** ./matrix/distance_matrix.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _Matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Matrix */ \"./matrix/Matrix.js\");\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(A, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_0__.euclidean) {\n  let n = A.shape[0];\n  /* let D = new Array(n);\r\n  for (let i = 0; i < n; ++i) {\r\n      D[i] = new Float64Array(n);\r\n  }\r\n  for (let i = 0; i < n; ++i) {\r\n      for (let j = i + 1; j < n; ++j) {\r\n          D[i][j] = D[j][i] = metric(A[i], A[j]);\r\n      }\r\n  } */\n\n  const D = new _Matrix__WEBPACK_IMPORTED_MODULE_1__.Matrix(n, n);\n\n  for (let i = 0; i < n; ++i) {\n    const A_i = A.row(i);\n\n    for (let j = i + 1; j < n; ++j) {\n      const dist = metric(A_i, A.row(j));\n      D.set_entry(i, j, dist);\n      D.set_entry(j, i, dist);\n    }\n  }\n\n  return D;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21hdHJpeC9kaXN0YW5jZV9tYXRyaXguanM/MzIyNiJdLCJuYW1lcyI6WyJBIiwibWV0cmljIiwiZXVjbGlkZWFuIiwibiIsInNoYXBlIiwiRCIsIk1hdHJpeCIsImkiLCJBX2kiLCJyb3ciLCJqIiwiZGlzdCIsInNldF9lbnRyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUVBLDZCQUFlLG9DQUFTQSxDQUFULEVBQVlDLE1BQU0sR0FBR0MscURBQXJCLEVBQWdDO0FBQzNDLE1BQUlDLENBQUMsR0FBR0gsQ0FBQyxDQUFDSSxLQUFGLENBQVEsQ0FBUixDQUFSO0FBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNJLFFBQU1DLENBQUMsR0FBRyxJQUFJQywyQ0FBSixDQUFXSCxDQUFYLEVBQWNBLENBQWQsQ0FBVjs7QUFDQSxPQUFLLElBQUlJLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdKLENBQXBCLEVBQXVCLEVBQUVJLENBQXpCLEVBQTRCO0FBQ3hCLFVBQU1DLEdBQUcsR0FBR1IsQ0FBQyxDQUFDUyxHQUFGLENBQU1GLENBQU4sQ0FBWjs7QUFDQSxTQUFLLElBQUlHLENBQUMsR0FBR0gsQ0FBQyxHQUFHLENBQWpCLEVBQW9CRyxDQUFDLEdBQUdQLENBQXhCLEVBQTJCLEVBQUVPLENBQTdCLEVBQWdDO0FBQzVCLFlBQU1DLElBQUksR0FBR1YsTUFBTSxDQUFDTyxHQUFELEVBQU1SLENBQUMsQ0FBQ1MsR0FBRixDQUFNQyxDQUFOLENBQU4sQ0FBbkI7QUFDQUwsT0FBQyxDQUFDTyxTQUFGLENBQVlMLENBQVosRUFBZUcsQ0FBZixFQUFrQkMsSUFBbEI7QUFDQU4sT0FBQyxDQUFDTyxTQUFGLENBQVlGLENBQVosRUFBZUgsQ0FBZixFQUFrQkksSUFBbEI7QUFDSDtBQUNKOztBQUNELFNBQU9OLENBQVA7QUFDSCIsImZpbGUiOiIuL21hdHJpeC9kaXN0YW5jZV9tYXRyaXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBldWNsaWRlYW4gfSBmcm9tIFwiLi4vbWV0cmljcy9pbmRleFwiXHJcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gXCIuL01hdHJpeFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oQSwgbWV0cmljID0gZXVjbGlkZWFuKSB7XHJcbiAgICBsZXQgbiA9IEEuc2hhcGVbMF07XHJcbiAgICAvKiBsZXQgRCA9IG5ldyBBcnJheShuKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgRFtpXSA9IG5ldyBGbG9hdDY0QXJyYXkobik7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IG47ICsraikge1xyXG4gICAgICAgICAgICBEW2ldW2pdID0gRFtqXVtpXSA9IG1ldHJpYyhBW2ldLCBBW2pdKTtcclxuICAgICAgICB9XHJcbiAgICB9ICovXHJcbiAgICBjb25zdCBEID0gbmV3IE1hdHJpeChuLCBuKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgQV9pID0gQS5yb3coaSk7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgbjsgKytqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3QgPSBtZXRyaWMoQV9pLCBBLnJvdyhqKSk7XHJcbiAgICAgICAgICAgIEQuc2V0X2VudHJ5KGksIGosIGRpc3QpO1xyXG4gICAgICAgICAgICBELnNldF9lbnRyeShqLCBpLCBkaXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./matrix/distance_matrix.js\n");

/***/ }),

/***/ "./matrix/index.js":
/*!*************************!*\
  !*** ./matrix/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"k_nearest_neighbors\": () => (/* reexport safe */ _k_nearest_neighbors__WEBPACK_IMPORTED_MODULE_0__.default),\n/* harmony export */   \"distance_matrix\": () => (/* reexport safe */ _distance_matrix__WEBPACK_IMPORTED_MODULE_1__.default),\n/* harmony export */   \"linspace\": () => (/* reexport safe */ _linspace__WEBPACK_IMPORTED_MODULE_2__.default),\n/* harmony export */   \"norm\": () => (/* reexport safe */ _norm__WEBPACK_IMPORTED_MODULE_3__.default),\n/* harmony export */   \"Matrix\": () => (/* reexport safe */ _Matrix__WEBPACK_IMPORTED_MODULE_4__.Matrix)\n/* harmony export */ });\n/* harmony import */ var _k_nearest_neighbors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./k_nearest_neighbors */ \"./matrix/k_nearest_neighbors.js\");\n/* harmony import */ var _distance_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./distance_matrix */ \"./matrix/distance_matrix.js\");\n/* harmony import */ var _linspace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./linspace */ \"./matrix/linspace.js\");\n/* harmony import */ var _norm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./norm */ \"./matrix/norm.js\");\n/* harmony import */ var _Matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Matrix */ \"./matrix/Matrix.js\");\n/**\r\n * @module matrix\r\n */\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21hdHJpeC9pbmRleC5qcz9mMGFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL21hdHJpeC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbW9kdWxlIG1hdHJpeFxyXG4gKi9cclxuZXhwb3J0IHtkZWZhdWx0IGFzIGtfbmVhcmVzdF9uZWlnaGJvcnN9IGZyb20gXCIuL2tfbmVhcmVzdF9uZWlnaGJvcnNcIjtcclxuZXhwb3J0IHtkZWZhdWx0IGFzIGRpc3RhbmNlX21hdHJpeH0gZnJvbSBcIi4vZGlzdGFuY2VfbWF0cml4XCI7XHJcbmV4cG9ydCB7ZGVmYXVsdCBhcyBsaW5zcGFjZX0gZnJvbSBcIi4vbGluc3BhY2VcIjtcclxuZXhwb3J0IHtkZWZhdWx0IGFzIG5vcm19IGZyb20gXCIuL25vcm1cIjtcclxuZXhwb3J0IHsgTWF0cml4IH0gZnJvbSBcIi4vTWF0cml4XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./matrix/index.js\n");

/***/ }),

/***/ "./matrix/k_nearest_neighbors.js":
/*!***************************************!*\
  !*** ./matrix/k_nearest_neighbors.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n\n\n/**\r\n * \r\n * @param {*} A \r\n * @param {*} k \r\n * @param {*} distance_matrix \r\n * @param {*} metric \r\n */\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(A, k, distance_matrix = null, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_1__.euclidean) {\n  const rows = A.shape[0];\n  let D = distance_matrix ?? (0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.distance_matrix)(A, metric);\n  /* for (let i = 0; i < n; ++i) {\r\n      D[i] = Array.from(D[i]).map((_,j) => {\r\n              return {\r\n                  i: i, j: j, distance: D[i][j]\r\n              }\r\n          })\r\n          .sort((a, b) => a.distance - b.distance)\r\n          .slice(1, k + 1)\r\n  } */\n\n  let nN = new Array(rows);\n\n  for (let row = 0; row < rows; ++row) {\n    nN[row] = Array.from(D.row(row)).map((distance, col) => {\n      return {\n        \"i\": row,\n        \"j\": col,\n        \"distance\": distance\n      };\n    }).sort((a, b) => a.distance - b.distance).slice(1, k + 1);\n  }\n\n  return nN;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21hdHJpeC9rX25lYXJlc3RfbmVpZ2hib3JzLmpzP2FiM2UiXSwibmFtZXMiOlsiQSIsImsiLCJkaXN0YW5jZV9tYXRyaXgiLCJtZXRyaWMiLCJldWNsaWRlYW4iLCJyb3dzIiwic2hhcGUiLCJEIiwiZG1hdHJpeCIsIm5OIiwiQXJyYXkiLCJyb3ciLCJmcm9tIiwibWFwIiwiZGlzdGFuY2UiLCJjb2wiLCJzb3J0IiwiYSIsImIiLCJzbGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLDZCQUFlLG9DQUFTQSxDQUFULEVBQVlDLENBQVosRUFBZUMsZUFBZSxHQUFHLElBQWpDLEVBQXVDQyxNQUFNLEdBQUdDLHFEQUFoRCxFQUEyRDtBQUN0RSxRQUFNQyxJQUFJLEdBQUdMLENBQUMsQ0FBQ00sS0FBRixDQUFRLENBQVIsQ0FBYjtBQUNBLE1BQUlDLENBQUMsR0FBR0wsZUFBZSxJQUFJTSw4REFBTyxDQUFDUixDQUFELEVBQUlHLE1BQUosQ0FBbEM7QUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0ksTUFBSU0sRUFBRSxHQUFHLElBQUlDLEtBQUosQ0FBVUwsSUFBVixDQUFUOztBQUNBLE9BQUssSUFBSU0sR0FBRyxHQUFHLENBQWYsRUFBa0JBLEdBQUcsR0FBR04sSUFBeEIsRUFBOEIsRUFBRU0sR0FBaEMsRUFBcUM7QUFDakNGLE1BQUUsQ0FBQ0UsR0FBRCxDQUFGLEdBQVVELEtBQUssQ0FBQ0UsSUFBTixDQUFXTCxDQUFDLENBQUNJLEdBQUYsQ0FBTUEsR0FBTixDQUFYLEVBQXVCRSxHQUF2QixDQUEyQixDQUFDQyxRQUFELEVBQVdDLEdBQVgsS0FBbUI7QUFDaEQsYUFBTztBQUNILGFBQUtKLEdBREY7QUFFSCxhQUFLSSxHQUZGO0FBR0gsb0JBQVlEO0FBSFQsT0FBUDtBQUtILEtBTkssRUFPTEUsSUFQSyxDQU9BLENBQUNDLENBQUQsRUFBSUMsQ0FBSixLQUFVRCxDQUFDLENBQUNILFFBQUYsR0FBYUksQ0FBQyxDQUFDSixRQVB6QixFQVFMSyxLQVJLLENBUUMsQ0FSRCxFQVFJbEIsQ0FBQyxHQUFHLENBUlIsQ0FBVjtBQVNIOztBQUNELFNBQU9RLEVBQVA7QUFDSCIsImZpbGUiOiIuL21hdHJpeC9rX25lYXJlc3RfbmVpZ2hib3JzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGlzdGFuY2VfbWF0cml4IGFzIGRtYXRyaXh9IGZyb20gXCIuLi9tYXRyaXgvaW5kZXhcIjtcclxuaW1wb3J0IHsgZXVjbGlkZWFuIH0gZnJvbSAnLi4vbWV0cmljcy9pbmRleCc7XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7Kn0gQSBcclxuICogQHBhcmFtIHsqfSBrIFxyXG4gKiBAcGFyYW0geyp9IGRpc3RhbmNlX21hdHJpeCBcclxuICogQHBhcmFtIHsqfSBtZXRyaWMgXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihBLCBrLCBkaXN0YW5jZV9tYXRyaXggPSBudWxsLCBtZXRyaWMgPSBldWNsaWRlYW4pIHtcclxuICAgIGNvbnN0IHJvd3MgPSBBLnNoYXBlWzBdO1xyXG4gICAgbGV0IEQgPSBkaXN0YW5jZV9tYXRyaXggPz8gZG1hdHJpeChBLCBtZXRyaWMpXHJcbiAgICAvKiBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIERbaV0gPSBBcnJheS5mcm9tKERbaV0pLm1hcCgoXyxqKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGk6IGksIGo6IGosIGRpc3RhbmNlOiBEW2ldW2pdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZSlcclxuICAgICAgICAgICAgLnNsaWNlKDEsIGsgKyAxKVxyXG4gICAgfSAqL1xyXG4gICAgbGV0IG5OID0gbmV3IEFycmF5KHJvd3MpO1xyXG4gICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgcm93czsgKytyb3cpIHtcclxuICAgICAgICBuTltyb3ddID0gQXJyYXkuZnJvbShELnJvdyhyb3cpKS5tYXAoKGRpc3RhbmNlLCBjb2wpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJpXCI6IHJvdyxcclxuICAgICAgICAgICAgICAgICAgICBcImpcIjogY29sLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZGlzdGFuY2VcIjogZGlzdGFuY2UsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZSlcclxuICAgICAgICAgICAgLnNsaWNlKDEsIGsgKyAxKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuTjtcclxufSBcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./matrix/k_nearest_neighbors.js\n");

/***/ }),

/***/ "./matrix/linspace.js":
/*!****************************!*\
  !*** ./matrix/linspace.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(start, end, number = null) {\n  if (!number) {\n    number = Math.max(Math.round(end - start) + 1, 1);\n  }\n\n  if (number < 2) {\n    return number === 1 ? [start] : [];\n  }\n\n  let result = new Array(number);\n  number -= 1;\n\n  for (let i = number; i >= 0; --i) {\n    result[i] = (i * end + (number - i) * start) / number;\n  }\n\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21hdHJpeC9saW5zcGFjZS5qcz8zN2JiIl0sIm5hbWVzIjpbInN0YXJ0IiwiZW5kIiwibnVtYmVyIiwiTWF0aCIsIm1heCIsInJvdW5kIiwicmVzdWx0IiwiQXJyYXkiLCJpIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsNkJBQWUsb0NBQVNBLEtBQVQsRUFBZ0JDLEdBQWhCLEVBQXFCQyxNQUFNLEdBQUcsSUFBOUIsRUFBb0M7QUFDL0MsTUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDVEEsVUFBTSxHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBU0QsSUFBSSxDQUFDRSxLQUFMLENBQVdKLEdBQUcsR0FBR0QsS0FBakIsSUFBMEIsQ0FBbkMsRUFBc0MsQ0FBdEMsQ0FBVDtBQUNIOztBQUNELE1BQUlFLE1BQU0sR0FBRyxDQUFiLEVBQWdCO0FBQ1osV0FBT0EsTUFBTSxLQUFLLENBQVgsR0FBZSxDQUFDRixLQUFELENBQWYsR0FBeUIsRUFBaEM7QUFDSDs7QUFDRCxNQUFJTSxNQUFNLEdBQUcsSUFBSUMsS0FBSixDQUFVTCxNQUFWLENBQWI7QUFDQUEsUUFBTSxJQUFJLENBQVY7O0FBQ0EsT0FBSyxJQUFJTSxDQUFDLEdBQUdOLE1BQWIsRUFBcUJNLENBQUMsSUFBSSxDQUExQixFQUE2QixFQUFFQSxDQUEvQixFQUFrQztBQUM5QkYsVUFBTSxDQUFDRSxDQUFELENBQU4sR0FBWSxDQUFDQSxDQUFDLEdBQUdQLEdBQUosR0FBVSxDQUFDQyxNQUFNLEdBQUdNLENBQVYsSUFBZVIsS0FBMUIsSUFBbUNFLE1BQS9DO0FBQ0g7O0FBQ0QsU0FBT0ksTUFBUDtBQUNIIiwiZmlsZSI6Ii4vbWF0cml4L2xpbnNwYWNlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIGVuZCwgbnVtYmVyID0gbnVsbCkge1xyXG4gICAgaWYgKCFudW1iZXIpIHtcclxuICAgICAgICBudW1iZXIgPSBNYXRoLm1heChNYXRoLnJvdW5kKGVuZCAtIHN0YXJ0KSArIDEsIDEpO1xyXG4gICAgfVxyXG4gICAgaWYgKG51bWJlciA8IDIpIHtcclxuICAgICAgICByZXR1cm4gbnVtYmVyID09PSAxID8gW3N0YXJ0XSA6IFtdO1xyXG4gICAgfVxyXG4gICAgbGV0IHJlc3VsdCA9IG5ldyBBcnJheShudW1iZXIpXHJcbiAgICBudW1iZXIgLT0gMVxyXG4gICAgZm9yIChsZXQgaSA9IG51bWJlcjsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICByZXN1bHRbaV0gPSAoaSAqIGVuZCArIChudW1iZXIgLSBpKSAqIHN0YXJ0KSAvIG51bWJlcjtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHRcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./matrix/linspace.js\n");

/***/ }),

/***/ "./matrix/norm.js":
/*!************************!*\
  !*** ./matrix/norm.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _metrics_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metrics/index */ \"./metrics/index.js\");\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n\n //import { neumair_sum } from \"../numerical/index\";\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(v, metric = _metrics_index__WEBPACK_IMPORTED_MODULE_0__.euclidean) {\n  //export default function(vector, p=2, metric = euclidean) {\n  let vector = null;\n\n  if (v instanceof _matrix_index__WEBPACK_IMPORTED_MODULE_1__.Matrix) {\n    let [rows, cols] = v.shape;\n    if (rows === 1) vector = v.row(0);else if (cols === 1) vector = v.col(0);else throw \"matrix must be 1d!\";\n  } else {\n    vector = v;\n  }\n\n  let n = vector.length;\n  let z = new Array(n);\n  z.fill(0);\n  return metric(vector, z);\n  /*let v;\r\n  if (vector instanceof Matrix) {\r\n      let [ rows, cols ] = v.shape;\r\n      if (rows === 1) {\r\n          v = vector.row(0);\r\n      } else if (cols === 1) {\r\n          v = vector.col(0);\r\n      } else {\r\n          throw \"matrix must be 1d\"\r\n      }\r\n  } else {\r\n      v = vector;\r\n  }\r\n  return Math.pow(neumair_sum(v.map(e => Math.pow(e, p))), 1 / p)*/\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21hdHJpeC9ub3JtLmpzP2I4ZjUiXSwibmFtZXMiOlsidiIsIm1ldHJpYyIsImV1Y2xpZGVhbiIsInZlY3RvciIsIk1hdHJpeCIsInJvd3MiLCJjb2xzIiwic2hhcGUiLCJyb3ciLCJjb2wiLCJuIiwibGVuZ3RoIiwieiIsIkFycmF5IiwiZmlsbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Q0FFQTs7QUFFQSw2QkFBZSxvQ0FBU0EsQ0FBVCxFQUFZQyxNQUFNLEdBQUdDLHFEQUFyQixFQUFnQztBQUMvQztBQUNJLE1BQUlDLE1BQU0sR0FBRyxJQUFiOztBQUNBLE1BQUlILENBQUMsWUFBWUksaURBQWpCLEVBQXlCO0FBQ3JCLFFBQUksQ0FBQ0MsSUFBRCxFQUFPQyxJQUFQLElBQWVOLENBQUMsQ0FBQ08sS0FBckI7QUFDQSxRQUFJRixJQUFJLEtBQUssQ0FBYixFQUFnQkYsTUFBTSxHQUFHSCxDQUFDLENBQUNRLEdBQUYsQ0FBTSxDQUFOLENBQVQsQ0FBaEIsS0FDSyxJQUFJRixJQUFJLEtBQUssQ0FBYixFQUFnQkgsTUFBTSxHQUFHSCxDQUFDLENBQUNTLEdBQUYsQ0FBTSxDQUFOLENBQVQsQ0FBaEIsS0FDQSxNQUFNLG9CQUFOO0FBQ1IsR0FMRCxNQUtPO0FBQ0hOLFVBQU0sR0FBR0gsQ0FBVDtBQUNIOztBQUNELE1BQUlVLENBQUMsR0FBR1AsTUFBTSxDQUFDUSxNQUFmO0FBQ0EsTUFBSUMsQ0FBQyxHQUFHLElBQUlDLEtBQUosQ0FBVUgsQ0FBVixDQUFSO0FBQ0FFLEdBQUMsQ0FBQ0UsSUFBRixDQUFPLENBQVA7QUFDQSxTQUFPYixNQUFNLENBQUNFLE1BQUQsRUFBU1MsQ0FBVCxDQUFiO0FBR0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNDIiwiZmlsZSI6Ii4vbWF0cml4L25vcm0uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBldWNsaWRlYW4gfSBmcm9tIFwiLi4vbWV0cmljcy9pbmRleFwiO1xyXG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tIFwiLi4vbWF0cml4L2luZGV4XCI7XHJcbi8vaW1wb3J0IHsgbmV1bWFpcl9zdW0gfSBmcm9tIFwiLi4vbnVtZXJpY2FsL2luZGV4XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2LCBtZXRyaWMgPSBldWNsaWRlYW4pIHtcclxuLy9leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2ZWN0b3IsIHA9MiwgbWV0cmljID0gZXVjbGlkZWFuKSB7XHJcbiAgICBsZXQgdmVjdG9yID0gbnVsbDtcclxuICAgIGlmICh2IGluc3RhbmNlb2YgTWF0cml4KSB7XHJcbiAgICAgICAgbGV0IFtyb3dzLCBjb2xzXSA9IHYuc2hhcGU7XHJcbiAgICAgICAgaWYgKHJvd3MgPT09IDEpIHZlY3RvciA9IHYucm93KDApO1xyXG4gICAgICAgIGVsc2UgaWYgKGNvbHMgPT09IDEpIHZlY3RvciA9IHYuY29sKDApO1xyXG4gICAgICAgIGVsc2UgdGhyb3cgXCJtYXRyaXggbXVzdCBiZSAxZCFcIlxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB2ZWN0b3IgPSB2O1xyXG4gICAgfVxyXG4gICAgbGV0IG4gPSB2ZWN0b3IubGVuZ3RoO1xyXG4gICAgbGV0IHogPSBuZXcgQXJyYXkobilcclxuICAgIHouZmlsbCgwKTtcclxuICAgIHJldHVybiBtZXRyaWModmVjdG9yLCB6KTtcclxuICAgIFxyXG4gICAgXHJcbiAgICAvKmxldCB2O1xyXG4gICAgaWYgKHZlY3RvciBpbnN0YW5jZW9mIE1hdHJpeCkge1xyXG4gICAgICAgIGxldCBbIHJvd3MsIGNvbHMgXSA9IHYuc2hhcGU7XHJcbiAgICAgICAgaWYgKHJvd3MgPT09IDEpIHtcclxuICAgICAgICAgICAgdiA9IHZlY3Rvci5yb3coMCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjb2xzID09PSAxKSB7XHJcbiAgICAgICAgICAgIHYgPSB2ZWN0b3IuY29sKDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IFwibWF0cml4IG11c3QgYmUgMWRcIlxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdiA9IHZlY3RvcjtcclxuICAgIH1cclxuICAgIHJldHVybiBNYXRoLnBvdyhuZXVtYWlyX3N1bSh2Lm1hcChlID0+IE1hdGgucG93KGUsIHApKSksIDEgLyBwKSovXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./matrix/norm.js\n");

/***/ }),

/***/ "./metrics/canberra.js":
/*!*****************************!*\
  !*** ./metrics/canberra.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * Computes the canberra distance between {@link a} and {@link b}.\r\n * @memberof module:metrics\r\n * @alias canberra\r\n * @param {Array<Number>} a \r\n * @param {Array<Number>} b \r\n * @returns {Number} The canberra distance between {@link a} and {@link b}.\r\n * @see {@link https://en.wikipedia.org/wiki/Canberra_distance}\r\n */\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {\n  if (a.length !== b.length) return undefined;\n  let n = a.length;\n  let sum = 0;\n\n  for (let i = 0; i < n; ++i) {\n    sum += Math.abs(a[i] - b[i]) / (Math.abs(a[i]) + Math.abs(b[i]));\n  }\n\n  return sum;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21ldHJpY3MvY2FuYmVycmEuanM/YzViMiJdLCJuYW1lcyI6WyJhIiwiYiIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm4iLCJzdW0iLCJpIiwiTWF0aCIsImFicyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUFlLG9DQUFTQSxDQUFULEVBQVlDLENBQVosRUFBZTtBQUMxQixNQUFJRCxDQUFDLENBQUNFLE1BQUYsS0FBYUQsQ0FBQyxDQUFDQyxNQUFuQixFQUEyQixPQUFPQyxTQUFQO0FBQzNCLE1BQUlDLENBQUMsR0FBR0osQ0FBQyxDQUFDRSxNQUFWO0FBQ0EsTUFBSUcsR0FBRyxHQUFHLENBQVY7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixDQUFwQixFQUF1QixFQUFFRSxDQUF6QixFQUE0QjtBQUN4QkQsT0FBRyxJQUFLRSxJQUFJLENBQUNDLEdBQUwsQ0FBU1IsQ0FBQyxDQUFDTSxDQUFELENBQUQsR0FBT0wsQ0FBQyxDQUFDSyxDQUFELENBQWpCLEtBQXlCQyxJQUFJLENBQUNDLEdBQUwsQ0FBU1IsQ0FBQyxDQUFDTSxDQUFELENBQVYsSUFBaUJDLElBQUksQ0FBQ0MsR0FBTCxDQUFTUCxDQUFDLENBQUNLLENBQUQsQ0FBVixDQUExQyxDQUFSO0FBQ0g7O0FBQ0QsU0FBT0QsR0FBUDtBQUNIIiwiZmlsZSI6Ii4vbWV0cmljcy9jYW5iZXJyYS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb21wdXRlcyB0aGUgY2FuYmVycmEgZGlzdGFuY2UgYmV0d2VlbiB7QGxpbmsgYX0gYW5kIHtAbGluayBifS5cclxuICogQG1lbWJlcm9mIG1vZHVsZTptZXRyaWNzXHJcbiAqIEBhbGlhcyBjYW5iZXJyYVxyXG4gKiBAcGFyYW0ge0FycmF5PE51bWJlcj59IGEgXHJcbiAqIEBwYXJhbSB7QXJyYXk8TnVtYmVyPn0gYiBcclxuICogQHJldHVybnMge051bWJlcn0gVGhlIGNhbmJlcnJhIGRpc3RhbmNlIGJldHdlZW4ge0BsaW5rIGF9IGFuZCB7QGxpbmsgYn0uXHJcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbmJlcnJhX2Rpc3RhbmNlfVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xyXG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIGxldCBuID0gYS5sZW5ndGg7XHJcbiAgICBsZXQgc3VtID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgc3VtICs9IChNYXRoLmFicyhhW2ldIC0gYltpXSkgLyAoTWF0aC5hYnMoYVtpXSkgKyBNYXRoLmFicyhiW2ldKSkpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3VtO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./metrics/canberra.js\n");

/***/ }),

/***/ "./metrics/chebyshev.js":
/*!******************************!*\
  !*** ./metrics/chebyshev.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * Computes the chebyshev distance (l_∞) between {@link a} and {@link b}.\r\n * @memberof module:metrics\r\n * @alias chebyshev\r\n * @param {Array<Number>} a \r\n * @param {Array<Number>} b \r\n * @returns {Number} the chebyshev distance between {@link a} and {@link b}.  \r\n */\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {\n  if (a.length != b.length) return undefined;\n  let n = a.length;\n  let res = [];\n\n  for (let i = 0; i < n; ++i) {\n    res.push(Math.abs(a[i] - b[i]));\n  }\n\n  return Math.max(...res);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21ldHJpY3MvY2hlYnlzaGV2LmpzPzZjOTciXSwibmFtZXMiOlsiYSIsImIiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJuIiwicmVzIiwiaSIsInB1c2giLCJNYXRoIiwiYWJzIiwibWF4Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUFlLG9DQUFTQSxDQUFULEVBQVlDLENBQVosRUFBZTtBQUMxQixNQUFJRCxDQUFDLENBQUNFLE1BQUYsSUFBWUQsQ0FBQyxDQUFDQyxNQUFsQixFQUEwQixPQUFPQyxTQUFQO0FBQzFCLE1BQUlDLENBQUMsR0FBR0osQ0FBQyxDQUFDRSxNQUFWO0FBQ0EsTUFBSUcsR0FBRyxHQUFHLEVBQVY7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixDQUFwQixFQUF1QixFQUFFRSxDQUF6QixFQUE0QjtBQUN4QkQsT0FBRyxDQUFDRSxJQUFKLENBQVNDLElBQUksQ0FBQ0MsR0FBTCxDQUFTVCxDQUFDLENBQUNNLENBQUQsQ0FBRCxHQUFPTCxDQUFDLENBQUNLLENBQUQsQ0FBakIsQ0FBVDtBQUNIOztBQUNELFNBQU9FLElBQUksQ0FBQ0UsR0FBTCxDQUFTLEdBQUdMLEdBQVosQ0FBUDtBQUNIIiwiZmlsZSI6Ii4vbWV0cmljcy9jaGVieXNoZXYuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29tcHV0ZXMgdGhlIGNoZWJ5c2hldiBkaXN0YW5jZSAobF/iiJ4pIGJldHdlZW4ge0BsaW5rIGF9IGFuZCB7QGxpbmsgYn0uXHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6bWV0cmljc1xyXG4gKiBAYWxpYXMgY2hlYnlzaGV2XHJcbiAqIEBwYXJhbSB7QXJyYXk8TnVtYmVyPn0gYSBcclxuICogQHBhcmFtIHtBcnJheTxOdW1iZXI+fSBiIFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgY2hlYnlzaGV2IGRpc3RhbmNlIGJldHdlZW4ge0BsaW5rIGF9IGFuZCB7QGxpbmsgYn0uICBcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIHVuZGVmaW5lZFxyXG4gICAgbGV0IG4gPSBhLmxlbmd0aFxyXG4gICAgbGV0IHJlcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICByZXMucHVzaChNYXRoLmFicyhhW2ldIC0gYltpXSkpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoLi4ucmVzKVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./metrics/chebyshev.js\n");

/***/ }),

/***/ "./metrics/cosine.js":
/*!***************************!*\
  !*** ./metrics/cosine.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * Computes the cosine distance (not similarity) between {@link a} and {@link b}.\r\n * @memberof module:metrics\r\n * @alias cosine\r\n * @param {Array<Number>} a \r\n * @param {Array<Number>} b \r\n * @example\r\n * druid.cosine([1,0],[1,1]) == 0.7853981633974484 == π/4\r\n * @returns {Number} The cosine distance between {@link a} and {@link b}.\r\n */\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {\n  if (a.length !== b.length) return undefined;\n  let n = a.length;\n  let sum = 0;\n  let sum_a = 0;\n  let sum_b = 0;\n\n  for (let i = 0; i < n; ++i) {\n    sum += a[i] * b[i];\n    sum_a += a[i] * a[i];\n    sum_b += b[i] * b[i];\n  }\n\n  return Math.acos(sum / (Math.sqrt(sum_a) * Math.sqrt(sum_b)));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21ldHJpY3MvY29zaW5lLmpzPzc2ZTciXSwibmFtZXMiOlsiYSIsImIiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJuIiwic3VtIiwic3VtX2EiLCJzdW1fYiIsImkiLCJNYXRoIiwiYWNvcyIsInNxcnQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUFlLG9DQUFTQSxDQUFULEVBQVlDLENBQVosRUFBZTtBQUMxQixNQUFJRCxDQUFDLENBQUNFLE1BQUYsS0FBYUQsQ0FBQyxDQUFDQyxNQUFuQixFQUEyQixPQUFPQyxTQUFQO0FBQzNCLE1BQUlDLENBQUMsR0FBR0osQ0FBQyxDQUFDRSxNQUFWO0FBQ0EsTUFBSUcsR0FBRyxHQUFHLENBQVY7QUFDQSxNQUFJQyxLQUFLLEdBQUcsQ0FBWjtBQUNBLE1BQUlDLEtBQUssR0FBRyxDQUFaOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osQ0FBcEIsRUFBdUIsRUFBRUksQ0FBekIsRUFBNEI7QUFDeEJILE9BQUcsSUFBS0wsQ0FBQyxDQUFDUSxDQUFELENBQUQsR0FBT1AsQ0FBQyxDQUFDTyxDQUFELENBQWhCO0FBQ0FGLFNBQUssSUFBS04sQ0FBQyxDQUFDUSxDQUFELENBQUQsR0FBT1IsQ0FBQyxDQUFDUSxDQUFELENBQWxCO0FBQ0FELFNBQUssSUFBS04sQ0FBQyxDQUFDTyxDQUFELENBQUQsR0FBT1AsQ0FBQyxDQUFDTyxDQUFELENBQWxCO0FBQ0g7O0FBQ0QsU0FBT0MsSUFBSSxDQUFDQyxJQUFMLENBQVVMLEdBQUcsSUFBS0ksSUFBSSxDQUFDRSxJQUFMLENBQVVMLEtBQVYsSUFBbUJHLElBQUksQ0FBQ0UsSUFBTCxDQUFVSixLQUFWLENBQXhCLENBQWIsQ0FBUDtBQUNIIiwiZmlsZSI6Ii4vbWV0cmljcy9jb3NpbmUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29tcHV0ZXMgdGhlIGNvc2luZSBkaXN0YW5jZSAobm90IHNpbWlsYXJpdHkpIGJldHdlZW4ge0BsaW5rIGF9IGFuZCB7QGxpbmsgYn0uXHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6bWV0cmljc1xyXG4gKiBAYWxpYXMgY29zaW5lXHJcbiAqIEBwYXJhbSB7QXJyYXk8TnVtYmVyPn0gYSBcclxuICogQHBhcmFtIHtBcnJheTxOdW1iZXI+fSBiIFxyXG4gKiBAZXhhbXBsZVxyXG4gKiBkcnVpZC5jb3NpbmUoWzEsMF0sWzEsMV0pID09IDAuNzg1Mzk4MTYzMzk3NDQ4NCA9PSDPgC80XHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBjb3NpbmUgZGlzdGFuY2UgYmV0d2VlbiB7QGxpbmsgYX0gYW5kIHtAbGluayBifS5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICBsZXQgbiA9IGEubGVuZ3RoO1xyXG4gICAgbGV0IHN1bSA9IDA7XHJcbiAgICBsZXQgc3VtX2EgPSAwO1xyXG4gICAgbGV0IHN1bV9iID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgc3VtICs9IChhW2ldICogYltpXSlcclxuICAgICAgICBzdW1fYSArPSAoYVtpXSAqIGFbaV0pXHJcbiAgICAgICAgc3VtX2IgKz0gKGJbaV0gKiBiW2ldKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIE1hdGguYWNvcyhzdW0gLyAoKE1hdGguc3FydChzdW1fYSkgKiBNYXRoLnNxcnQoc3VtX2IpKSkpO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./metrics/cosine.js\n");

/***/ }),

/***/ "./metrics/euclidean.js":
/*!******************************!*\
  !*** ./metrics/euclidean.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _metrics_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metrics/index.js */ \"./metrics/index.js\");\n\n/**\r\n * Computes the euclidean distance (l_2) between {@link a} and {@link b}.\r\n * @memberof module:metrics\r\n * @alias euclidean\r\n * @param {Array<Number>} a \r\n * @param {Array<Number>} b \r\n * @returns {Number} the euclidean distance between {@link a} and {@link b}.  \r\n */\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {\n  return Math.sqrt((0,_metrics_index_js__WEBPACK_IMPORTED_MODULE_0__.euclidean_squared)(a, b));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21ldHJpY3MvZXVjbGlkZWFuLmpzPzk0NTUiXSwibmFtZXMiOlsiYSIsImIiLCJNYXRoIiwic3FydCIsImV1Y2xpZGVhbl9zcXVhcmVkIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSw2QkFBZSxvQ0FBU0EsQ0FBVCxFQUFZQyxDQUFaLEVBQWU7QUFDMUIsU0FBT0MsSUFBSSxDQUFDQyxJQUFMLENBQVVDLG9FQUFpQixDQUFDSixDQUFELEVBQUlDLENBQUosQ0FBM0IsQ0FBUDtBQUNIIiwiZmlsZSI6Ii4vbWV0cmljcy9ldWNsaWRlYW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBldWNsaWRlYW5fc3F1YXJlZCB9IGZyb20gXCIuLi9tZXRyaWNzL2luZGV4LmpzXCI7XHJcbi8qKlxyXG4gKiBDb21wdXRlcyB0aGUgZXVjbGlkZWFuIGRpc3RhbmNlIChsXzIpIGJldHdlZW4ge0BsaW5rIGF9IGFuZCB7QGxpbmsgYn0uXHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6bWV0cmljc1xyXG4gKiBAYWxpYXMgZXVjbGlkZWFuXHJcbiAqIEBwYXJhbSB7QXJyYXk8TnVtYmVyPn0gYSBcclxuICogQHBhcmFtIHtBcnJheTxOdW1iZXI+fSBiIFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgZXVjbGlkZWFuIGRpc3RhbmNlIGJldHdlZW4ge0BsaW5rIGF9IGFuZCB7QGxpbmsgYn0uICBcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQoZXVjbGlkZWFuX3NxdWFyZWQoYSwgYikpO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./metrics/euclidean.js\n");

/***/ }),

/***/ "./metrics/euclidean_squared.js":
/*!**************************************!*\
  !*** ./metrics/euclidean_squared.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _numerical_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../numerical/index */ \"./numerical/index.js\");\n\n/**\r\n * Computes the squared euclidean distance (l_2^2) between {@link a} and {@link b}.\r\n * @memberof module:metrics\r\n * @alias euclidean_squared\r\n * @param {Array<Number>} a \r\n * @param {Array<Number>} b \r\n * @returns {Number} the squared euclidean distance between {@link a} and {@link b}.  \r\n */\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {\n  if (a.length != b.length) return undefined;\n  let n = a.length;\n  let s = new Array(n);\n\n  for (let i = 0; i < n; ++i) {\n    let x = a[i];\n    let y = b[i];\n    s[i] = (x - y) * (x - y);\n  }\n\n  return (0,_numerical_index__WEBPACK_IMPORTED_MODULE_0__.neumair_sum)(s);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21ldHJpY3MvZXVjbGlkZWFuX3NxdWFyZWQuanM/YjJjMyJdLCJuYW1lcyI6WyJhIiwiYiIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm4iLCJzIiwiQXJyYXkiLCJpIiwieCIsInkiLCJuZXVtYWlyX3N1bSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsNkJBQWUsb0NBQVNBLENBQVQsRUFBWUMsQ0FBWixFQUFlO0FBQzFCLE1BQUlELENBQUMsQ0FBQ0UsTUFBRixJQUFZRCxDQUFDLENBQUNDLE1BQWxCLEVBQTBCLE9BQU9DLFNBQVA7QUFDMUIsTUFBSUMsQ0FBQyxHQUFHSixDQUFDLENBQUNFLE1BQVY7QUFDQSxNQUFJRyxDQUFDLEdBQUcsSUFBSUMsS0FBSixDQUFVRixDQUFWLENBQVI7O0FBQ0EsT0FBSyxJQUFJRyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxDQUFwQixFQUF1QixFQUFFRyxDQUF6QixFQUE0QjtBQUN4QixRQUFJQyxDQUFDLEdBQUdSLENBQUMsQ0FBQ08sQ0FBRCxDQUFUO0FBQ0EsUUFBSUUsQ0FBQyxHQUFHUixDQUFDLENBQUNNLENBQUQsQ0FBVDtBQUNBRixLQUFDLENBQUNFLENBQUQsQ0FBRCxHQUFRLENBQUNDLENBQUMsR0FBR0MsQ0FBTCxLQUFXRCxDQUFDLEdBQUdDLENBQWYsQ0FBUjtBQUNIOztBQUNELFNBQU9DLDZEQUFXLENBQUNMLENBQUQsQ0FBbEI7QUFDSCIsImZpbGUiOiIuL21ldHJpY3MvZXVjbGlkZWFuX3NxdWFyZWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXVtYWlyX3N1bSB9IGZyb20gXCIuLi9udW1lcmljYWwvaW5kZXhcIjtcclxuLyoqXHJcbiAqIENvbXB1dGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGVhbiBkaXN0YW5jZSAobF8yXjIpIGJldHdlZW4ge0BsaW5rIGF9IGFuZCB7QGxpbmsgYn0uXHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6bWV0cmljc1xyXG4gKiBAYWxpYXMgZXVjbGlkZWFuX3NxdWFyZWRcclxuICogQHBhcmFtIHtBcnJheTxOdW1iZXI+fSBhIFxyXG4gKiBAcGFyYW0ge0FycmF5PE51bWJlcj59IGIgXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBzcXVhcmVkIGV1Y2xpZGVhbiBkaXN0YW5jZSBiZXR3ZWVuIHtAbGluayBhfSBhbmQge0BsaW5rIGJ9LiAgXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XHJcbiAgICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiB1bmRlZmluZWRcclxuICAgIGxldCBuID0gYS5sZW5ndGhcclxuICAgIGxldCBzID0gbmV3IEFycmF5KG4pO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBsZXQgeCA9IGFbaV07XHJcbiAgICAgICAgbGV0IHkgPSBiW2ldXHJcbiAgICAgICAgc1tpXSA9ICgoeCAtIHkpICogKHggLSB5KSlcclxuICAgIH1cclxuICAgIHJldHVybiBuZXVtYWlyX3N1bShzKTtcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./metrics/euclidean_squared.js\n");

/***/ }),

/***/ "./metrics/index.js":
/*!**************************!*\
  !*** ./metrics/index.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"euclidean\": () => (/* reexport safe */ _euclidean__WEBPACK_IMPORTED_MODULE_0__.default),\n/* harmony export */   \"euclidean_squared\": () => (/* reexport safe */ _euclidean_squared__WEBPACK_IMPORTED_MODULE_1__.default),\n/* harmony export */   \"cosine\": () => (/* reexport safe */ _cosine__WEBPACK_IMPORTED_MODULE_2__.default),\n/* harmony export */   \"manhattan\": () => (/* reexport safe */ _manhattan__WEBPACK_IMPORTED_MODULE_3__.default),\n/* harmony export */   \"chebyshev\": () => (/* reexport safe */ _chebyshev__WEBPACK_IMPORTED_MODULE_4__.default),\n/* harmony export */   \"canberra\": () => (/* reexport safe */ _canberra__WEBPACK_IMPORTED_MODULE_5__.default)\n/* harmony export */ });\n/* harmony import */ var _euclidean__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./euclidean */ \"./metrics/euclidean.js\");\n/* harmony import */ var _euclidean_squared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./euclidean_squared */ \"./metrics/euclidean_squared.js\");\n/* harmony import */ var _cosine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cosine */ \"./metrics/cosine.js\");\n/* harmony import */ var _manhattan__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./manhattan */ \"./metrics/manhattan.js\");\n/* harmony import */ var _chebyshev__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chebyshev */ \"./metrics/chebyshev.js\");\n/* harmony import */ var _canberra__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./canberra */ \"./metrics/canberra.js\");\n/**\r\n * @module metrics\r\n */\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21ldHJpY3MvaW5kZXguanM/YjQ3YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbWV0cmljcy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbW9kdWxlIG1ldHJpY3NcclxuICovXHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXVjbGlkZWFuIH0gZnJvbSBcIi4vZXVjbGlkZWFuXCI7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXVjbGlkZWFuX3NxdWFyZWQgfSBmcm9tIFwiLi9ldWNsaWRlYW5fc3F1YXJlZFwiO1xyXG5leHBvcnQgeyBkZWZhdWx0IGFzIGNvc2luZSB9IGZyb20gJy4vY29zaW5lJztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBtYW5oYXR0YW4gfSBmcm9tICcuL21hbmhhdHRhbic7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY2hlYnlzaGV2IH0gZnJvbSAnLi9jaGVieXNoZXYnO1xyXG5leHBvcnQgeyBkZWZhdWx0IGFzIGNhbmJlcnJhIH0gZnJvbSBcIi4vY2FuYmVycmFcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./metrics/index.js\n");

/***/ }),

/***/ "./metrics/manhattan.js":
/*!******************************!*\
  !*** ./metrics/manhattan.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * Computes the manhattan distance (l_1) between {@link a} and {@link b}.\r\n * @memberof module:metrics\r\n * @alias manhattan\r\n * @param {Array<Number>} a \r\n * @param {Array<Number>} b \r\n * @returns {Number} the manhattan distance between {@link a} and {@link b}.  \r\n */\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {\n  if (a.length != b.length) return undefined;\n  let n = a.length;\n  let sum = 0;\n\n  for (let i = 0; i < n; ++i) {\n    sum += Math.abs(a[i] - b[i]);\n  }\n\n  return sum;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL21ldHJpY3MvbWFuaGF0dGFuLmpzPzNkMWIiXSwibmFtZXMiOlsiYSIsImIiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJuIiwic3VtIiwiaSIsIk1hdGgiLCJhYnMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUcsNkJBQWUsb0NBQVNBLENBQVQsRUFBWUMsQ0FBWixFQUFlO0FBQzdCLE1BQUlELENBQUMsQ0FBQ0UsTUFBRixJQUFZRCxDQUFDLENBQUNDLE1BQWxCLEVBQTBCLE9BQU9DLFNBQVA7QUFDMUIsTUFBSUMsQ0FBQyxHQUFHSixDQUFDLENBQUNFLE1BQVY7QUFDQSxNQUFJRyxHQUFHLEdBQUcsQ0FBVjs7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLENBQXBCLEVBQXVCLEVBQUVFLENBQXpCLEVBQTRCO0FBQ3hCRCxPQUFHLElBQUlFLElBQUksQ0FBQ0MsR0FBTCxDQUFTUixDQUFDLENBQUNNLENBQUQsQ0FBRCxHQUFPTCxDQUFDLENBQUNLLENBQUQsQ0FBakIsQ0FBUDtBQUNIOztBQUNELFNBQU9ELEdBQVA7QUFDSCIsImZpbGUiOiIuL21ldHJpY3MvbWFuaGF0dGFuLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbXB1dGVzIHRoZSBtYW5oYXR0YW4gZGlzdGFuY2UgKGxfMSkgYmV0d2VlbiB7QGxpbmsgYX0gYW5kIHtAbGluayBifS5cclxuICogQG1lbWJlcm9mIG1vZHVsZTptZXRyaWNzXHJcbiAqIEBhbGlhcyBtYW5oYXR0YW5cclxuICogQHBhcmFtIHtBcnJheTxOdW1iZXI+fSBhIFxyXG4gKiBAcGFyYW0ge0FycmF5PE51bWJlcj59IGIgXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBtYW5oYXR0YW4gZGlzdGFuY2UgYmV0d2VlbiB7QGxpbmsgYX0gYW5kIHtAbGluayBifS4gIFxyXG4gKi9leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XHJcbiAgICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiB1bmRlZmluZWRcclxuICAgIGxldCBuID0gYS5sZW5ndGhcclxuICAgIGxldCBzdW0gPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBzdW0gKz0gTWF0aC5hYnMoYVtpXSAtIGJbaV0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3VtXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./metrics/manhattan.js\n");

/***/ }),

/***/ "./numerical/index.js":
/*!****************************!*\
  !*** ./numerical/index.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kahan_sum\": () => (/* reexport safe */ _kahan_sum__WEBPACK_IMPORTED_MODULE_0__.default),\n/* harmony export */   \"neumair_sum\": () => (/* reexport safe */ _neumair_sum__WEBPACK_IMPORTED_MODULE_1__.default)\n/* harmony export */ });\n/* harmony import */ var _kahan_sum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./kahan_sum */ \"./numerical/kahan_sum.js\");\n/* harmony import */ var _neumair_sum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./neumair_sum */ \"./numerical/neumair_sum.js\");\n/**\r\n * @module numerical\r\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL251bWVyaWNhbC9pbmRleC5qcz9iMmJhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL251bWVyaWNhbC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbW9kdWxlIG51bWVyaWNhbFxyXG4gKi9cclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBrYWhhbl9zdW0gfSBmcm9tIFwiLi9rYWhhbl9zdW1cIjtcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBuZXVtYWlyX3N1bSB9IGZyb20gXCIuL25ldW1haXJfc3VtXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./numerical/index.js\n");

/***/ }),

/***/ "./numerical/kahan_sum.js":
/*!********************************!*\
  !*** ./numerical/kahan_sum.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * Numerical stable summation with the Kahan summation algorithm.\r\n * @memberof module:numerical\r\n * @alias kahan_sum\r\n * @param {Array} summands - Array of values to sum up.\r\n * @returns {number} The sum.\r\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm}\r\n */\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(summands) {\n  let n = summands.length;\n  let sum = 0;\n  let compensation = 0;\n  let y, t;\n\n  for (let i = 0; i < n; ++i) {\n    y = summands[i] - compensation;\n    t = sum + y;\n    compensation = t - sum - y;\n    sum = t;\n  }\n\n  return sum;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL251bWVyaWNhbC9rYWhhbl9zdW0uanM/YjM2ZCJdLCJuYW1lcyI6WyJzdW1tYW5kcyIsIm4iLCJsZW5ndGgiLCJzdW0iLCJjb21wZW5zYXRpb24iLCJ5IiwidCIsImkiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQWUsb0NBQVNBLFFBQVQsRUFBbUI7QUFDOUIsTUFBSUMsQ0FBQyxHQUFHRCxRQUFRLENBQUNFLE1BQWpCO0FBQ0EsTUFBSUMsR0FBRyxHQUFHLENBQVY7QUFDQSxNQUFJQyxZQUFZLEdBQUcsQ0FBbkI7QUFDQSxNQUFJQyxDQUFKLEVBQU9DLENBQVA7O0FBRUEsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTixDQUFwQixFQUF1QixFQUFFTSxDQUF6QixFQUE0QjtBQUN4QkYsS0FBQyxHQUFHTCxRQUFRLENBQUNPLENBQUQsQ0FBUixHQUFjSCxZQUFsQjtBQUNBRSxLQUFDLEdBQUdILEdBQUcsR0FBR0UsQ0FBVjtBQUNBRCxnQkFBWSxHQUFJRSxDQUFDLEdBQUdILEdBQUwsR0FBWUUsQ0FBM0I7QUFDQUYsT0FBRyxHQUFHRyxDQUFOO0FBQ0g7O0FBQ0QsU0FBT0gsR0FBUDtBQUNIIiwiZmlsZSI6Ii4vbnVtZXJpY2FsL2thaGFuX3N1bS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBOdW1lcmljYWwgc3RhYmxlIHN1bW1hdGlvbiB3aXRoIHRoZSBLYWhhbiBzdW1tYXRpb24gYWxnb3JpdGhtLlxyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOm51bWVyaWNhbFxyXG4gKiBAYWxpYXMga2FoYW5fc3VtXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHN1bW1hbmRzIC0gQXJyYXkgb2YgdmFsdWVzIHRvIHN1bSB1cC5cclxuICogQHJldHVybnMge251bWJlcn0gVGhlIHN1bS5cclxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS2FoYW5fc3VtbWF0aW9uX2FsZ29yaXRobX1cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1bW1hbmRzKSB7XHJcbiAgICBsZXQgbiA9IHN1bW1hbmRzLmxlbmd0aFxyXG4gICAgbGV0IHN1bSA9IDA7XHJcbiAgICBsZXQgY29tcGVuc2F0aW9uID0gMDtcclxuICAgIGxldCB5LCB0O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgeSA9IHN1bW1hbmRzW2ldIC0gY29tcGVuc2F0aW9uO1xyXG4gICAgICAgIHQgPSBzdW0gKyB5O1xyXG4gICAgICAgIGNvbXBlbnNhdGlvbiA9ICh0IC0gc3VtKSAtIHk7XHJcbiAgICAgICAgc3VtID0gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBzdW07XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./numerical/kahan_sum.js\n");

/***/ }),

/***/ "./numerical/neumair_sum.js":
/*!**********************************!*\
  !*** ./numerical/neumair_sum.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * Numerical stable summation with the Neumair summation algorithm.\r\n * @memberof module:numerical\r\n * @alias neumair_sum\r\n * @param {Array} summands - Array of values to sum up.\r\n * @returns {number} The sum.\r\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements}\r\n */\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(summands) {\n  let n = summands.length;\n  let sum = 0;\n  let compensation = 0;\n\n  for (let i = 0; i < n; ++i) {\n    let summand = summands[i];\n    let t = sum + summand;\n\n    if (Math.abs(sum) >= Math.abs(summand)) {\n      compensation += sum - t + summand;\n    } else {\n      compensation += summand - t + sum;\n    }\n\n    sum = t;\n  }\n\n  return sum + compensation;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL251bWVyaWNhbC9uZXVtYWlyX3N1bS5qcz8yZmMzIl0sIm5hbWVzIjpbInN1bW1hbmRzIiwibiIsImxlbmd0aCIsInN1bSIsImNvbXBlbnNhdGlvbiIsImkiLCJzdW1tYW5kIiwidCIsIk1hdGgiLCJhYnMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQWUsb0NBQVNBLFFBQVQsRUFBbUI7QUFDOUIsTUFBSUMsQ0FBQyxHQUFHRCxRQUFRLENBQUNFLE1BQWpCO0FBQ0EsTUFBSUMsR0FBRyxHQUFHLENBQVY7QUFDQSxNQUFJQyxZQUFZLEdBQUcsQ0FBbkI7O0FBRUEsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixDQUFwQixFQUF1QixFQUFFSSxDQUF6QixFQUE0QjtBQUN4QixRQUFJQyxPQUFPLEdBQUdOLFFBQVEsQ0FBQ0ssQ0FBRCxDQUF0QjtBQUNBLFFBQUlFLENBQUMsR0FBR0osR0FBRyxHQUFHRyxPQUFkOztBQUNBLFFBQUlFLElBQUksQ0FBQ0MsR0FBTCxDQUFTTixHQUFULEtBQWlCSyxJQUFJLENBQUNDLEdBQUwsQ0FBU0gsT0FBVCxDQUFyQixFQUF3QztBQUNwQ0Ysa0JBQVksSUFBS0QsR0FBRyxHQUFHSSxDQUFQLEdBQVlELE9BQTVCO0FBQ0gsS0FGRCxNQUVPO0FBQ0hGLGtCQUFZLElBQUtFLE9BQU8sR0FBR0MsQ0FBWCxHQUFnQkosR0FBaEM7QUFDSDs7QUFDREEsT0FBRyxHQUFHSSxDQUFOO0FBQ0g7O0FBQ0QsU0FBT0osR0FBRyxHQUFHQyxZQUFiO0FBQ0giLCJmaWxlIjoiLi9udW1lcmljYWwvbmV1bWFpcl9zdW0uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTnVtZXJpY2FsIHN0YWJsZSBzdW1tYXRpb24gd2l0aCB0aGUgTmV1bWFpciBzdW1tYXRpb24gYWxnb3JpdGhtLlxyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOm51bWVyaWNhbFxyXG4gKiBAYWxpYXMgbmV1bWFpcl9zdW1cclxuICogQHBhcmFtIHtBcnJheX0gc3VtbWFuZHMgLSBBcnJheSBvZiB2YWx1ZXMgdG8gc3VtIHVwLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgc3VtLlxyXG4gKiBAc2VlIHtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9LYWhhbl9zdW1tYXRpb25fYWxnb3JpdGhtI0Z1cnRoZXJfZW5oYW5jZW1lbnRzfVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3VtbWFuZHMpIHtcclxuICAgIGxldCBuID0gc3VtbWFuZHMubGVuZ3RoXHJcbiAgICBsZXQgc3VtID0gMDtcclxuICAgIGxldCBjb21wZW5zYXRpb24gPSAwO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgbGV0IHN1bW1hbmQgPSBzdW1tYW5kc1tpXVxyXG4gICAgICAgIGxldCB0ID0gc3VtICsgc3VtbWFuZDtcclxuICAgICAgICBpZiAoTWF0aC5hYnMoc3VtKSA+PSBNYXRoLmFicyhzdW1tYW5kKSkge1xyXG4gICAgICAgICAgICBjb21wZW5zYXRpb24gKz0gKHN1bSAtIHQpICsgc3VtbWFuZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb21wZW5zYXRpb24gKz0gKHN1bW1hbmQgLSB0KSArIHN1bTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VtID0gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBzdW0gKyBjb21wZW5zYXRpb247XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./numerical/neumair_sum.js\n");

/***/ }),

/***/ "./optimization/index.js":
/*!*******************************!*\
  !*** ./optimization/index.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "powell": () => (/* reexport safe */ _powell__WEBPACK_IMPORTED_MODULE_0__.default)
/* harmony export */ });
/* harmony import */ var _powell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./powell */ "./optimization/powell.js");


/***/ }),

/***/ "./optimization/powell.js":
/*!********************************!*\
  !*** ./optimization/powell.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// http://optimization-js.github.io/optimization-js/optimization.js.html#line438\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(f, x0, max_iter = 300) {\n  const epsilon = 1e-2;\n  const n = x0.length;\n  let alpha = 1e-3;\n  let pfx = 10000;\n  let x = x0.slice();\n  let fx = f(x);\n  let convergence = false;\n\n  while (max_iter-- >= 0 && !convergence) {\n    convergence = true;\n\n    for (let i = 0; i < n; ++i) {\n      x[i] += 1e-6;\n      let fxi = f(x);\n      x[i] -= 1e-6;\n      let dx = (fxi - fx) / 1e-6;\n\n      if (Math.abs(dx) > epsilon) {\n        convergence = false;\n      }\n\n      x[i] -= alpha * dx;\n      fx = f(x);\n    }\n\n    alpha *= pfx >= fx ? 1.05 : 0.4;\n    pfx = fx;\n  }\n\n  return x;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL29wdGltaXphdGlvbi9wb3dlbGwuanM/NGVlMSJdLCJuYW1lcyI6WyJmIiwieDAiLCJtYXhfaXRlciIsImVwc2lsb24iLCJuIiwibGVuZ3RoIiwiYWxwaGEiLCJwZngiLCJ4Iiwic2xpY2UiLCJmeCIsImNvbnZlcmdlbmNlIiwiaSIsImZ4aSIsImR4IiwiTWF0aCIsImFicyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsNkJBQWUsb0NBQVNBLENBQVQsRUFBWUMsRUFBWixFQUFnQkMsUUFBUSxHQUFDLEdBQXpCLEVBQThCO0FBQ3pDLFFBQU1DLE9BQU8sR0FBRyxJQUFoQjtBQUNBLFFBQU1DLENBQUMsR0FBR0gsRUFBRSxDQUFDSSxNQUFiO0FBQ0EsTUFBSUMsS0FBSyxHQUFHLElBQVo7QUFDQSxNQUFJQyxHQUFHLEdBQUcsS0FBVjtBQUNBLE1BQUlDLENBQUMsR0FBR1AsRUFBRSxDQUFDUSxLQUFILEVBQVI7QUFDQSxNQUFJQyxFQUFFLEdBQUdWLENBQUMsQ0FBQ1EsQ0FBRCxDQUFWO0FBQ0EsTUFBSUcsV0FBVyxHQUFHLEtBQWxCOztBQUVBLFNBQU9ULFFBQVEsTUFBTSxDQUFkLElBQW1CLENBQUNTLFdBQTNCLEVBQXdDO0FBQ3BDQSxlQUFXLEdBQUcsSUFBZDs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdSLENBQXBCLEVBQXVCLEVBQUVRLENBQXpCLEVBQTRCO0FBQ3hCSixPQUFDLENBQUNJLENBQUQsQ0FBRCxJQUFRLElBQVI7QUFDQSxVQUFJQyxHQUFHLEdBQUdiLENBQUMsQ0FBQ1EsQ0FBRCxDQUFYO0FBQ0FBLE9BQUMsQ0FBQ0ksQ0FBRCxDQUFELElBQVEsSUFBUjtBQUNBLFVBQUlFLEVBQUUsR0FBRyxDQUFDRCxHQUFHLEdBQUdILEVBQVAsSUFBYSxJQUF0Qjs7QUFDQSxVQUFJSyxJQUFJLENBQUNDLEdBQUwsQ0FBU0YsRUFBVCxJQUFlWCxPQUFuQixFQUE0QjtBQUN4QlEsbUJBQVcsR0FBRyxLQUFkO0FBQ0g7O0FBQ0RILE9BQUMsQ0FBQ0ksQ0FBRCxDQUFELElBQVFOLEtBQUssR0FBR1EsRUFBaEI7QUFDQUosUUFBRSxHQUFHVixDQUFDLENBQUNRLENBQUQsQ0FBTjtBQUNIOztBQUNERixTQUFLLElBQUtDLEdBQUcsSUFBSUcsRUFBUCxHQUFZLElBQVosR0FBbUIsR0FBN0I7QUFDQUgsT0FBRyxHQUFHRyxFQUFOO0FBQ0g7O0FBQ0QsU0FBT0YsQ0FBUDtBQUNIIiwiZmlsZSI6Ii4vb3B0aW1pemF0aW9uL3Bvd2VsbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHA6Ly9vcHRpbWl6YXRpb24tanMuZ2l0aHViLmlvL29wdGltaXphdGlvbi1qcy9vcHRpbWl6YXRpb24uanMuaHRtbCNsaW5lNDM4XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGYsIHgwLCBtYXhfaXRlcj0zMDApIHtcclxuICAgIGNvbnN0IGVwc2lsb24gPSAxZS0yO1xyXG4gICAgY29uc3QgbiA9IHgwLmxlbmd0aDtcclxuICAgIGxldCBhbHBoYSA9IDFlLTM7XHJcbiAgICBsZXQgcGZ4ID0gMTAwMDA7XHJcbiAgICBsZXQgeCA9IHgwLnNsaWNlKCk7XHJcbiAgICBsZXQgZnggPSBmKHgpO1xyXG4gICAgbGV0IGNvbnZlcmdlbmNlID0gZmFsc2U7XHJcbiAgICBcclxuICAgIHdoaWxlIChtYXhfaXRlci0tID49IDAgJiYgIWNvbnZlcmdlbmNlKSB7XHJcbiAgICAgICAgY29udmVyZ2VuY2UgPSB0cnVlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgICAgIHhbaV0gKz0gMWUtNjtcclxuICAgICAgICAgICAgbGV0IGZ4aSA9IGYoeCk7XHJcbiAgICAgICAgICAgIHhbaV0gLT0gMWUtNjtcclxuICAgICAgICAgICAgbGV0IGR4ID0gKGZ4aSAtIGZ4KSAvIDFlLTY7XHJcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhkeCkgPiBlcHNpbG9uKSB7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJnZW5jZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHhbaV0gLT0gYWxwaGEgKiBkeDtcclxuICAgICAgICAgICAgZnggPSBmKHgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhbHBoYSAqPSAocGZ4ID49IGZ4ID8gMS4wNSA6IDAuNCk7XHJcbiAgICAgICAgcGZ4ID0gZng7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./optimization/powell.js\n");

/***/ }),

/***/ "./util/index.js":
/*!***********************!*\
  !*** ./util/index.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Randomizer\": () => (/* reexport safe */ _randomizer__WEBPACK_IMPORTED_MODULE_0__.Randomizer),\n/* harmony export */   \"max\": () => (/* reexport safe */ _max__WEBPACK_IMPORTED_MODULE_1__.max)\n/* harmony export */ });\n/* harmony import */ var _randomizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./randomizer */ \"./util/randomizer.js\");\n/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./max */ \"./util/max.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL3V0aWwvaW5kZXguanM/ZTE2NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEiLCJmaWxlIjoiLi91dGlsL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgUmFuZG9taXplciB9IGZyb20gXCIuL3JhbmRvbWl6ZXJcIjtcclxuZXhwb3J0IHsgbWF4IH0gZnJvbSBcIi4vbWF4XCI7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./util/index.js\n");

/***/ }),

/***/ "./util/max.js":
/*!*********************!*\
  !*** ./util/max.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"max\": () => (/* binding */ max)\n/* harmony export */ });\nfunction max(values) {\n  let max;\n\n  for (const value of values) {\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  }\n\n  return max;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcnVpZC8uL3V0aWwvbWF4LmpzPzE0NzAiXSwibmFtZXMiOlsibWF4IiwidmFsdWVzIiwidmFsdWUiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxHQUFULENBQWFDLE1BQWIsRUFBcUI7QUFDMUIsTUFBSUQsR0FBSjs7QUFDQSxPQUFLLE1BQU1FLEtBQVgsSUFBb0JELE1BQXBCLEVBQTRCO0FBQzFCLFFBQUlDLEtBQUssSUFBSSxJQUFULEtBQ0lGLEdBQUcsR0FBR0UsS0FBTixJQUFnQkYsR0FBRyxLQUFLRyxTQUFSLElBQXFCRCxLQUFLLElBQUlBLEtBRGxELENBQUosRUFDK0Q7QUFDN0RGLFNBQUcsR0FBR0UsS0FBTjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT0YsR0FBUDtBQUNEIiwiZmlsZSI6Ii4vdXRpbC9tYXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbWF4KHZhbHVlcykge1xyXG4gIGxldCBtYXg7XHJcbiAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcclxuICAgIGlmICh2YWx1ZSAhPSBudWxsXHJcbiAgICAgICAgJiYgKG1heCA8IHZhbHVlIHx8IChtYXggPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+PSB2YWx1ZSkpKSB7XHJcbiAgICAgIG1heCA9IHZhbHVlO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbWF4O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./util/max.js\n");

/***/ }),

/***/ "./util/randomizer.js":
/*!****************************!*\
  !*** ./util/randomizer.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Randomizer\": () => (/* binding */ Randomizer)\n/* harmony export */ });\n/* harmony import */ var _matrix_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matrix/index */ \"./matrix/index.js\");\n\nclass Randomizer {\n  // https://github.com/bmurray7/mersenne-twister-examples/blob/master/javascript-mersenne-twister.js\n\n  /**\r\n   * Mersenne Twister\r\n   * @param {*} _seed \r\n   */\n  constructor(_seed) {\n    this._N = 624;\n    this._M = 397;\n    this._MATRIX_A = 0x9908b0df;\n    this._UPPER_MASK = 0x80000000;\n    this._LOWER_MASK = 0x7fffffff;\n    this._mt = new Array(this._N);\n    this._mti = this.N + 1;\n    this.seed = _seed || new Date().getTime();\n    return this;\n  }\n\n  set seed(_seed) {\n    this._seed = _seed;\n    let mt = this._mt;\n    mt[0] = _seed >>> 0;\n\n    for (this._mti = 1; this._mti < this._N; this._mti += 1) {\n      let mti = this._mti;\n      let s = mt[mti - 1] ^ mt[mti - 1] >>> 30;\n      mt[mti] = (((s & 0xffff0000) >>> 16) * 1812433253 << 16) + (s & 0x0000ffff) * 1812433253 + mti;\n      mt[mti] >>>= 0;\n    }\n  }\n\n  get seed() {\n    return this._seed;\n  }\n\n  get random() {\n    return this.random_int * (1.0 / 4294967296.0);\n  }\n\n  get random_int() {\n    let y,\n        mag01 = new Array(0x0, this._MATRIX_A);\n\n    if (this._mti >= this._N) {\n      let kk;\n\n      if (this._mti == this._N + 1) {\n        this.seed = 5489;\n      }\n\n      let N_M = this._N - this._M;\n      let M_N = this._M - this._N;\n\n      for (kk = 0; kk < N_M; ++kk) {\n        y = this._mt[kk] & this._UPPER_MASK | this._mt[kk + 1] & this._LOWER_MASK;\n        this._mt[kk] = this._mt[kk + this._M] ^ y >>> 1 ^ mag01[y & 0x1];\n      }\n\n      for (; kk < this._N - 1; ++kk) {\n        y = this._mt[kk] & this._UPPER_MASK | this._mt[kk + 1] & this._LOWER_MASK;\n        this._mt[kk] = this._mt[kk + M_N] ^ y >>> 1 ^ mag01[y & 0x1];\n      }\n\n      y = this._mt[this._N - 1] & this._UPPER_MASK | this._mt[0] & this._LOWER_MASK;\n      this._mt[this._N - 1] = this._mt[this._M - 1] ^ y >>> 1 ^ mag01[y & 0x1];\n      this._mti = 0;\n    }\n\n    y = this._mt[this._mti += 1];\n    y ^= y >>> 11;\n    y ^= y << 7 & 0x9d2c5680;\n    y ^= y << 15 & 0xefc60000;\n    y ^= y >>> 18;\n    return y >>> 0;\n  }\n\n  choice(A, n) {\n    if (A instanceof _matrix_index__WEBPACK_IMPORTED_MODULE_0__.Matrix) {\n      let [rows, cols] = A.shape;\n      if (n > rows) throw \"n bigger than A!\";\n      let sample = new Array(n);\n      let index_list = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.linspace)(0, rows - 1);\n\n      for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n        let random_index = this.random_int % l;\n        sample[i] = index_list.splice(random_index, 1)[0];\n      }\n\n      return sample.map(d => A.row(d));\n    } else if (Array.isArray(A) || A instanceof Float64Array) {\n      let rows = A.length;\n\n      if (n > rows) {\n        throw \"n bigger than A!\";\n      }\n\n      let sample = new Array(n);\n      let index_list = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.linspace)(0, rows - 1);\n\n      for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n        let random_index = this.random_int % l;\n        sample[i] = index_list.splice(random_index, 1)[0];\n      }\n\n      return sample.map(d => A[d]);\n    }\n  }\n\n  static choice(A, n, seed = 19870307) {\n    let [rows, cols] = A.shape;\n    if (n > rows) throw \"n bigger than A!\";\n    let rand = new Randomizer(seed);\n    let sample = new Array(n);\n    let index_list = (0,_matrix_index__WEBPACK_IMPORTED_MODULE_0__.linspace)(0, rows - 1);\n    /*let index_list = new Array(rows);\r\n    for (let i = 0; i < rows; ++i) {\r\n        index_list[i] = i;\r\n    }*/\n    //let result = new Matrix(n, cols);\n\n    for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n      let random_index = rand.random_int % l;\n      sample[i] = index_list.splice(random_index, 1)[0]; //random_index = index_list.splice(random_index, 1)[0];\n      //result.set_row(i, A.row(random_index))\n    } //return result;\n    //return new Matrix(n, cols, (row, col) => A.entry(sample[row], col))\n\n\n    return sample.map(d => A.row(d));\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./util/randomizer.js\n");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@saehrimnir/druidjs","version":"0.3.6","description":"A JavaScript Library for Dimensionality Reduction.","keywords":["dimensionality reduction","matrix","linear algebra"],"homepage":"https://renecutura.eu","license":"BSD-3-Clause","author":{"name":"Rene Cutura","url":"http://renecutura.eu"},"repository":{"type":"git","url":"https://github.com/saehm/druidjs.git"},"files":["dist/**/*.js"],"scripts":{"build":"rollup -c","build:dev":"webpack --config webpack.dev.js","build:prod":"webpack --config webpack.prod.js","build:all":"npm run build:dev && npm run build:prod"},"main":"dist/druid.js","unpkg":"dist/druid.min.js","jsdelivr":"dist/druid.min.js","module":"dist/druid.esm.js","devDependencies":{"@babel/core":"^7.13.10","@babel/plugin-proposal-class-properties":"^7.13.0","@babel/plugin-proposal-optional-chaining":"^7.13.8","@babel/preset-env":"^7.13.10","@rollup/plugin-json":"^4.1.0","@rollup/plugin-node-resolve":"^8.4.0","babel-loader":"^8.2.2","better-docs":"^2.3.2","json2module":"0.0","rimraf":"^2.7.1","rollup":"^2.29.0","rollup-plugin-jsdoc":"^0.1.2","rollup-plugin-node-resolve":"3","rollup-plugin-terser":"^7.0.2","source-map-loader":"^2.0.1","tape":"^4.13.3","webpack":"^5.26.3","webpack-cli":"^4.5.0"},"engines":{"node":">=14"}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});